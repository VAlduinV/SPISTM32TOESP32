
SPISTM32TOESP32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000804c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  080081ec  080081ec  000091ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a28  08008a28  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a28  08008a28  00009a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a30  08008a30  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a30  08008a30  00009a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a34  08008a34  00009a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008a38  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000078  08008ab0  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08008ab0  0000a5c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d737  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c9  00000000  00000000  000177df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00019aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  0001a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017889  00000000  00000000  0001b02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118bd  00000000  00000000  000328b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089686  00000000  00000000  00044174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd7fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003754  00000000  00000000  000cd840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d0f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081d4 	.word	0x080081d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080081d4 	.word	0x080081d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b988 	b.w	8000bc4 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	468e      	mov	lr, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	4688      	mov	r8, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d962      	bls.n	80009a8 <__udivmoddi4+0xdc>
 80008e2:	fab2 f682 	clz	r6, r2
 80008e6:	b14e      	cbz	r6, 80008fc <__udivmoddi4+0x30>
 80008e8:	f1c6 0320 	rsb	r3, r6, #32
 80008ec:	fa01 f806 	lsl.w	r8, r1, r6
 80008f0:	fa20 f303 	lsr.w	r3, r0, r3
 80008f4:	40b7      	lsls	r7, r6
 80008f6:	ea43 0808 	orr.w	r8, r3, r8
 80008fa:	40b4      	lsls	r4, r6
 80008fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000900:	fa1f fc87 	uxth.w	ip, r7
 8000904:	fbb8 f1fe 	udiv	r1, r8, lr
 8000908:	0c23      	lsrs	r3, r4, #16
 800090a:	fb0e 8811 	mls	r8, lr, r1, r8
 800090e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000912:	fb01 f20c 	mul.w	r2, r1, ip
 8000916:	429a      	cmp	r2, r3
 8000918:	d909      	bls.n	800092e <__udivmoddi4+0x62>
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000920:	f080 80ea 	bcs.w	8000af8 <__udivmoddi4+0x22c>
 8000924:	429a      	cmp	r2, r3
 8000926:	f240 80e7 	bls.w	8000af8 <__udivmoddi4+0x22c>
 800092a:	3902      	subs	r1, #2
 800092c:	443b      	add	r3, r7
 800092e:	1a9a      	subs	r2, r3, r2
 8000930:	b2a3      	uxth	r3, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800093e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000942:	459c      	cmp	ip, r3
 8000944:	d909      	bls.n	800095a <__udivmoddi4+0x8e>
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	f100 32ff 	add.w	r2, r0, #4294967295
 800094c:	f080 80d6 	bcs.w	8000afc <__udivmoddi4+0x230>
 8000950:	459c      	cmp	ip, r3
 8000952:	f240 80d3 	bls.w	8000afc <__udivmoddi4+0x230>
 8000956:	443b      	add	r3, r7
 8000958:	3802      	subs	r0, #2
 800095a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800095e:	eba3 030c 	sub.w	r3, r3, ip
 8000962:	2100      	movs	r1, #0
 8000964:	b11d      	cbz	r5, 800096e <__udivmoddi4+0xa2>
 8000966:	40f3      	lsrs	r3, r6
 8000968:	2200      	movs	r2, #0
 800096a:	e9c5 3200 	strd	r3, r2, [r5]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d905      	bls.n	8000982 <__udivmoddi4+0xb6>
 8000976:	b10d      	cbz	r5, 800097c <__udivmoddi4+0xb0>
 8000978:	e9c5 0100 	strd	r0, r1, [r5]
 800097c:	2100      	movs	r1, #0
 800097e:	4608      	mov	r0, r1
 8000980:	e7f5      	b.n	800096e <__udivmoddi4+0xa2>
 8000982:	fab3 f183 	clz	r1, r3
 8000986:	2900      	cmp	r1, #0
 8000988:	d146      	bne.n	8000a18 <__udivmoddi4+0x14c>
 800098a:	4573      	cmp	r3, lr
 800098c:	d302      	bcc.n	8000994 <__udivmoddi4+0xc8>
 800098e:	4282      	cmp	r2, r0
 8000990:	f200 8105 	bhi.w	8000b9e <__udivmoddi4+0x2d2>
 8000994:	1a84      	subs	r4, r0, r2
 8000996:	eb6e 0203 	sbc.w	r2, lr, r3
 800099a:	2001      	movs	r0, #1
 800099c:	4690      	mov	r8, r2
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0e5      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a2:	e9c5 4800 	strd	r4, r8, [r5]
 80009a6:	e7e2      	b.n	800096e <__udivmoddi4+0xa2>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	f000 8090 	beq.w	8000ace <__udivmoddi4+0x202>
 80009ae:	fab2 f682 	clz	r6, r2
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	f040 80a4 	bne.w	8000b00 <__udivmoddi4+0x234>
 80009b8:	1a8a      	subs	r2, r1, r2
 80009ba:	0c03      	lsrs	r3, r0, #16
 80009bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c0:	b280      	uxth	r0, r0
 80009c2:	b2bc      	uxth	r4, r7
 80009c4:	2101      	movs	r1, #1
 80009c6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ca:	fb0e 221c 	mls	r2, lr, ip, r2
 80009ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009d2:	fb04 f20c 	mul.w	r2, r4, ip
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d907      	bls.n	80009ea <__udivmoddi4+0x11e>
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009e0:	d202      	bcs.n	80009e8 <__udivmoddi4+0x11c>
 80009e2:	429a      	cmp	r2, r3
 80009e4:	f200 80e0 	bhi.w	8000ba8 <__udivmoddi4+0x2dc>
 80009e8:	46c4      	mov	ip, r8
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	fbb3 f2fe 	udiv	r2, r3, lr
 80009f0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009f4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009f8:	fb02 f404 	mul.w	r4, r2, r4
 80009fc:	429c      	cmp	r4, r3
 80009fe:	d907      	bls.n	8000a10 <__udivmoddi4+0x144>
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x142>
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	f200 80ca 	bhi.w	8000ba2 <__udivmoddi4+0x2d6>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	1b1b      	subs	r3, r3, r4
 8000a12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a16:	e7a5      	b.n	8000964 <__udivmoddi4+0x98>
 8000a18:	f1c1 0620 	rsb	r6, r1, #32
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a22:	431f      	orrs	r7, r3
 8000a24:	fa0e f401 	lsl.w	r4, lr, r1
 8000a28:	fa20 f306 	lsr.w	r3, r0, r6
 8000a2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a34:	4323      	orrs	r3, r4
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	fa1f fc87 	uxth.w	ip, r7
 8000a3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a42:	0c1c      	lsrs	r4, r3, #16
 8000a44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	fa02 f201 	lsl.w	r2, r2, r1
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x1a0>
 8000a58:	193c      	adds	r4, r7, r4
 8000a5a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a5e:	f080 809c 	bcs.w	8000b9a <__udivmoddi4+0x2ce>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f240 8099 	bls.w	8000b9a <__udivmoddi4+0x2ce>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	443c      	add	r4, r7
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	fa1f fe83 	uxth.w	lr, r3
 8000a74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a78:	fb09 4413 	mls	r4, r9, r3, r4
 8000a7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a84:	45a4      	cmp	ip, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x1ce>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a8e:	f080 8082 	bcs.w	8000b96 <__udivmoddi4+0x2ca>
 8000a92:	45a4      	cmp	ip, r4
 8000a94:	d97f      	bls.n	8000b96 <__udivmoddi4+0x2ca>
 8000a96:	3b02      	subs	r3, #2
 8000a98:	443c      	add	r4, r7
 8000a9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a9e:	eba4 040c 	sub.w	r4, r4, ip
 8000aa2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000aa6:	4564      	cmp	r4, ip
 8000aa8:	4673      	mov	r3, lr
 8000aaa:	46e1      	mov	r9, ip
 8000aac:	d362      	bcc.n	8000b74 <__udivmoddi4+0x2a8>
 8000aae:	d05f      	beq.n	8000b70 <__udivmoddi4+0x2a4>
 8000ab0:	b15d      	cbz	r5, 8000aca <__udivmoddi4+0x1fe>
 8000ab2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ab6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aba:	fa04 f606 	lsl.w	r6, r4, r6
 8000abe:	fa22 f301 	lsr.w	r3, r2, r1
 8000ac2:	431e      	orrs	r6, r3
 8000ac4:	40cc      	lsrs	r4, r1
 8000ac6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aca:	2100      	movs	r1, #0
 8000acc:	e74f      	b.n	800096e <__udivmoddi4+0xa2>
 8000ace:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ad2:	0c01      	lsrs	r1, r0, #16
 8000ad4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ad8:	b280      	uxth	r0, r0
 8000ada:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	463c      	mov	r4, r7
 8000ae4:	46b8      	mov	r8, r7
 8000ae6:	46be      	mov	lr, r7
 8000ae8:	2620      	movs	r6, #32
 8000aea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000aee:	eba2 0208 	sub.w	r2, r2, r8
 8000af2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000af6:	e766      	b.n	80009c6 <__udivmoddi4+0xfa>
 8000af8:	4601      	mov	r1, r0
 8000afa:	e718      	b.n	800092e <__udivmoddi4+0x62>
 8000afc:	4610      	mov	r0, r2
 8000afe:	e72c      	b.n	800095a <__udivmoddi4+0x8e>
 8000b00:	f1c6 0220 	rsb	r2, r6, #32
 8000b04:	fa2e f302 	lsr.w	r3, lr, r2
 8000b08:	40b7      	lsls	r7, r6
 8000b0a:	40b1      	lsls	r1, r6
 8000b0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b14:	430a      	orrs	r2, r1
 8000b16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b26:	fb08 f904 	mul.w	r9, r8, r4
 8000b2a:	40b0      	lsls	r0, r6
 8000b2c:	4589      	cmp	r9, r1
 8000b2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b32:	b280      	uxth	r0, r0
 8000b34:	d93e      	bls.n	8000bb4 <__udivmoddi4+0x2e8>
 8000b36:	1879      	adds	r1, r7, r1
 8000b38:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b3c:	d201      	bcs.n	8000b42 <__udivmoddi4+0x276>
 8000b3e:	4589      	cmp	r9, r1
 8000b40:	d81f      	bhi.n	8000b82 <__udivmoddi4+0x2b6>
 8000b42:	eba1 0109 	sub.w	r1, r1, r9
 8000b46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b4a:	fb09 f804 	mul.w	r8, r9, r4
 8000b4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b52:	b292      	uxth	r2, r2
 8000b54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b58:	4542      	cmp	r2, r8
 8000b5a:	d229      	bcs.n	8000bb0 <__udivmoddi4+0x2e4>
 8000b5c:	18ba      	adds	r2, r7, r2
 8000b5e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b62:	d2c4      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b64:	4542      	cmp	r2, r8
 8000b66:	d2c2      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b68:	f1a9 0102 	sub.w	r1, r9, #2
 8000b6c:	443a      	add	r2, r7
 8000b6e:	e7be      	b.n	8000aee <__udivmoddi4+0x222>
 8000b70:	45f0      	cmp	r8, lr
 8000b72:	d29d      	bcs.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b74:	ebbe 0302 	subs.w	r3, lr, r2
 8000b78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	46e1      	mov	r9, ip
 8000b80:	e796      	b.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b82:	eba7 0909 	sub.w	r9, r7, r9
 8000b86:	4449      	add	r1, r9
 8000b88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b90:	fb09 f804 	mul.w	r8, r9, r4
 8000b94:	e7db      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b96:	4673      	mov	r3, lr
 8000b98:	e77f      	b.n	8000a9a <__udivmoddi4+0x1ce>
 8000b9a:	4650      	mov	r0, sl
 8000b9c:	e766      	b.n	8000a6c <__udivmoddi4+0x1a0>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e6fd      	b.n	800099e <__udivmoddi4+0xd2>
 8000ba2:	443b      	add	r3, r7
 8000ba4:	3a02      	subs	r2, #2
 8000ba6:	e733      	b.n	8000a10 <__udivmoddi4+0x144>
 8000ba8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bac:	443b      	add	r3, r7
 8000bae:	e71c      	b.n	80009ea <__udivmoddi4+0x11e>
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x222>
 8000bb4:	eba1 0109 	sub.w	r1, r1, r9
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbe:	fb09 f804 	mul.w	r8, r9, r4
 8000bc2:	e7c4      	b.n	8000b4e <__udivmoddi4+0x282>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <UART_Print>:
uint8_t rx_buffer[1];
uint8_t tx_buffer[1] = {0xAB};  // Наприклад, постійно відповідаємо 0xAB
/* USER CODE END 0 */

static void UART_Print(char* str)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fb05 	bl	80001e0 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4803      	ldr	r0, [pc, #12]	@ (8000bec <UART_Print+0x24>)
 8000be0:	f002 f910 	bl	8002e04 <HAL_UART_Transmit>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000ec 	.word	0x200000ec

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f000 fcf1 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 fa47 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fb03 	bl	8001208 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c02:	f000 faa1 	bl	8001148 <MX_SPI1_Init>
  // MX_SDIO_SD_Init();
  MX_FATFS_Init();
 8000c06:	f002 fcb9 	bl	800357c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000c0a:	f000 fad3 	bl	80011b4 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  //Test The SD Card
  SD_Card_Test();
 8000c0e:	f000 f823 	bl	8000c58 <SD_Card_Test>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer, 1, HAL_MAX_DELAY);
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <main+0x58>)
 8000c1c:	490b      	ldr	r1, [pc, #44]	@ (8000c4c <main+0x5c>)
 8000c1e:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <main+0x60>)
 8000c20:	f001 fe1b 	bl	800285a <HAL_SPI_TransmitReceive>

	  // Включаем LED (низкий уровень на PC13)
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c2a:	480a      	ldr	r0, [pc, #40]	@ (8000c54 <main+0x64>)
 8000c2c:	f000 ffd6 	bl	8001bdc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000c30:	2064      	movs	r0, #100	@ 0x64
 8000c32:	f000 fd45 	bl	80016c0 <HAL_Delay>

	  // Выключаем LED (высокий уровень на PC13)
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <main+0x64>)
 8000c3e:	f000 ffcd 	bl	8001bdc <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer, 1, HAL_MAX_DELAY);
 8000c42:	bf00      	nop
 8000c44:	e7e5      	b.n	8000c12 <main+0x22>
 8000c46:	bf00      	nop
 8000c48:	20000230 	.word	0x20000230
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000094 	.word	0x20000094
 8000c54:	40020800 	.word	0x40020800

08000c58 <SD_Card_Test>:
  /* USER CODE END 3 */
}


static void SD_Card_Test(void)
{
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
  uint32_t TotalSize, FreeSpace;
  char RW_Buffer[200];
  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, "", 1);
 8000c62:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000c66:	f103 0310 	add.w	r3, r3, #16
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	49b4      	ldr	r1, [pc, #720]	@ (8000f40 <SD_Card_Test+0x2e8>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 fb91 	bl	8006398 <f_mount>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000c7c:	f102 020f 	add.w	r2, r2, #15
 8000c80:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000c82:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000c86:	f103 030f 	add.w	r3, r3, #15
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00d      	beq.n	8000cac <SD_Card_Test+0x54>
    {
      sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000c90:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000c94:	f103 030f 	add.w	r3, r3, #15
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	49a9      	ldr	r1, [pc, #676]	@ (8000f44 <SD_Card_Test+0x2ec>)
 8000c9e:	48aa      	ldr	r0, [pc, #680]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000ca0:	f006 fdf8 	bl	8007894 <siprintf>
      UART_Print(TxBuffer);
 8000ca4:	48a8      	ldr	r0, [pc, #672]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000ca6:	f7ff ff8f 	bl	8000bc8 <UART_Print>
      break;
 8000caa:	e1b4      	b.n	8001016 <SD_Card_Test+0x3be>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 8000cac:	49a7      	ldr	r1, [pc, #668]	@ (8000f4c <SD_Card_Test+0x2f4>)
 8000cae:	48a6      	ldr	r0, [pc, #664]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000cb0:	f006 fdf0 	bl	8007894 <siprintf>
    UART_Print(TxBuffer);
 8000cb4:	48a4      	ldr	r0, [pc, #656]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000cb6:	f7ff ff87 	bl	8000bc8 <UART_Print>
    //------------------[ Get & Print The SD Card Size & Free Space ]--------------------
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000cba:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cbe:	3a38      	subs	r2, #56	@ 0x38
 8000cc0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000cc4:	3b04      	subs	r3, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	489d      	ldr	r0, [pc, #628]	@ (8000f40 <SD_Card_Test+0x2e8>)
 8000cca:	f006 fb32 	bl	8007332 <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000cce:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000cd2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	3b02      	subs	r3, #2
 8000cda:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000cde:	f852 2c78 	ldr.w	r2, [r2, #-120]
 8000ce2:	8952      	ldrh	r2, [r2, #10]
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fd3d 	bl	8000768 <__aeabi_ui2d>
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	4b97      	ldr	r3, [pc, #604]	@ (8000f50 <SD_Card_Test+0x2f8>)
 8000cf4:	f7ff facc 	bl	8000290 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff fdac 	bl	800085c <__aeabi_d2uiz>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000d0a:	f102 0208 	add.w	r2, r2, #8
 8000d0e:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000d10:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d14:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000d18:	895b      	ldrh	r3, [r3, #10]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d20:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000d24:	fb02 f303 	mul.w	r3, r2, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fd1d 	bl	8000768 <__aeabi_ui2d>
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	4b87      	ldr	r3, [pc, #540]	@ (8000f50 <SD_Card_Test+0x2f8>)
 8000d34:	f7ff faac 	bl	8000290 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f7ff fd8c 	bl	800085c <__aeabi_d2uiz>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000d4a:	f102 0204 	add.w	r2, r2, #4
 8000d4e:	6013      	str	r3, [r2, #0]
    sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000d50:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000d54:	f103 0308 	add.w	r3, r3, #8
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	497e      	ldr	r1, [pc, #504]	@ (8000f54 <SD_Card_Test+0x2fc>)
 8000d5c:	487a      	ldr	r0, [pc, #488]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000d5e:	f006 fd99 	bl	8007894 <siprintf>
    UART_Print(TxBuffer);
 8000d62:	4879      	ldr	r0, [pc, #484]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000d64:	f7ff ff30 	bl	8000bc8 <UART_Print>
    sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000d68:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000d6c:	f103 0304 	add.w	r3, r3, #4
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4979      	ldr	r1, [pc, #484]	@ (8000f58 <SD_Card_Test+0x300>)
 8000d74:	4874      	ldr	r0, [pc, #464]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000d76:	f006 fd8d 	bl	8007894 <siprintf>
    UART_Print(TxBuffer);
 8000d7a:	4873      	ldr	r0, [pc, #460]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000d7c:	f7ff ff24 	bl	8000bc8 <UART_Print>
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000d80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d84:	3b34      	subs	r3, #52	@ 0x34
 8000d86:	220b      	movs	r2, #11
 8000d88:	4974      	ldr	r1, [pc, #464]	@ (8000f5c <SD_Card_Test+0x304>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f005 fb4a 	bl	8006424 <f_open>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000d96:	f102 020f 	add.w	r2, r2, #15
 8000d9a:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000d9c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000da0:	f103 030f 	add.w	r3, r3, #15
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00d      	beq.n	8000dc6 <SD_Card_Test+0x16e>
    {
      sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000daa:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000dae:	f103 030f 	add.w	r3, r3, #15
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	496a      	ldr	r1, [pc, #424]	@ (8000f60 <SD_Card_Test+0x308>)
 8000db8:	4863      	ldr	r0, [pc, #396]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000dba:	f006 fd6b 	bl	8007894 <siprintf>
      UART_Print(TxBuffer);
 8000dbe:	4862      	ldr	r0, [pc, #392]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000dc0:	f7ff ff02 	bl	8000bc8 <UART_Print>
      break;
 8000dc4:	e127      	b.n	8001016 <SD_Card_Test+0x3be>
    }
    sprintf(TxBuffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000dc6:	4967      	ldr	r1, [pc, #412]	@ (8000f64 <SD_Card_Test+0x30c>)
 8000dc8:	485f      	ldr	r0, [pc, #380]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000dca:	f006 fd63 	bl	8007894 <siprintf>
    UART_Print(TxBuffer);
 8000dce:	485e      	ldr	r0, [pc, #376]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000dd0:	f7ff fefa 	bl	8000bc8 <UART_Print>
    // (1) Write Data To The Text File [ Using f_puts() Function ]
    f_puts("Hello! From STM32 To SD Card Over SPI, Using f_puts()\n", &Fil);
 8000dd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dd8:	3b34      	subs	r3, #52	@ 0x34
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4862      	ldr	r0, [pc, #392]	@ (8000f68 <SD_Card_Test+0x310>)
 8000dde:	f006 fc12 	bl	8007606 <f_puts>
    // (2) Write Data To The Text File [ Using f_write() Function ]
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SPI, Using f_write()\r\n");
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	3b0c      	subs	r3, #12
 8000de8:	4a60      	ldr	r2, [pc, #384]	@ (8000f6c <SD_Card_Test+0x314>)
 8000dea:	461c      	mov	r4, r3
 8000dec:	4615      	mov	r5, r2
 8000dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dfe:	c403      	stmia	r4!, {r0, r1}
 8000e00:	7022      	strb	r2, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	3b0c      	subs	r3, #12
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff f9e9 	bl	80001e0 <strlen>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000e14:	f107 0110 	add.w	r1, r7, #16
 8000e18:	390c      	subs	r1, #12
 8000e1a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000e1e:	3834      	subs	r0, #52	@ 0x34
 8000e20:	f005 fe27 	bl	8006a72 <f_write>
    // Close The File
    f_close(&Fil);
 8000e24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e28:	3b34      	subs	r3, #52	@ 0x34
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 f833 	bl	8006e96 <f_close>
    //------------------[ Open A Text File For Read & Read Its Data ]--------------------
    // Open The File
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ);
 8000e30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e34:	3b34      	subs	r3, #52	@ 0x34
 8000e36:	2201      	movs	r2, #1
 8000e38:	4948      	ldr	r1, [pc, #288]	@ (8000f5c <SD_Card_Test+0x304>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f005 faf2 	bl	8006424 <f_open>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000e46:	f102 020f 	add.w	r2, r2, #15
 8000e4a:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000e4c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000e50:	f103 030f 	add.w	r3, r3, #15
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <SD_Card_Test+0x212>
    {
      sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Read.. \r\n");
 8000e5a:	4945      	ldr	r1, [pc, #276]	@ (8000f70 <SD_Card_Test+0x318>)
 8000e5c:	483a      	ldr	r0, [pc, #232]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000e5e:	f006 fd19 	bl	8007894 <siprintf>
      UART_Print(TxBuffer);
 8000e62:	4839      	ldr	r0, [pc, #228]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000e64:	f7ff feb0 	bl	8000bc8 <UART_Print>
      break;
 8000e68:	e0d5      	b.n	8001016 <SD_Card_Test+0x3be>
    }
    // (1) Read The Text File's Data [ Using f_gets() Function ]
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 8000e6a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e6e:	3a34      	subs	r2, #52	@ 0x34
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	3b0c      	subs	r3, #12
 8000e76:	21c8      	movs	r1, #200	@ 0xc8
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fb0f 	bl	800749c <f_gets>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_gets():%s", RW_Buffer);
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	3b0c      	subs	r3, #12
 8000e84:	461a      	mov	r2, r3
 8000e86:	493b      	ldr	r1, [pc, #236]	@ (8000f74 <SD_Card_Test+0x31c>)
 8000e88:	482f      	ldr	r0, [pc, #188]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000e8a:	f006 fd03 	bl	8007894 <siprintf>
    UART_Print(TxBuffer);
 8000e8e:	482e      	ldr	r0, [pc, #184]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000e90:	f7ff fe9a 	bl	8000bc8 <UART_Print>
    // (2) Read The Text File's Data [ Using f_read() Function ]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000e94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000e98:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000e9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ea0:	3b3c      	subs	r3, #60	@ 0x3c
 8000ea2:	f107 0110 	add.w	r1, r7, #16
 8000ea6:	390c      	subs	r1, #12
 8000ea8:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000eac:	3834      	subs	r0, #52	@ 0x34
 8000eae:	f005 fc81 	bl	80067b4 <f_read>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_read():%s", RW_Buffer);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	3b0c      	subs	r3, #12
 8000eb8:	461a      	mov	r2, r3
 8000eba:	492f      	ldr	r1, [pc, #188]	@ (8000f78 <SD_Card_Test+0x320>)
 8000ebc:	4822      	ldr	r0, [pc, #136]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000ebe:	f006 fce9 	bl	8007894 <siprintf>
    UART_Print(TxBuffer);
 8000ec2:	4821      	ldr	r0, [pc, #132]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000ec4:	f7ff fe80 	bl	8000bc8 <UART_Print>
    // Close The File
    f_close(&Fil);
 8000ec8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ecc:	3b34      	subs	r3, #52	@ 0x34
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 ffe1 	bl	8006e96 <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 8000ed4:	4929      	ldr	r1, [pc, #164]	@ (8000f7c <SD_Card_Test+0x324>)
 8000ed6:	481c      	ldr	r0, [pc, #112]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000ed8:	f006 fcdc 	bl	8007894 <siprintf>
    UART_Print(TxBuffer);
 8000edc:	481a      	ldr	r0, [pc, #104]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000ede:	f7ff fe73 	bl	8000bc8 <UART_Print>
    //------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
    // (1) Open The Existing File For Write (Update)
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_OPEN_EXISTING | FA_WRITE);
 8000ee2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ee6:	3b34      	subs	r3, #52	@ 0x34
 8000ee8:	2202      	movs	r2, #2
 8000eea:	491c      	ldr	r1, [pc, #112]	@ (8000f5c <SD_Card_Test+0x304>)
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 fa99 	bl	8006424 <f_open>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000ef8:	f102 020f 	add.w	r2, r2, #15
 8000efc:	7013      	strb	r3, [r2, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8000efe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f02:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f0a:	3b34      	subs	r3, #52	@ 0x34
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 ffeb 	bl	8006eea <f_lseek>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000f1a:	f102 020f 	add.w	r2, r2, #15
 8000f1e:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000f20:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000f24:	f103 030f 	add.w	r3, r3, #15
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d02a      	beq.n	8000f84 <SD_Card_Test+0x32c>
    {
      sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Update.. \r\n");
 8000f2e:	4914      	ldr	r1, [pc, #80]	@ (8000f80 <SD_Card_Test+0x328>)
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000f32:	f006 fcaf 	bl	8007894 <siprintf>
      UART_Print(TxBuffer);
 8000f36:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <SD_Card_Test+0x2f0>)
 8000f38:	f7ff fe46 	bl	8000bc8 <UART_Print>
      break;
 8000f3c:	e06b      	b.n	8001016 <SD_Card_Test+0x3be>
 8000f3e:	bf00      	nop
 8000f40:	080081ec 	.word	0x080081ec
 8000f44:	080081f0 	.word	0x080081f0
 8000f48:	20000134 	.word	0x20000134
 8000f4c:	08008224 	.word	0x08008224
 8000f50:	3fe00000 	.word	0x3fe00000
 8000f54:	08008248 	.word	0x08008248
 8000f58:	08008268 	.word	0x08008268
 8000f5c:	0800828c 	.word	0x0800828c
 8000f60:	080082a0 	.word	0x080082a0
 8000f64:	080082e4 	.word	0x080082e4
 8000f68:	08008324 	.word	0x08008324
 8000f6c:	0800835c 	.word	0x0800835c
 8000f70:	08008398 	.word	0x08008398
 8000f74:	080083d4 	.word	0x080083d4
 8000f78:	0800840c 	.word	0x0800840c
 8000f7c:	08008444 	.word	0x08008444
 8000f80:	08008458 	.word	0x08008458
    }
    // (2) Write New Line of Text Data To The File
    FR_Status = f_puts("This New Line Was Added During Update!\r\n", &Fil);
 8000f84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f88:	3b34      	subs	r3, #52	@ 0x34
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4838      	ldr	r0, [pc, #224]	@ (8001070 <SD_Card_Test+0x418>)
 8000f8e:	f006 fb3a 	bl	8007606 <f_puts>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000f98:	f102 020f 	add.w	r2, r2, #15
 8000f9c:	7013      	strb	r3, [r2, #0]
    f_close(&Fil);
 8000f9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fa2:	3b34      	subs	r3, #52	@ 0x34
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 ff76 	bl	8006e96 <f_close>
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	3b0c      	subs	r3, #12
 8000fb0:	22c8      	movs	r2, #200	@ 0xc8
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fc8f 	bl	80078d8 <memset>
    // (3) Read The Contents of The Text File After The Update
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ); // Open The File For Read
 8000fba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fbe:	3b34      	subs	r3, #52	@ 0x34
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	492c      	ldr	r1, [pc, #176]	@ (8001074 <SD_Card_Test+0x41c>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 fa2d 	bl	8006424 <f_open>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000fd0:	f102 020f 	add.w	r2, r2, #15
 8000fd4:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000fd6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000fda:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000fde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fe2:	3b3c      	subs	r3, #60	@ 0x3c
 8000fe4:	f107 0110 	add.w	r1, r7, #16
 8000fe8:	390c      	subs	r1, #12
 8000fea:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000fee:	3834      	subs	r0, #52	@ 0x34
 8000ff0:	f005 fbe0 	bl	80067b4 <f_read>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) After Update:%s", RW_Buffer);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	3b0c      	subs	r3, #12
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	491e      	ldr	r1, [pc, #120]	@ (8001078 <SD_Card_Test+0x420>)
 8000ffe:	481f      	ldr	r0, [pc, #124]	@ (800107c <SD_Card_Test+0x424>)
 8001000:	f006 fc48 	bl	8007894 <siprintf>
    UART_Print(TxBuffer);
 8001004:	481d      	ldr	r0, [pc, #116]	@ (800107c <SD_Card_Test+0x424>)
 8001006:	f7ff fddf 	bl	8000bc8 <UART_Print>
    f_close(&Fil);
 800100a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800100e:	3b34      	subs	r3, #52	@ 0x34
 8001010:	4618      	mov	r0, r3
 8001012:	f005 ff40 	bl	8006e96 <f_close>
        UART_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8001016:	2200      	movs	r2, #0
 8001018:	4919      	ldr	r1, [pc, #100]	@ (8001080 <SD_Card_Test+0x428>)
 800101a:	2000      	movs	r0, #0
 800101c:	f005 f9bc 	bl	8006398 <f_mount>
 8001020:	4603      	mov	r3, r0
 8001022:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8001026:	f102 020f 	add.w	r2, r2, #15
 800102a:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 800102c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001030:	f103 030f 	add.w	r3, r3, #15
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00d      	beq.n	8001056 <SD_Card_Test+0x3fe>
  {
      sprintf(TxBuffer, "Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 800103a:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 800103e:	f103 030f 	add.w	r3, r3, #15
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	490f      	ldr	r1, [pc, #60]	@ (8001084 <SD_Card_Test+0x42c>)
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <SD_Card_Test+0x424>)
 800104a:	f006 fc23 	bl	8007894 <siprintf>
      UART_Print(TxBuffer);
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <SD_Card_Test+0x424>)
 8001050:	f7ff fdba 	bl	8000bc8 <UART_Print>
  } else{
      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
      UART_Print(TxBuffer);
  }
}
 8001054:	e006      	b.n	8001064 <SD_Card_Test+0x40c>
      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8001056:	490c      	ldr	r1, [pc, #48]	@ (8001088 <SD_Card_Test+0x430>)
 8001058:	4808      	ldr	r0, [pc, #32]	@ (800107c <SD_Card_Test+0x424>)
 800105a:	f006 fc1b 	bl	8007894 <siprintf>
      UART_Print(TxBuffer);
 800105e:	4807      	ldr	r0, [pc, #28]	@ (800107c <SD_Card_Test+0x424>)
 8001060:	f7ff fdb2 	bl	8000bc8 <UART_Print>
}
 8001064:	bf00      	nop
 8001066:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bdb0      	pop	{r4, r5, r7, pc}
 8001070:	08008498 	.word	0x08008498
 8001074:	0800828c 	.word	0x0800828c
 8001078:	080084c4 	.word	0x080084c4
 800107c:	20000134 	.word	0x20000134
 8001080:	080081ec 	.word	0x080081ec
 8001084:	080084f8 	.word	0x080084f8
 8001088:	08008530 	.word	0x08008530

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	@ 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2230      	movs	r2, #48	@ 0x30
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f006 fc1c 	bl	80078d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <SystemClock_Config+0xb4>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	4a21      	ldr	r2, [pc, #132]	@ (8001140 <SystemClock_Config+0xb4>)
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010be:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <SystemClock_Config+0xb4>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <SystemClock_Config+0xb8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <SystemClock_Config+0xb8>)
 80010d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <SystemClock_Config+0xb8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f0:	2310      	movs	r3, #16
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fd87 	bl	8001c10 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001108:	f000 f8d0 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f000 ffea 	bl	8002100 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001132:	f000 f8bb 	bl	80012ac <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3750      	adds	r7, #80	@ 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_SPI1_Init+0x64>)
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <MX_SPI1_Init+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001154:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001158:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001178:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001194:	220a      	movs	r2, #10
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_SPI1_Init+0x64>)
 800119a:	f001 f991 	bl	80024c0 <HAL_SPI_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a4:	f000 f882 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000094 	.word	0x20000094
 80011b0:	40013000 	.word	0x40013000

080011b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <MX_USART1_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ec:	f001 fdba 	bl	8002d64 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 f859 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000ec 	.word	0x200000ec
 8001204:	40011000 	.word	0x40011000

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a11      	ldr	r2, [pc, #68]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_GPIO_Init+0x9c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001278:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <MX_GPIO_Init+0xa0>)
 800127a:	f000 fcaf 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800127e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4619      	mov	r1, r3
 8001296:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_GPIO_Init+0xa0>)
 8001298:	f000 fb1c 	bl	80018d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020800 	.word	0x40020800

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <Error_Handler+0x8>

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a28      	ldr	r2, [pc, #160]	@ (80013c8 <HAL_SPI_MspInit+0xc0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d149      	bne.n	80013be <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	4a26      	ldr	r2, [pc, #152]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	6453      	str	r3, [r2, #68]	@ 0x44
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a1f      	ldr	r2, [pc, #124]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a18      	ldr	r2, [pc, #96]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_SPI_MspInit+0xc4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800137e:	23b0      	movs	r3, #176	@ 0xb0
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800138e:	2305      	movs	r3, #5
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <HAL_SPI_MspInit+0xc8>)
 800139a:	f000 fa9b 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ae:	2305      	movs	r3, #5
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <HAL_SPI_MspInit+0xcc>)
 80013ba:	f000 fa8b 	bl	80018d4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40013000 	.word	0x40013000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	@ (800145c <HAL_UART_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12c      	bne.n	8001454 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <HAL_UART_MspInit+0x88>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_UART_MspInit+0x88>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	6453      	str	r3, [r2, #68]	@ 0x44
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_UART_MspInit+0x88>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <HAL_UART_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a10      	ldr	r2, [pc, #64]	@ (8001460 <HAL_UART_MspInit+0x88>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_UART_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001432:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001444:	2307      	movs	r3, #7
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <HAL_UART_MspInit+0x8c>)
 8001450:	f000 fa40 	bl	80018d4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	@ 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40011000 	.word	0x40011000
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <NMI_Handler+0x4>

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <UsageFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <SysTick_Handler+0x34>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <SysTick_Handler+0x18>
	 Timer1--;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <SysTick_Handler+0x34>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <SysTick_Handler+0x34>)
 80014d2:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <SysTick_Handler+0x38>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <SysTick_Handler+0x2c>
	 Timer2--;
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <SysTick_Handler+0x38>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <SysTick_Handler+0x38>)
 80014e6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f000 f8ca 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000244 	.word	0x20000244
 80014f4:	20000246 	.word	0x20000246

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f006 f9de 	bl	80078e8 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20020000 	.word	0x20020000
 8001558:	00000400 	.word	0x00000400
 800155c:	20000234 	.word	0x20000234
 8001560:	200005c8 	.word	0x200005c8

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158c:	f7ff ffea 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	@ (80015d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b6:	f006 f99d 	bl	80078f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ba:	f7ff fb19 	bl	8000bf0 <main>
  bx  lr    
 80015be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80015cc:	08008a38 	.word	0x08008a38
  ldr r2, =_sbss
 80015d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80015d4:	200005c8 	.word	0x200005c8

080015d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_Init+0x40>)
 80015e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <HAL_Init+0x40>)
 80015f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <HAL_Init+0x40>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f931 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	200f      	movs	r0, #15
 800160c:	f000 f808 	bl	8001620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fe52 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_InitTick+0x54>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_InitTick+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001636:	fbb3 f3f1 	udiv	r3, r3, r1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f93b 	bl	80018ba <HAL_SYSTICK_Config>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00e      	b.n	800166c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d80a      	bhi.n	800166a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001654:	2200      	movs	r2, #0
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f000 f911 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001660:	4a06      	ldr	r2, [pc, #24]	@ (800167c <HAL_InitTick+0x5c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e000      	b.n	800166c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000004 	.word	0x20000004
 8001678:	2000000c 	.word	0x2000000c
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x20>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_IncTick+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	@ (80016a4 <HAL_IncTick+0x24>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000000c 	.word	0x2000000c
 80016a4:	20000238 	.word	0x20000238

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000238 	.word	0x20000238

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff ffee 	bl	80016a8 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d005      	beq.n	80016e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_Delay+0x44>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016e6:	bf00      	nop
 80016e8:	f7ff ffde 	bl	80016a8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8f7      	bhi.n	80016e8 <HAL_Delay+0x28>
  {
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000000c 	.word	0x2000000c

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff8e 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff47 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff5c 	bl	8001750 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff8e 	bl	80017c0 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5d 	bl	800176c <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffb0 	bl	8001828 <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e159      	b.n	8001ba4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	429a      	cmp	r2, r3
 800190a:	f040 8148 	bne.w	8001b9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d005      	beq.n	8001926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	2b02      	cmp	r3, #2
 8001924:	d130      	bne.n	8001988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 0201 	and.w	r2, r3, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b03      	cmp	r3, #3
 8001992:	d017      	beq.n	80019c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d123      	bne.n	8001a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	69b9      	ldr	r1, [r7, #24]
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a2 	beq.w	8001b9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b57      	ldr	r3, [pc, #348]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	4a56      	ldr	r2, [pc, #344]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6a:	4b54      	ldr	r3, [pc, #336]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a76:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_GPIO_Init+0x2ec>)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a49      	ldr	r2, [pc, #292]	@ (8001bc4 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x202>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a48      	ldr	r2, [pc, #288]	@ (8001bc8 <HAL_GPIO_Init+0x2f4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x1fe>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a47      	ldr	r2, [pc, #284]	@ (8001bcc <HAL_GPIO_Init+0x2f8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x1fa>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a46      	ldr	r2, [pc, #280]	@ (8001bd0 <HAL_GPIO_Init+0x2fc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x1f6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a45      	ldr	r2, [pc, #276]	@ (8001bd4 <HAL_GPIO_Init+0x300>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x1f2>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	@ (8001bc0 <HAL_GPIO_Init+0x2ec>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f aea2 	bls.w	80018f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e267      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d075      	beq.n	8001d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c2e:	4b88      	ldr	r3, [pc, #544]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d00c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3a:	4b85      	ldr	r3, [pc, #532]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d112      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c46:	4b82      	ldr	r3, [pc, #520]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c52:	d10b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b7e      	ldr	r3, [pc, #504]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d05b      	beq.n	8001d18 <HAL_RCC_OscConfig+0x108>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d157      	bne.n	8001d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e242      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x74>
 8001c76:	4b76      	ldr	r3, [pc, #472]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a75      	ldr	r2, [pc, #468]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e01d      	b.n	8001cc0 <HAL_RCC_OscConfig+0xb0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x98>
 8001c8e:	4b70      	ldr	r3, [pc, #448]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6f      	ldr	r2, [pc, #444]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0xb0>
 8001ca8:	4b69      	ldr	r3, [pc, #420]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a68      	ldr	r2, [pc, #416]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b66      	ldr	r3, [pc, #408]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a65      	ldr	r2, [pc, #404]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fcee 	bl	80016a8 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fcea 	bl	80016a8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e207      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xc0>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fcda 	bl	80016a8 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fcd6 	bl	80016a8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	@ 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1f3      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	4b51      	ldr	r3, [pc, #324]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xe8>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d26:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d11c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b44      	ldr	r3, [pc, #272]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	4b41      	ldr	r3, [pc, #260]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x152>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e1c7      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4937      	ldr	r1, [pc, #220]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	e03a      	b.n	8001dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b34      	ldr	r3, [pc, #208]	@ (8001e54 <HAL_RCC_OscConfig+0x244>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff fc8f 	bl	80016a8 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fc8b 	bl	80016a8 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1a8      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4925      	ldr	r1, [pc, #148]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b24      	ldr	r3, [pc, #144]	@ (8001e54 <HAL_RCC_OscConfig+0x244>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fc6e 	bl	80016a8 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fc6a 	bl	80016a8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e187      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d036      	beq.n	8001e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d016      	beq.n	8001e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_RCC_OscConfig+0x248>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff fc4e 	bl	80016a8 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fc4a 	bl	80016a8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e167      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_RCC_OscConfig+0x240>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x200>
 8001e2e:	e01b      	b.n	8001e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_RCC_OscConfig+0x248>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fc37 	bl	80016a8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	e00e      	b.n	8001e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fc33 	bl	80016a8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d907      	bls.n	8001e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e150      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
 8001e50:	40023800 	.word	0x40023800
 8001e54:	42470000 	.word	0x42470000
 8001e58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b88      	ldr	r3, [pc, #544]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ea      	bne.n	8001e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8097 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b81      	ldr	r3, [pc, #516]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b7a      	ldr	r3, [pc, #488]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b77      	ldr	r3, [pc, #476]	@ (8002084 <HAL_RCC_OscConfig+0x474>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b74      	ldr	r3, [pc, #464]	@ (8002084 <HAL_RCC_OscConfig+0x474>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a73      	ldr	r2, [pc, #460]	@ (8002084 <HAL_RCC_OscConfig+0x474>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fbf3 	bl	80016a8 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff fbef 	bl	80016a8 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e10c      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8002084 <HAL_RCC_OscConfig+0x474>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x2ea>
 8001eec:	4b64      	ldr	r3, [pc, #400]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef0:	4a63      	ldr	r2, [pc, #396]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x324>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x30c>
 8001f02:	4b5f      	ldr	r3, [pc, #380]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	4a5e      	ldr	r2, [pc, #376]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f12:	4a5b      	ldr	r2, [pc, #364]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0x324>
 8001f1c:	4b58      	ldr	r3, [pc, #352]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f20:	4a57      	ldr	r2, [pc, #348]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f28:	4b55      	ldr	r3, [pc, #340]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2c:	4a54      	ldr	r2, [pc, #336]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f023 0304 	bic.w	r3, r3, #4
 8001f32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fbb4 	bl	80016a8 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7ff fbb0 	bl	80016a8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0cb      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	4b49      	ldr	r3, [pc, #292]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ee      	beq.n	8001f44 <HAL_RCC_OscConfig+0x334>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fb9e 	bl	80016a8 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7ff fb9a 	bl	80016a8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0b5      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	4b3e      	ldr	r3, [pc, #248]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ee      	bne.n	8001f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f98:	4b39      	ldr	r3, [pc, #228]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	4a38      	ldr	r2, [pc, #224]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a1 	beq.w	80020f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fae:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d05c      	beq.n	8002074 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d141      	bne.n	8002046 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b31      	ldr	r3, [pc, #196]	@ (8002088 <HAL_RCC_OscConfig+0x478>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fb6e 	bl	80016a8 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff fb6a 	bl	80016a8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e087      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	4b27      	ldr	r3, [pc, #156]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	3b01      	subs	r3, #1
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	491b      	ldr	r1, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <HAL_RCC_OscConfig+0x478>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fb43 	bl	80016a8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff fb3f 	bl	80016a8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e05c      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x416>
 8002044:	e054      	b.n	80020f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_RCC_OscConfig+0x478>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fb2c 	bl	80016a8 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff fb28 	bl	80016a8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e045      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_OscConfig+0x470>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x444>
 8002072:	e03d      	b.n	80020f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e038      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
 8002080:	40023800 	.word	0x40023800
 8002084:	40007000 	.word	0x40007000
 8002088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_RCC_OscConfig+0x4ec>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d028      	beq.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d121      	bne.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11a      	bne.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020bc:	4013      	ands	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d111      	bne.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	3b01      	subs	r3, #1
 80020d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0cc      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b68      	ldr	r3, [pc, #416]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d90c      	bls.n	800213c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b65      	ldr	r3, [pc, #404]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b8      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4b59      	ldr	r3, [pc, #356]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a58      	ldr	r2, [pc, #352]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800215e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216c:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a52      	ldr	r2, [pc, #328]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b50      	ldr	r3, [pc, #320]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	494d      	ldr	r1, [pc, #308]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d044      	beq.n	8002220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b47      	ldr	r3, [pc, #284]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d119      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	4b3f      	ldr	r3, [pc, #252]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e067      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021de:	4b37      	ldr	r3, [pc, #220]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 0203 	bic.w	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4934      	ldr	r1, [pc, #208]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f0:	f7ff fa5a 	bl	80016a8 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7ff fa56 	bl	80016a8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e04f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 020c 	and.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	429a      	cmp	r2, r3
 800221e:	d1eb      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002220:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d20c      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e032      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4916      	ldr	r1, [pc, #88]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002272:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	490e      	ldr	r1, [pc, #56]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f821 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490a      	ldr	r1, [pc, #40]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	4a09      	ldr	r2, [pc, #36]	@ (80022c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f9ba 	bl	8001620 <HAL_InitTick>

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	0800859c 	.word	0x0800859c
 80022c4:	20000004 	.word	0x20000004
 80022c8:	20000008 	.word	0x20000008

080022cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d0:	b090      	sub	sp, #64	@ 0x40
 80022d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e4:	4b59      	ldr	r3, [pc, #356]	@ (800244c <HAL_RCC_GetSysClockFreq+0x180>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d00d      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x40>
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	f200 80a1 	bhi.w	8002438 <HAL_RCC_GetSysClockFreq+0x16c>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x34>
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x3a>
 80022fe:	e09b      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x184>)
 8002302:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002304:	e09b      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002306:	4b53      	ldr	r3, [pc, #332]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x188>)
 8002308:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800230a:	e098      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800230c:	4b4f      	ldr	r3, [pc, #316]	@ (800244c <HAL_RCC_GetSysClockFreq+0x180>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002314:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002316:	4b4d      	ldr	r3, [pc, #308]	@ (800244c <HAL_RCC_GetSysClockFreq+0x180>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d028      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002322:	4b4a      	ldr	r3, [pc, #296]	@ (800244c <HAL_RCC_GetSysClockFreq+0x180>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	099b      	lsrs	r3, r3, #6
 8002328:	2200      	movs	r2, #0
 800232a:	623b      	str	r3, [r7, #32]
 800232c:	627a      	str	r2, [r7, #36]	@ 0x24
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002334:	2100      	movs	r1, #0
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x188>)
 8002338:	fb03 f201 	mul.w	r2, r3, r1
 800233c:	2300      	movs	r3, #0
 800233e:	fb00 f303 	mul.w	r3, r0, r3
 8002342:	4413      	add	r3, r2
 8002344:	4a43      	ldr	r2, [pc, #268]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x188>)
 8002346:	fba0 1202 	umull	r1, r2, r0, r2
 800234a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800234c:	460a      	mov	r2, r1
 800234e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002352:	4413      	add	r3, r2
 8002354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002358:	2200      	movs	r2, #0
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	61fa      	str	r2, [r7, #28]
 800235e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002362:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002366:	f7fe fa99 	bl	800089c <__aeabi_uldivmod>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4613      	mov	r3, r2
 8002370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002372:	e053      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002374:	4b35      	ldr	r3, [pc, #212]	@ (800244c <HAL_RCC_GetSysClockFreq+0x180>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	2200      	movs	r2, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	617a      	str	r2, [r7, #20]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002386:	f04f 0b00 	mov.w	fp, #0
 800238a:	4652      	mov	r2, sl
 800238c:	465b      	mov	r3, fp
 800238e:	f04f 0000 	mov.w	r0, #0
 8002392:	f04f 0100 	mov.w	r1, #0
 8002396:	0159      	lsls	r1, r3, #5
 8002398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800239c:	0150      	lsls	r0, r2, #5
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	ebb2 080a 	subs.w	r8, r2, sl
 80023a6:	eb63 090b 	sbc.w	r9, r3, fp
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023be:	ebb2 0408 	subs.w	r4, r2, r8
 80023c2:	eb63 0509 	sbc.w	r5, r3, r9
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	00eb      	lsls	r3, r5, #3
 80023d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d4:	00e2      	lsls	r2, r4, #3
 80023d6:	4614      	mov	r4, r2
 80023d8:	461d      	mov	r5, r3
 80023da:	eb14 030a 	adds.w	r3, r4, sl
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	eb45 030b 	adc.w	r3, r5, fp
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023f2:	4629      	mov	r1, r5
 80023f4:	028b      	lsls	r3, r1, #10
 80023f6:	4621      	mov	r1, r4
 80023f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023fc:	4621      	mov	r1, r4
 80023fe:	028a      	lsls	r2, r1, #10
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002406:	2200      	movs	r2, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	60fa      	str	r2, [r7, #12]
 800240c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002410:	f7fe fa44 	bl	800089c <__aeabi_uldivmod>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4613      	mov	r3, r2
 800241a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_RCC_GetSysClockFreq+0x180>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	3301      	adds	r3, #1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800242c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002436:	e002      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x184>)
 800243a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800243c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002440:	4618      	mov	r0, r3
 8002442:	3740      	adds	r7, #64	@ 0x40
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	00f42400 	.word	0x00f42400
 8002454:	017d7840 	.word	0x017d7840

08002458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_RCC_GetHCLKFreq+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002474:	f7ff fff0 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0a9b      	lsrs	r3, r3, #10
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4903      	ldr	r1, [pc, #12]	@ (8002494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	080085ac 	.word	0x080085ac

08002498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800249c:	f7ff ffdc 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0b5b      	lsrs	r3, r3, #13
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4903      	ldr	r1, [pc, #12]	@ (80024bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	080085ac 	.word	0x080085ac

080024c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07b      	b.n	80025ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024e2:	d009      	beq.n	80024f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
 80024ea:	e005      	b.n	80024f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fef8 	bl	8001308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800252e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257c:	ea42 0103 	orr.w	r1, r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	f003 0104 	and.w	r1, r3, #4
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	f003 0210 	and.w	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b088      	sub	sp, #32
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025e2:	f7ff f861 	bl	80016a8 <HAL_GetTick>
 80025e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d001      	beq.n	80025fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
 80025fa:	e12a      	b.n	8002852 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_Transmit+0x36>
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e122      	b.n	8002852 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_SPI_Transmit+0x48>
 8002616:	2302      	movs	r3, #2
 8002618:	e11b      	b.n	8002852 <HAL_SPI_Transmit+0x280>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2203      	movs	r2, #3
 8002626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002668:	d10f      	bne.n	800268a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002678:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002688:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002694:	2b40      	cmp	r3, #64	@ 0x40
 8002696:	d007      	beq.n	80026a8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026b0:	d152      	bne.n	8002758 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_SPI_Transmit+0xee>
 80026ba:	8b7b      	ldrh	r3, [r7, #26]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d145      	bne.n	800274c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	1c9a      	adds	r2, r3, #2
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026e4:	e032      	b.n	800274c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d112      	bne.n	800271a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	1c9a      	adds	r2, r3, #2
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002718:	e018      	b.n	800274c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271a:	f7fe ffc5 	bl	80016a8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d803      	bhi.n	8002732 <HAL_SPI_Transmit+0x160>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d102      	bne.n	8002738 <HAL_SPI_Transmit+0x166>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e082      	b.n	8002852 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1c7      	bne.n	80026e6 <HAL_SPI_Transmit+0x114>
 8002756:	e053      	b.n	8002800 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_SPI_Transmit+0x194>
 8002760:	8b7b      	ldrh	r3, [r7, #26]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d147      	bne.n	80027f6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	330c      	adds	r3, #12
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800278c:	e033      	b.n	80027f6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d113      	bne.n	80027c4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80027c2:	e018      	b.n	80027f6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c4:	f7fe ff70 	bl	80016a8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d803      	bhi.n	80027dc <HAL_SPI_Transmit+0x20a>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d102      	bne.n	80027e2 <HAL_SPI_Transmit+0x210>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e02d      	b.n	8002852 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1c6      	bne.n	800278e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	6839      	ldr	r1, [r7, #0]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fa59 	bl	8002cbc <SPI_EndRxTxTransaction>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002850:	2300      	movs	r3, #0
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b08a      	sub	sp, #40	@ 0x28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002868:	2301      	movs	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800286c:	f7fe ff1c 	bl	80016a8 <HAL_GetTick>
 8002870:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002878:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002884:	7ffb      	ldrb	r3, [r7, #31]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d00c      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x4a>
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002890:	d106      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x46>
 800289a:	7ffb      	ldrb	r3, [r7, #31]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d001      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80028a0:	2302      	movs	r3, #2
 80028a2:	e17f      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x5c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x5c>
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e174      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x6e>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e16d      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x34a>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d003      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2205      	movs	r2, #5
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	887a      	ldrh	r2, [r7, #2]
 8002906:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002924:	2b40      	cmp	r3, #64	@ 0x40
 8002926:	d007      	beq.n	8002938 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002940:	d17e      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_TransmitReceive+0xf6>
 800294a:	8afb      	ldrh	r3, [r7, #22]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d16c      	bne.n	8002a2a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	1c9a      	adds	r2, r3, #2
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002974:	e059      	b.n	8002a2a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d11b      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x162>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_SPI_TransmitReceive+0x162>
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	2b01      	cmp	r3, #1
 8002992:	d113      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	1c9a      	adds	r2, r3, #2
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d119      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x1a4>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d014      	beq.n	80029fe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029de:	b292      	uxth	r2, r2
 80029e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e6:	1c9a      	adds	r2, r3, #2
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029fa:	2301      	movs	r3, #1
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029fe:	f7fe fe53 	bl	80016a8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d80d      	bhi.n	8002a2a <HAL_SPI_TransmitReceive+0x1d0>
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d009      	beq.n	8002a2a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0bc      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1a0      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x11c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d19b      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x11c>
 8002a3e:	e082      	b.n	8002b46 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x1f4>
 8002a48:	8afb      	ldrh	r3, [r7, #22]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d171      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a74:	e05d      	b.n	8002b32 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d11c      	bne.n	8002abe <HAL_SPI_TransmitReceive+0x264>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d017      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x264>
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d114      	bne.n	8002abe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d119      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x2a6>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d014      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002afc:	2301      	movs	r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b00:	f7fe fdd2 	bl	80016a8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d803      	bhi.n	8002b18 <HAL_SPI_TransmitReceive+0x2be>
 8002b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d102      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x2c4>
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e038      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d19c      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x21c>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d197      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b46:	6a3a      	ldr	r2, [r7, #32]
 8002b48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f8b6 	bl	8002cbc <SPI_EndRxTxTransaction>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e01d      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
  }
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3728      	adds	r7, #40	@ 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bbc:	f7fe fd74 	bl	80016a8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bcc:	f7fe fd6c 	bl	80016a8 <HAL_GetTick>
 8002bd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bd2:	4b39      	ldr	r3, [pc, #228]	@ (8002cb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	015b      	lsls	r3, r3, #5
 8002bd8:	0d1b      	lsrs	r3, r3, #20
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002be2:	e055      	b.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d051      	beq.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bec:	f7fe fd5c 	bl	80016a8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d902      	bls.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d13d      	bne.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1a:	d111      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c24:	d004      	beq.n	8002c30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2e:	d107      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c48:	d10f      	bne.n	8002c6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e018      	b.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e002      	b.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d19a      	bne.n	8002be4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000004 	.word	0x20000004

08002cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff ff6a 	bl	8002bac <SPI_WaitFlagStateUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e032      	b.n	8002d54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <SPI_EndRxTxTransaction+0xa0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d60 <SPI_EndRxTxTransaction+0xa4>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	0d5b      	lsrs	r3, r3, #21
 8002cfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d0c:	d112      	bne.n	8002d34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2200      	movs	r2, #0
 8002d16:	2180      	movs	r1, #128	@ 0x80
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff ff47 	bl	8002bac <SPI_WaitFlagStateUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d016      	beq.n	8002d52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e00f      	b.n	8002d54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4a:	2b80      	cmp	r3, #128	@ 0x80
 8002d4c:	d0f2      	beq.n	8002d34 <SPI_EndRxTxTransaction+0x78>
 8002d4e:	e000      	b.n	8002d52 <SPI_EndRxTxTransaction+0x96>
        break;
 8002d50:	bf00      	nop
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	165e9f81 	.word	0x165e9f81

08002d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e042      	b.n	8002dfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe fb24 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	@ 0x24
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f973 	bl	8003094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d175      	bne.n	8002f10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Transmit+0x2c>
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e06e      	b.n	8002f12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	@ 0x21
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e42:	f7fe fc31 	bl	80016a8 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5c:	d108      	bne.n	8002e70 <HAL_UART_Transmit+0x6c>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e003      	b.n	8002e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e78:	e02e      	b.n	8002ed8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	2180      	movs	r1, #128	@ 0x80
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f848 	bl	8002f1a <UART_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e03a      	b.n	8002f12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	e007      	b.n	8002eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1cb      	bne.n	8002e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2140      	movs	r1, #64	@ 0x40
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f814 	bl	8002f1a <UART_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e006      	b.n	8002f12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2a:	e03b      	b.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d037      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f34:	f7fe fbb8 	bl	80016a8 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d302      	bcc.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e03a      	b.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d023      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b80      	cmp	r3, #128	@ 0x80
 8002f60:	d020      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d01d      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d116      	bne.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f81d 	bl	8002fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2208      	movs	r2, #8
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e00f      	b.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d0b4      	beq.n	8002f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b095      	sub	sp, #84	@ 0x54
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ff4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e5      	bne.n	8002fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	61fb      	str	r3, [r7, #28]
   return(result);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3314      	adds	r3, #20
 8003026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800302a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800302e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e5      	bne.n	8003008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	2b01      	cmp	r3, #1
 8003042:	d119      	bne.n	8003078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	60bb      	str	r3, [r7, #8]
   return(result);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f023 0310 	bic.w	r3, r3, #16
 800305a:	647b      	str	r3, [r7, #68]	@ 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003064:	61ba      	str	r2, [r7, #24]
 8003066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	613b      	str	r3, [r7, #16]
   return(result);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e5      	bne.n	8003044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003086:	bf00      	nop
 8003088:	3754      	adds	r7, #84	@ 0x54
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003098:	b0c0      	sub	sp, #256	@ 0x100
 800309a:	af00      	add	r7, sp, #0
 800309c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b0:	68d9      	ldr	r1, [r3, #12]
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	ea40 0301 	orr.w	r3, r0, r1
 80030bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030ec:	f021 010c 	bic.w	r1, r1, #12
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030fa:	430b      	orrs	r3, r1
 80030fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310e:	6999      	ldr	r1, [r3, #24]
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	ea40 0301 	orr.w	r3, r0, r1
 800311a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b8f      	ldr	r3, [pc, #572]	@ (8003360 <UART_SetConfig+0x2cc>)
 8003124:	429a      	cmp	r2, r3
 8003126:	d005      	beq.n	8003134 <UART_SetConfig+0xa0>
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b8d      	ldr	r3, [pc, #564]	@ (8003364 <UART_SetConfig+0x2d0>)
 8003130:	429a      	cmp	r2, r3
 8003132:	d104      	bne.n	800313e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7ff f9b0 	bl	8002498 <HAL_RCC_GetPCLK2Freq>
 8003138:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800313c:	e003      	b.n	8003146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800313e:	f7ff f997 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 8003142:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003150:	f040 810c 	bne.w	800336c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003158:	2200      	movs	r2, #0
 800315a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800315e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003166:	4622      	mov	r2, r4
 8003168:	462b      	mov	r3, r5
 800316a:	1891      	adds	r1, r2, r2
 800316c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800316e:	415b      	adcs	r3, r3
 8003170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003176:	4621      	mov	r1, r4
 8003178:	eb12 0801 	adds.w	r8, r2, r1
 800317c:	4629      	mov	r1, r5
 800317e:	eb43 0901 	adc.w	r9, r3, r1
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800318e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003196:	4690      	mov	r8, r2
 8003198:	4699      	mov	r9, r3
 800319a:	4623      	mov	r3, r4
 800319c:	eb18 0303 	adds.w	r3, r8, r3
 80031a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031a4:	462b      	mov	r3, r5
 80031a6:	eb49 0303 	adc.w	r3, r9, r3
 80031aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031c2:	460b      	mov	r3, r1
 80031c4:	18db      	adds	r3, r3, r3
 80031c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80031c8:	4613      	mov	r3, r2
 80031ca:	eb42 0303 	adc.w	r3, r2, r3
 80031ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80031d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031d8:	f7fd fb60 	bl	800089c <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <UART_SetConfig+0x2d4>)
 80031e2:	fba3 2302 	umull	r2, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	011c      	lsls	r4, r3, #4
 80031ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031fc:	4642      	mov	r2, r8
 80031fe:	464b      	mov	r3, r9
 8003200:	1891      	adds	r1, r2, r2
 8003202:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003204:	415b      	adcs	r3, r3
 8003206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800320c:	4641      	mov	r1, r8
 800320e:	eb12 0a01 	adds.w	sl, r2, r1
 8003212:	4649      	mov	r1, r9
 8003214:	eb43 0b01 	adc.w	fp, r3, r1
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800322c:	4692      	mov	sl, r2
 800322e:	469b      	mov	fp, r3
 8003230:	4643      	mov	r3, r8
 8003232:	eb1a 0303 	adds.w	r3, sl, r3
 8003236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800323a:	464b      	mov	r3, r9
 800323c:	eb4b 0303 	adc.w	r3, fp, r3
 8003240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003250:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003258:	460b      	mov	r3, r1
 800325a:	18db      	adds	r3, r3, r3
 800325c:	643b      	str	r3, [r7, #64]	@ 0x40
 800325e:	4613      	mov	r3, r2
 8003260:	eb42 0303 	adc.w	r3, r2, r3
 8003264:	647b      	str	r3, [r7, #68]	@ 0x44
 8003266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800326a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800326e:	f7fd fb15 	bl	800089c <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4611      	mov	r1, r2
 8003278:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <UART_SetConfig+0x2d4>)
 800327a:	fba3 2301 	umull	r2, r3, r3, r1
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2264      	movs	r2, #100	@ 0x64
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	1acb      	subs	r3, r1, r3
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800328e:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <UART_SetConfig+0x2d4>)
 8003290:	fba3 2302 	umull	r2, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800329c:	441c      	add	r4, r3
 800329e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032b0:	4642      	mov	r2, r8
 80032b2:	464b      	mov	r3, r9
 80032b4:	1891      	adds	r1, r2, r2
 80032b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032b8:	415b      	adcs	r3, r3
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032c0:	4641      	mov	r1, r8
 80032c2:	1851      	adds	r1, r2, r1
 80032c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80032c6:	4649      	mov	r1, r9
 80032c8:	414b      	adcs	r3, r1
 80032ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032d8:	4659      	mov	r1, fp
 80032da:	00cb      	lsls	r3, r1, #3
 80032dc:	4651      	mov	r1, sl
 80032de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e2:	4651      	mov	r1, sl
 80032e4:	00ca      	lsls	r2, r1, #3
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	4642      	mov	r2, r8
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032f4:	464b      	mov	r3, r9
 80032f6:	460a      	mov	r2, r1
 80032f8:	eb42 0303 	adc.w	r3, r2, r3
 80032fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800330c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003314:	460b      	mov	r3, r1
 8003316:	18db      	adds	r3, r3, r3
 8003318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800331a:	4613      	mov	r3, r2
 800331c:	eb42 0303 	adc.w	r3, r2, r3
 8003320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800332a:	f7fd fab7 	bl	800089c <__aeabi_uldivmod>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <UART_SetConfig+0x2d4>)
 8003334:	fba3 1302 	umull	r1, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	2164      	movs	r1, #100	@ 0x64
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3332      	adds	r3, #50	@ 0x32
 8003346:	4a08      	ldr	r2, [pc, #32]	@ (8003368 <UART_SetConfig+0x2d4>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	f003 0207 	and.w	r2, r3, #7
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4422      	add	r2, r4
 800335a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800335c:	e106      	b.n	800356c <UART_SetConfig+0x4d8>
 800335e:	bf00      	nop
 8003360:	40011000 	.word	0x40011000
 8003364:	40011400 	.word	0x40011400
 8003368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800336c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003376:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800337a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800337e:	4642      	mov	r2, r8
 8003380:	464b      	mov	r3, r9
 8003382:	1891      	adds	r1, r2, r2
 8003384:	6239      	str	r1, [r7, #32]
 8003386:	415b      	adcs	r3, r3
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
 800338a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800338e:	4641      	mov	r1, r8
 8003390:	1854      	adds	r4, r2, r1
 8003392:	4649      	mov	r1, r9
 8003394:	eb43 0501 	adc.w	r5, r3, r1
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	00eb      	lsls	r3, r5, #3
 80033a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a6:	00e2      	lsls	r2, r4, #3
 80033a8:	4614      	mov	r4, r2
 80033aa:	461d      	mov	r5, r3
 80033ac:	4643      	mov	r3, r8
 80033ae:	18e3      	adds	r3, r4, r3
 80033b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033b4:	464b      	mov	r3, r9
 80033b6:	eb45 0303 	adc.w	r3, r5, r3
 80033ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033da:	4629      	mov	r1, r5
 80033dc:	008b      	lsls	r3, r1, #2
 80033de:	4621      	mov	r1, r4
 80033e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e4:	4621      	mov	r1, r4
 80033e6:	008a      	lsls	r2, r1, #2
 80033e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033ec:	f7fd fa56 	bl	800089c <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4b60      	ldr	r3, [pc, #384]	@ (8003578 <UART_SetConfig+0x4e4>)
 80033f6:	fba3 2302 	umull	r2, r3, r3, r2
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	011c      	lsls	r4, r3, #4
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800340c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003410:	4642      	mov	r2, r8
 8003412:	464b      	mov	r3, r9
 8003414:	1891      	adds	r1, r2, r2
 8003416:	61b9      	str	r1, [r7, #24]
 8003418:	415b      	adcs	r3, r3
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003420:	4641      	mov	r1, r8
 8003422:	1851      	adds	r1, r2, r1
 8003424:	6139      	str	r1, [r7, #16]
 8003426:	4649      	mov	r1, r9
 8003428:	414b      	adcs	r3, r1
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003438:	4659      	mov	r1, fp
 800343a:	00cb      	lsls	r3, r1, #3
 800343c:	4651      	mov	r1, sl
 800343e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003442:	4651      	mov	r1, sl
 8003444:	00ca      	lsls	r2, r1, #3
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	4603      	mov	r3, r0
 800344c:	4642      	mov	r2, r8
 800344e:	189b      	adds	r3, r3, r2
 8003450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003454:	464b      	mov	r3, r9
 8003456:	460a      	mov	r2, r1
 8003458:	eb42 0303 	adc.w	r3, r2, r3
 800345c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800346a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003478:	4649      	mov	r1, r9
 800347a:	008b      	lsls	r3, r1, #2
 800347c:	4641      	mov	r1, r8
 800347e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003482:	4641      	mov	r1, r8
 8003484:	008a      	lsls	r2, r1, #2
 8003486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800348a:	f7fd fa07 	bl	800089c <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4611      	mov	r1, r2
 8003494:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <UART_SetConfig+0x4e4>)
 8003496:	fba3 2301 	umull	r2, r3, r3, r1
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2264      	movs	r2, #100	@ 0x64
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	1acb      	subs	r3, r1, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	@ 0x32
 80034a8:	4a33      	ldr	r2, [pc, #204]	@ (8003578 <UART_SetConfig+0x4e4>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034b4:	441c      	add	r4, r3
 80034b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ba:	2200      	movs	r2, #0
 80034bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80034be:	677a      	str	r2, [r7, #116]	@ 0x74
 80034c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	1891      	adds	r1, r2, r2
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	415b      	adcs	r3, r3
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d4:	4641      	mov	r1, r8
 80034d6:	1851      	adds	r1, r2, r1
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	4649      	mov	r1, r9
 80034dc:	414b      	adcs	r3, r1
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034ec:	4659      	mov	r1, fp
 80034ee:	00cb      	lsls	r3, r1, #3
 80034f0:	4651      	mov	r1, sl
 80034f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034f6:	4651      	mov	r1, sl
 80034f8:	00ca      	lsls	r2, r1, #3
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	4642      	mov	r2, r8
 8003502:	189b      	adds	r3, r3, r2
 8003504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003506:	464b      	mov	r3, r9
 8003508:	460a      	mov	r2, r1
 800350a:	eb42 0303 	adc.w	r3, r2, r3
 800350e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	663b      	str	r3, [r7, #96]	@ 0x60
 800351a:	667a      	str	r2, [r7, #100]	@ 0x64
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003528:	4649      	mov	r1, r9
 800352a:	008b      	lsls	r3, r1, #2
 800352c:	4641      	mov	r1, r8
 800352e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003532:	4641      	mov	r1, r8
 8003534:	008a      	lsls	r2, r1, #2
 8003536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800353a:	f7fd f9af 	bl	800089c <__aeabi_uldivmod>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <UART_SetConfig+0x4e4>)
 8003544:	fba3 1302 	umull	r1, r3, r3, r2
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	2164      	movs	r1, #100	@ 0x64
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	3332      	adds	r3, #50	@ 0x32
 8003556:	4a08      	ldr	r2, [pc, #32]	@ (8003578 <UART_SetConfig+0x4e4>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4422      	add	r2, r4
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003572:	46bd      	mov	sp, r7
 8003574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003578:	51eb851f 	.word	0x51eb851f

0800357c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003580:	4904      	ldr	r1, [pc, #16]	@ (8003594 <MX_FATFS_Init+0x18>)
 8003582:	4805      	ldr	r0, [pc, #20]	@ (8003598 <MX_FATFS_Init+0x1c>)
 8003584:	f004 f8b0 	bl	80076e8 <FATFS_LinkDriver>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4b03      	ldr	r3, [pc, #12]	@ (800359c <MX_FATFS_Init+0x20>)
 800358e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000240 	.word	0x20000240
 8003598:	20000010 	.word	0x20000010
 800359c:	2000023c 	.word	0x2000023c

080035a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80035a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  //  Stat = STA_NOINIT;
  //  return Stat;
	return SD_disk_initialize(pdrv);
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f9fd 	bl	80039bc <SD_disk_initialize>
 80035c2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  //  Stat = STA_NOINIT;
  //  return Stat;
	return SD_disk_status(pdrv);
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fad5 	bl	8003b88 <SD_disk_status>
 80035de:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4603      	mov	r3, r0
 80035f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  //  return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80035f8:	7bf8      	ldrb	r0, [r7, #15]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	f000 fad8 	bl	8003bb4 <SD_disk_read>
 8003604:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  //  return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800361e:	7bf8      	ldrb	r0, [r7, #15]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	f000 fb2f 	bl	8003c88 <SD_disk_write>
 800362a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	603a      	str	r2, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
 8003640:	460b      	mov	r3, r1
 8003642:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  //  DRESULT res = RES_ERROR;
  //  return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003644:	79b9      	ldrb	r1, [r7, #6]
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fba0 	bl	8003d90 <SD_disk_ioctl>
 8003650:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003666:	4802      	ldr	r0, [pc, #8]	@ (8003670 <SELECT+0x14>)
 8003668:	f7fe fab8 	bl	8001bdc <HAL_GPIO_WritePin>
}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40020800 	.word	0x40020800

08003674 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800367e:	4802      	ldr	r0, [pc, #8]	@ (8003688 <DESELECT+0x14>)
 8003680:	f7fe faac 	bl	8001bdc <HAL_GPIO_WritePin>
}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40020800 	.word	0x40020800

0800368c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003696:	bf00      	nop
 8003698:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <SPI_TxByte+0x30>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d1f8      	bne.n	8003698 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80036a6:	1df9      	adds	r1, r7, #7
 80036a8:	2364      	movs	r3, #100	@ 0x64
 80036aa:	2201      	movs	r2, #1
 80036ac:	4803      	ldr	r0, [pc, #12]	@ (80036bc <SPI_TxByte+0x30>)
 80036ae:	f7fe ff90 	bl	80025d2 <HAL_SPI_Transmit>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000094 	.word	0x20000094

080036c0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80036cc:	bf00      	nop
 80036ce:	4b08      	ldr	r3, [pc, #32]	@ (80036f0 <SPI_TxBuffer+0x30>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d1f8      	bne.n	80036ce <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80036dc:	887a      	ldrh	r2, [r7, #2]
 80036de:	2364      	movs	r3, #100	@ 0x64
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4803      	ldr	r0, [pc, #12]	@ (80036f0 <SPI_TxBuffer+0x30>)
 80036e4:	f7fe ff75 	bl	80025d2 <HAL_SPI_Transmit>
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000094 	.word	0x20000094

080036f4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80036fa:	23ff      	movs	r3, #255	@ 0xff
 80036fc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80036fe:	bf00      	nop
 8003700:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <SPI_RxByte+0x34>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d1f8      	bne.n	8003700 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800370e:	1dba      	adds	r2, r7, #6
 8003710:	1df9      	adds	r1, r7, #7
 8003712:	2364      	movs	r3, #100	@ 0x64
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2301      	movs	r3, #1
 8003718:	4803      	ldr	r0, [pc, #12]	@ (8003728 <SPI_RxByte+0x34>)
 800371a:	f7ff f89e 	bl	800285a <HAL_SPI_TransmitReceive>
  return data;
 800371e:	79bb      	ldrb	r3, [r7, #6]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000094 	.word	0x20000094

0800372c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003734:	f7ff ffde 	bl	80036f4 <SPI_RxByte>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	701a      	strb	r2, [r3, #0]
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800374e:	4b0a      	ldr	r3, [pc, #40]	@ (8003778 <SD_ReadyWait+0x30>)
 8003750:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003754:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8003756:	f7ff ffcd 	bl	80036f4 <SPI_RxByte>
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	2bff      	cmp	r3, #255	@ 0xff
 8003762:	d003      	beq.n	800376c <SD_ReadyWait+0x24>
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <SD_ReadyWait+0x30>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f4      	bne.n	8003756 <SD_ReadyWait+0xe>
  return res;
 800376c:	79fb      	ldrb	r3, [r7, #7]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000246 	.word	0x20000246

0800377c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8003782:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003786:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8003788:	f7ff ff74 	bl	8003674 <DESELECT>
  for(int i = 0; i < 10; i++)
 800378c:	2300      	movs	r3, #0
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	e005      	b.n	800379e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8003792:	20ff      	movs	r0, #255	@ 0xff
 8003794:	f7ff ff7a 	bl	800368c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3301      	adds	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b09      	cmp	r3, #9
 80037a2:	ddf6      	ble.n	8003792 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 80037a4:	f7ff ff5a 	bl	800365c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80037a8:	2340      	movs	r3, #64	@ 0x40
 80037aa:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 80037bc:	2395      	movs	r3, #149	@ 0x95
 80037be:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 80037c0:	463b      	mov	r3, r7
 80037c2:	2106      	movs	r1, #6
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff7b 	bl	80036c0 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80037ca:	e002      	b.n	80037d2 <SD_PowerOn+0x56>
  {
    cnt--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80037d2:	f7ff ff8f 	bl	80036f4 <SPI_RxByte>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d002      	beq.n	80037e2 <SD_PowerOn+0x66>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f4      	bne.n	80037cc <SD_PowerOn+0x50>
  }
  DESELECT();
 80037e2:	f7ff ff47 	bl	8003674 <DESELECT>
  SPI_TxByte(0XFF);
 80037e6:	20ff      	movs	r0, #255	@ 0xff
 80037e8:	f7ff ff50 	bl	800368c <SPI_TxByte>
  PowerFlag = 1;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <SD_PowerOn+0x80>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000249 	.word	0x20000249

08003800 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8003804:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <SD_PowerOff+0x14>)
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	20000249 	.word	0x20000249

08003818 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800381c:	4b03      	ldr	r3, [pc, #12]	@ (800382c <SD_CheckPower+0x14>)
 800381e:	781b      	ldrb	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000249 	.word	0x20000249

08003830 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800383a:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <SD_RxDataBlock+0x58>)
 800383c:	22c8      	movs	r2, #200	@ 0xc8
 800383e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8003840:	f7ff ff58 	bl	80036f4 <SPI_RxByte>
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2bff      	cmp	r3, #255	@ 0xff
 800384c:	d103      	bne.n	8003856 <SD_RxDataBlock+0x26>
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <SD_RxDataBlock+0x58>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f4      	bne.n	8003840 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2bfe      	cmp	r3, #254	@ 0xfe
 800385a:	d001      	beq.n	8003860 <SD_RxDataBlock+0x30>
 800385c:	2300      	movs	r3, #0
 800385e:	e00f      	b.n	8003880 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff60 	bl	800372c <SPI_RxBytePtr>
  } while(len--);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	1e5a      	subs	r2, r3, #1
 8003870:	603a      	str	r2, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f4      	bne.n	8003860 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8003876:	f7ff ff3d 	bl	80036f4 <SPI_RxByte>
  SPI_RxByte();
 800387a:	f7ff ff3b 	bl	80036f4 <SPI_RxByte>
  return TRUE;
 800387e:	2301      	movs	r3, #1
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000244 	.word	0x20000244

0800388c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800389c:	f7ff ff54 	bl	8003748 <SD_ReadyWait>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2bff      	cmp	r3, #255	@ 0xff
 80038a4:	d001      	beq.n	80038aa <SD_TxDataBlock+0x1e>
 80038a6:	2300      	movs	r3, #0
 80038a8:	e02f      	b.n	800390a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff feed 	bl	800368c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2bfd      	cmp	r3, #253	@ 0xfd
 80038b6:	d020      	beq.n	80038fa <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80038b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff feff 	bl	80036c0 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80038c2:	f7ff ff17 	bl	80036f4 <SPI_RxByte>
    SPI_RxByte();
 80038c6:	f7ff ff15 	bl	80036f4 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80038ca:	e00b      	b.n	80038e4 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80038cc:	f7ff ff12 	bl	80036f4 <SPI_RxByte>
 80038d0:	4603      	mov	r3, r0
 80038d2:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d006      	beq.n	80038ec <SD_TxDataBlock+0x60>
      i++;
 80038de:	7bbb      	ldrb	r3, [r7, #14]
 80038e0:	3301      	adds	r3, #1
 80038e2:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80038e4:	7bbb      	ldrb	r3, [r7, #14]
 80038e6:	2b40      	cmp	r3, #64	@ 0x40
 80038e8:	d9f0      	bls.n	80038cc <SD_TxDataBlock+0x40>
 80038ea:	e000      	b.n	80038ee <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80038ec:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80038ee:	bf00      	nop
 80038f0:	f7ff ff00 	bl	80036f4 <SPI_RxByte>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0fa      	beq.n	80038f0 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2b05      	cmp	r3, #5
 8003902:	d101      	bne.n	8003908 <SD_TxDataBlock+0x7c>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <SD_TxDataBlock+0x7e>

  return FALSE;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	6039      	str	r1, [r7, #0]
 800391c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800391e:	f7ff ff13 	bl	8003748 <SD_ReadyWait>
 8003922:	4603      	mov	r3, r0
 8003924:	2bff      	cmp	r3, #255	@ 0xff
 8003926:	d001      	beq.n	800392c <SD_SendCmd+0x1a>
 8003928:	23ff      	movs	r3, #255	@ 0xff
 800392a:	e042      	b.n	80039b2 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff feac 	bl	800368c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	0e1b      	lsrs	r3, r3, #24
 8003938:	b2db      	uxtb	r3, r3
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fea6 	bl	800368c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	0c1b      	lsrs	r3, r3, #16
 8003944:	b2db      	uxtb	r3, r3
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fea0 	bl	800368c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fe9a 	bl	800368c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fe95 	bl	800368c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	2b40      	cmp	r3, #64	@ 0x40
 8003966:	d102      	bne.n	800396e <SD_SendCmd+0x5c>
 8003968:	2395      	movs	r3, #149	@ 0x95
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e007      	b.n	800397e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	2b48      	cmp	r3, #72	@ 0x48
 8003972:	d102      	bne.n	800397a <SD_SendCmd+0x68>
 8003974:	2387      	movs	r3, #135	@ 0x87
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e001      	b.n	800397e <SD_SendCmd+0x6c>
  else crc = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fe83 	bl	800368c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b4c      	cmp	r3, #76	@ 0x4c
 800398a:	d101      	bne.n	8003990 <SD_SendCmd+0x7e>
 800398c:	f7ff feb2 	bl	80036f4 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8003990:	230a      	movs	r3, #10
 8003992:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8003994:	f7ff feae 	bl	80036f4 <SPI_RxByte>
 8003998:	4603      	mov	r3, r0
 800399a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800399c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	da05      	bge.n	80039b0 <SD_SendCmd+0x9e>
 80039a4:	7bbb      	ldrb	r3, [r7, #14]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	73bb      	strb	r3, [r7, #14]
 80039aa:	7bbb      	ldrb	r3, [r7, #14]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f1      	bne.n	8003994 <SD_SendCmd+0x82>

  return res;
 80039b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <SD_disk_initialize+0x14>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0d1      	b.n	8003b74 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80039d0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b7c <SD_disk_initialize+0x1c0>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <SD_disk_initialize+0x2a>
 80039de:	4b67      	ldr	r3, [pc, #412]	@ (8003b7c <SD_disk_initialize+0x1c0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	e0c6      	b.n	8003b74 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 80039e6:	f7ff fec9 	bl	800377c <SD_PowerOn>
  /* slave select */
  SELECT();
 80039ea:	f7ff fe37 	bl	800365c <SELECT>
  /* check disk type */
  type = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80039f2:	2100      	movs	r1, #0
 80039f4:	2040      	movs	r0, #64	@ 0x40
 80039f6:	f7ff ff8c 	bl	8003912 <SD_SendCmd>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f040 80a1 	bne.w	8003b44 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8003a02:	4b5f      	ldr	r3, [pc, #380]	@ (8003b80 <SD_disk_initialize+0x1c4>)
 8003a04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a08:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003a0a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003a0e:	2048      	movs	r0, #72	@ 0x48
 8003a10:	f7ff ff7f 	bl	8003912 <SD_SendCmd>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d155      	bne.n	8003ac6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e00c      	b.n	8003a3a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8003a20:	7bfc      	ldrb	r4, [r7, #15]
 8003a22:	f7ff fe67 	bl	80036f4 <SPI_RxByte>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f104 0310 	add.w	r3, r4, #16
 8003a2e:	443b      	add	r3, r7
 8003a30:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	3301      	adds	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d9ef      	bls.n	8003a20 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003a40:	7abb      	ldrb	r3, [r7, #10]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d17e      	bne.n	8003b44 <SD_disk_initialize+0x188>
 8003a46:	7afb      	ldrb	r3, [r7, #11]
 8003a48:	2baa      	cmp	r3, #170	@ 0xaa
 8003a4a:	d17b      	bne.n	8003b44 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	2077      	movs	r0, #119	@ 0x77
 8003a50:	f7ff ff5f 	bl	8003912 <SD_SendCmd>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d807      	bhi.n	8003a6a <SD_disk_initialize+0xae>
 8003a5a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003a5e:	2069      	movs	r0, #105	@ 0x69
 8003a60:	f7ff ff57 	bl	8003912 <SD_SendCmd>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8003a6a:	4b45      	ldr	r3, [pc, #276]	@ (8003b80 <SD_disk_initialize+0x1c4>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ec      	bne.n	8003a4c <SD_disk_initialize+0x90>
 8003a72:	e000      	b.n	8003a76 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003a74:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003a76:	4b42      	ldr	r3, [pc, #264]	@ (8003b80 <SD_disk_initialize+0x1c4>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d062      	beq.n	8003b44 <SD_disk_initialize+0x188>
 8003a7e:	2100      	movs	r1, #0
 8003a80:	207a      	movs	r0, #122	@ 0x7a
 8003a82:	f7ff ff46 	bl	8003912 <SD_SendCmd>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d15b      	bne.n	8003b44 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e00c      	b.n	8003aac <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8003a92:	7bfc      	ldrb	r4, [r7, #15]
 8003a94:	f7ff fe2e 	bl	80036f4 <SPI_RxByte>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f104 0310 	add.w	r3, r4, #16
 8003aa0:	443b      	add	r3, r7
 8003aa2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d9ef      	bls.n	8003a92 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003ab2:	7a3b      	ldrb	r3, [r7, #8]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <SD_disk_initialize+0x104>
 8003abc:	230c      	movs	r3, #12
 8003abe:	e000      	b.n	8003ac2 <SD_disk_initialize+0x106>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	73bb      	strb	r3, [r7, #14]
 8003ac4:	e03e      	b.n	8003b44 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	2077      	movs	r0, #119	@ 0x77
 8003aca:	f7ff ff22 	bl	8003912 <SD_SendCmd>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d808      	bhi.n	8003ae6 <SD_disk_initialize+0x12a>
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	2069      	movs	r0, #105	@ 0x69
 8003ad8:	f7ff ff1b 	bl	8003912 <SD_SendCmd>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d801      	bhi.n	8003ae6 <SD_disk_initialize+0x12a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e000      	b.n	8003ae8 <SD_disk_initialize+0x12c>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8003aea:	7bbb      	ldrb	r3, [r7, #14]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d10e      	bne.n	8003b0e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003af0:	2100      	movs	r1, #0
 8003af2:	2077      	movs	r0, #119	@ 0x77
 8003af4:	f7ff ff0d 	bl	8003912 <SD_SendCmd>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d80e      	bhi.n	8003b1c <SD_disk_initialize+0x160>
 8003afe:	2100      	movs	r1, #0
 8003b00:	2069      	movs	r0, #105	@ 0x69
 8003b02:	f7ff ff06 	bl	8003912 <SD_SendCmd>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d107      	bne.n	8003b1c <SD_disk_initialize+0x160>
 8003b0c:	e00c      	b.n	8003b28 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003b0e:	2100      	movs	r1, #0
 8003b10:	2041      	movs	r0, #65	@ 0x41
 8003b12:	f7ff fefe 	bl	8003912 <SD_SendCmd>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8003b1c:	4b18      	ldr	r3, [pc, #96]	@ (8003b80 <SD_disk_initialize+0x1c4>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e2      	bne.n	8003aea <SD_disk_initialize+0x12e>
 8003b24:	e000      	b.n	8003b28 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003b26:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003b28:	4b15      	ldr	r3, [pc, #84]	@ (8003b80 <SD_disk_initialize+0x1c4>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <SD_disk_initialize+0x184>
 8003b30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b34:	2050      	movs	r0, #80	@ 0x50
 8003b36:	f7ff feec 	bl	8003912 <SD_SendCmd>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <SD_disk_initialize+0x188>
 8003b40:	2300      	movs	r3, #0
 8003b42:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8003b44:	4a0f      	ldr	r2, [pc, #60]	@ (8003b84 <SD_disk_initialize+0x1c8>)
 8003b46:	7bbb      	ldrb	r3, [r7, #14]
 8003b48:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8003b4a:	f7ff fd93 	bl	8003674 <DESELECT>
  SPI_RxByte();
 8003b4e:	f7ff fdd1 	bl	80036f4 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8003b58:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <SD_disk_initialize+0x1c0>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <SD_disk_initialize+0x1c0>)
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e001      	b.n	8003b6e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003b6a:	f7ff fe49 	bl	8003800 <SD_PowerOff>
  }
  return Stat;
 8003b6e:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <SD_disk_initialize+0x1c0>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd90      	pop	{r4, r7, pc}
 8003b7c:	20000024 	.word	0x20000024
 8003b80:	20000244 	.word	0x20000244
 8003b84:	20000248 	.word	0x20000248

08003b88 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <SD_disk_status+0x14>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e002      	b.n	8003ba2 <SD_disk_status+0x1a>
  return Stat;
 8003b9c:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <SD_disk_status+0x28>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000024 	.word	0x20000024

08003bb4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <SD_disk_read+0x1c>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <SD_disk_read+0x20>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	e051      	b.n	8003c78 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c80 <SD_disk_read+0xcc>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <SD_disk_read+0x32>
 8003be2:	2303      	movs	r3, #3
 8003be4:	e048      	b.n	8003c78 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003be6:	4b27      	ldr	r3, [pc, #156]	@ (8003c84 <SD_disk_read+0xd0>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <SD_disk_read+0x44>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	025b      	lsls	r3, r3, #9
 8003bf6:	607b      	str	r3, [r7, #4]

  SELECT();
 8003bf8:	f7ff fd30 	bl	800365c <SELECT>

  if (count == 1)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d111      	bne.n	8003c26 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	2051      	movs	r0, #81	@ 0x51
 8003c06:	f7ff fe84 	bl	8003912 <SD_SendCmd>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d129      	bne.n	8003c64 <SD_disk_read+0xb0>
 8003c10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	f7ff fe0b 	bl	8003830 <SD_RxDataBlock>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d021      	beq.n	8003c64 <SD_disk_read+0xb0>
 8003c20:	2300      	movs	r3, #0
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	e01e      	b.n	8003c64 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	2052      	movs	r0, #82	@ 0x52
 8003c2a:	f7ff fe72 	bl	8003912 <SD_SendCmd>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d117      	bne.n	8003c64 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8003c34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c38:	68b8      	ldr	r0, [r7, #8]
 8003c3a:	f7ff fdf9 	bl	8003830 <SD_RxDataBlock>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <SD_disk_read+0xa6>
        buff += 512;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003c4a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ed      	bne.n	8003c34 <SD_disk_read+0x80>
 8003c58:	e000      	b.n	8003c5c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8003c5a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	204c      	movs	r0, #76	@ 0x4c
 8003c60:	f7ff fe57 	bl	8003912 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8003c64:	f7ff fd06 	bl	8003674 <DESELECT>
  SPI_RxByte();
 8003c68:	f7ff fd44 	bl	80036f4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000024 	.word	0x20000024
 8003c84:	20000248 	.word	0x20000248

08003c88 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <SD_disk_write+0x1c>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <SD_disk_write+0x20>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	e06b      	b.n	8003d80 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ca8:	4b37      	ldr	r3, [pc, #220]	@ (8003d88 <SD_disk_write+0x100>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <SD_disk_write+0x32>
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e062      	b.n	8003d80 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003cba:	4b33      	ldr	r3, [pc, #204]	@ (8003d88 <SD_disk_write+0x100>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <SD_disk_write+0x44>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e059      	b.n	8003d80 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8003d8c <SD_disk_write+0x104>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <SD_disk_write+0x56>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	025b      	lsls	r3, r3, #9
 8003cdc:	607b      	str	r3, [r7, #4]

  SELECT();
 8003cde:	f7ff fcbd 	bl	800365c <SELECT>

  if (count == 1)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d110      	bne.n	8003d0a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	2058      	movs	r0, #88	@ 0x58
 8003cec:	f7ff fe11 	bl	8003912 <SD_SendCmd>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d13a      	bne.n	8003d6c <SD_disk_write+0xe4>
 8003cf6:	21fe      	movs	r1, #254	@ 0xfe
 8003cf8:	68b8      	ldr	r0, [r7, #8]
 8003cfa:	f7ff fdc7 	bl	800388c <SD_TxDataBlock>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d033      	beq.n	8003d6c <SD_disk_write+0xe4>
      count = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	e030      	b.n	8003d6c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	@ (8003d8c <SD_disk_write+0x104>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003d16:	2100      	movs	r1, #0
 8003d18:	2077      	movs	r0, #119	@ 0x77
 8003d1a:	f7ff fdfa 	bl	8003912 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	2057      	movs	r0, #87	@ 0x57
 8003d22:	f7ff fdf6 	bl	8003912 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	2059      	movs	r0, #89	@ 0x59
 8003d2a:	f7ff fdf2 	bl	8003912 <SD_SendCmd>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11b      	bne.n	8003d6c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003d34:	21fc      	movs	r1, #252	@ 0xfc
 8003d36:	68b8      	ldr	r0, [r7, #8]
 8003d38:	f7ff fda8 	bl	800388c <SD_TxDataBlock>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <SD_disk_write+0xd0>
        buff += 512;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003d48:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ee      	bne.n	8003d34 <SD_disk_write+0xac>
 8003d56:	e000      	b.n	8003d5a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003d58:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8003d5a:	21fd      	movs	r1, #253	@ 0xfd
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7ff fd95 	bl	800388c <SD_TxDataBlock>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <SD_disk_write+0xe4>
      {
        count = 1;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8003d6c:	f7ff fc82 	bl	8003674 <DESELECT>
  SPI_RxByte();
 8003d70:	f7ff fcc0 	bl	80036f4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000024 	.word	0x20000024
 8003d8c:	20000248 	.word	0x20000248

08003d90 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b08b      	sub	sp, #44	@ 0x2c
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	603a      	str	r2, [r7, #0]
 8003d9a:	71fb      	strb	r3, [r7, #7]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <SD_disk_ioctl+0x1e>
 8003daa:	2304      	movs	r3, #4
 8003dac:	e113      	b.n	8003fd6 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8003db4:	79bb      	ldrb	r3, [r7, #6]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d124      	bne.n	8003e04 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d012      	beq.n	8003de8 <SD_disk_ioctl+0x58>
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	dc1a      	bgt.n	8003dfc <SD_disk_ioctl+0x6c>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <SD_disk_ioctl+0x40>
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d006      	beq.n	8003ddc <SD_disk_ioctl+0x4c>
 8003dce:	e015      	b.n	8003dfc <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003dd0:	f7ff fd16 	bl	8003800 <SD_PowerOff>
      res = RES_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003dda:	e0fa      	b.n	8003fd2 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8003ddc:	f7ff fcce 	bl	800377c <SD_PowerOn>
      res = RES_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003de6:	e0f4      	b.n	8003fd2 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	1c5c      	adds	r4, r3, #1
 8003dec:	f7ff fd14 	bl	8003818 <SD_CheckPower>
 8003df0:	4603      	mov	r3, r0
 8003df2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8003df4:	2300      	movs	r3, #0
 8003df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003dfa:	e0ea      	b.n	8003fd2 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003e02:	e0e6      	b.n	8003fd2 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8003e04:	4b76      	ldr	r3, [pc, #472]	@ (8003fe0 <SD_disk_ioctl+0x250>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0df      	b.n	8003fd6 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8003e16:	f7ff fc21 	bl	800365c <SELECT>
    switch (ctrl)
 8003e1a:	79bb      	ldrb	r3, [r7, #6]
 8003e1c:	2b0d      	cmp	r3, #13
 8003e1e:	f200 80c9 	bhi.w	8003fb4 <SD_disk_ioctl+0x224>
 8003e22:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <SD_disk_ioctl+0x98>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003f1f 	.word	0x08003f1f
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003f0f 	.word	0x08003f0f
 8003e34:	08003fb5 	.word	0x08003fb5
 8003e38:	08003fb5 	.word	0x08003fb5
 8003e3c:	08003fb5 	.word	0x08003fb5
 8003e40:	08003fb5 	.word	0x08003fb5
 8003e44:	08003fb5 	.word	0x08003fb5
 8003e48:	08003fb5 	.word	0x08003fb5
 8003e4c:	08003fb5 	.word	0x08003fb5
 8003e50:	08003fb5 	.word	0x08003fb5
 8003e54:	08003f31 	.word	0x08003f31
 8003e58:	08003f55 	.word	0x08003f55
 8003e5c:	08003f79 	.word	0x08003f79
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003e60:	2100      	movs	r1, #0
 8003e62:	2049      	movs	r0, #73	@ 0x49
 8003e64:	f7ff fd55 	bl	8003912 <SD_SendCmd>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 80a6 	bne.w	8003fbc <SD_disk_ioctl+0x22c>
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	2110      	movs	r1, #16
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fcda 	bl	8003830 <SD_RxDataBlock>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 809c 	beq.w	8003fbc <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8003e84:	7b3b      	ldrb	r3, [r7, #12]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10d      	bne.n	8003eaa <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003e8e:	7d7b      	ldrb	r3, [r7, #21]
 8003e90:	461a      	mov	r2, r3
 8003e92:	7d3b      	ldrb	r3, [r7, #20]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003ea0:	8bfb      	ldrh	r3, [r7, #30]
 8003ea2:	029a      	lsls	r2, r3, #10
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e02d      	b.n	8003f06 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003eaa:	7c7b      	ldrb	r3, [r7, #17]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	7dbb      	ldrb	r3, [r7, #22]
 8003eb4:	09db      	lsrs	r3, r3, #7
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	7d7b      	ldrb	r3, [r7, #21]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0306 	and.w	r3, r3, #6
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003ed2:	7d3b      	ldrb	r3, [r7, #20]
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	7cbb      	ldrb	r3, [r7, #18]
 8003ee6:	029b      	lsls	r3, r3, #10
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003ef8:	8bfa      	ldrh	r2, [r7, #30]
 8003efa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003efe:	3b09      	subs	r3, #9
 8003f00:	409a      	lsls	r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8003f0c:	e056      	b.n	8003fbc <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f14:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003f1c:	e055      	b.n	8003fca <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003f1e:	f7ff fc13 	bl	8003748 <SD_ReadyWait>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2bff      	cmp	r3, #255	@ 0xff
 8003f26:	d14b      	bne.n	8003fc0 <SD_disk_ioctl+0x230>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003f2e:	e047      	b.n	8003fc0 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003f30:	2100      	movs	r1, #0
 8003f32:	2049      	movs	r0, #73	@ 0x49
 8003f34:	f7ff fced 	bl	8003912 <SD_SendCmd>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d142      	bne.n	8003fc4 <SD_disk_ioctl+0x234>
 8003f3e:	2110      	movs	r1, #16
 8003f40:	6a38      	ldr	r0, [r7, #32]
 8003f42:	f7ff fc75 	bl	8003830 <SD_RxDataBlock>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d03b      	beq.n	8003fc4 <SD_disk_ioctl+0x234>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003f52:	e037      	b.n	8003fc4 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003f54:	2100      	movs	r1, #0
 8003f56:	204a      	movs	r0, #74	@ 0x4a
 8003f58:	f7ff fcdb 	bl	8003912 <SD_SendCmd>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d132      	bne.n	8003fc8 <SD_disk_ioctl+0x238>
 8003f62:	2110      	movs	r1, #16
 8003f64:	6a38      	ldr	r0, [r7, #32]
 8003f66:	f7ff fc63 	bl	8003830 <SD_RxDataBlock>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02b      	beq.n	8003fc8 <SD_disk_ioctl+0x238>
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003f76:	e027      	b.n	8003fc8 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003f78:	2100      	movs	r1, #0
 8003f7a:	207a      	movs	r0, #122	@ 0x7a
 8003f7c:	f7ff fcc9 	bl	8003912 <SD_SendCmd>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d116      	bne.n	8003fb4 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003f8c:	e00b      	b.n	8003fa6 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8003f8e:	6a3c      	ldr	r4, [r7, #32]
 8003f90:	1c63      	adds	r3, r4, #1
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	f7ff fbae 	bl	80036f4 <SPI_RxByte>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d9ef      	bls.n	8003f8e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fba:	e006      	b.n	8003fca <SD_disk_ioctl+0x23a>
      break;
 8003fbc:	bf00      	nop
 8003fbe:	e004      	b.n	8003fca <SD_disk_ioctl+0x23a>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <SD_disk_ioctl+0x23a>
      break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <SD_disk_ioctl+0x23a>
      break;
 8003fc8:	bf00      	nop
    }
    DESELECT();
 8003fca:	f7ff fb53 	bl	8003674 <DESELECT>
    SPI_RxByte();
 8003fce:	f7ff fb91 	bl	80036f4 <SPI_RxByte>
  }
  return res;
 8003fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	372c      	adds	r7, #44	@ 0x2c
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd90      	pop	{r4, r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000024 	.word	0x20000024

08003fe4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <disk_status+0x30>)
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	79fa      	ldrb	r2, [r7, #7]
 8003ffc:	4905      	ldr	r1, [pc, #20]	@ (8004014 <disk_status+0x30>)
 8003ffe:	440a      	add	r2, r1
 8004000:	7a12      	ldrb	r2, [r2, #8]
 8004002:	4610      	mov	r0, r2
 8004004:	4798      	blx	r3
 8004006:	4603      	mov	r3, r0
 8004008:	73fb      	strb	r3, [r7, #15]
  return stat;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000474 	.word	0x20000474

08004018 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	4a0e      	ldr	r2, [pc, #56]	@ (8004064 <disk_initialize+0x4c>)
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d114      	bne.n	800405a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	4a0c      	ldr	r2, [pc, #48]	@ (8004064 <disk_initialize+0x4c>)
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	79fa      	ldrb	r2, [r7, #7]
 800403e:	4909      	ldr	r1, [pc, #36]	@ (8004064 <disk_initialize+0x4c>)
 8004040:	440a      	add	r2, r1
 8004042:	7a12      	ldrb	r2, [r2, #8]
 8004044:	4610      	mov	r0, r2
 8004046:	4798      	blx	r3
 8004048:	4603      	mov	r3, r0
 800404a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	4a03      	ldr	r2, [pc, #12]	@ (8004064 <disk_initialize+0x4c>)
 8004056:	2101      	movs	r1, #1
 8004058:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000474 	.word	0x20000474

08004068 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <disk_read+0x3c>)
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	689c      	ldr	r4, [r3, #8]
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	4a07      	ldr	r2, [pc, #28]	@ (80040a4 <disk_read+0x3c>)
 8004088:	4413      	add	r3, r2
 800408a:	7a18      	ldrb	r0, [r3, #8]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	47a0      	blx	r4
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]
  return res;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd90      	pop	{r4, r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000474 	.word	0x20000474

080040a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4603      	mov	r3, r0
 80040b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	4a0a      	ldr	r2, [pc, #40]	@ (80040e4 <disk_write+0x3c>)
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68dc      	ldr	r4, [r3, #12]
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <disk_write+0x3c>)
 80040c8:	4413      	add	r3, r2
 80040ca:	7a18      	ldrb	r0, [r3, #8]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	47a0      	blx	r4
 80040d4:	4603      	mov	r3, r0
 80040d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000474 	.word	0x20000474

080040e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	603a      	str	r2, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
 80040f4:	460b      	mov	r3, r1
 80040f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	4a09      	ldr	r2, [pc, #36]	@ (8004120 <disk_ioctl+0x38>)
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	79fa      	ldrb	r2, [r7, #7]
 8004106:	4906      	ldr	r1, [pc, #24]	@ (8004120 <disk_ioctl+0x38>)
 8004108:	440a      	add	r2, r1
 800410a:	7a10      	ldrb	r0, [r2, #8]
 800410c:	79b9      	ldrb	r1, [r7, #6]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	4798      	blx	r3
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
  return res;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000474 	.word	0x20000474

08004124 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3301      	adds	r3, #1
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004134:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	b21a      	sxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b21b      	sxth	r3, r3
 8004142:	4313      	orrs	r3, r2
 8004144:	b21b      	sxth	r3, r3
 8004146:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004148:	89fb      	ldrh	r3, [r7, #14]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3303      	adds	r3, #3
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	3202      	adds	r2, #2
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	3201      	adds	r2, #1
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
	return rv;
 800418e:	68fb      	ldr	r3, [r7, #12]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	1c53      	adds	r3, r2, #1
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	1c59      	adds	r1, r3, #1
 800424e:	6179      	str	r1, [r7, #20]
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3b01      	subs	r3, #1
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f1      	bne.n	8004244 <mem_cpy+0x1a>
	}
}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	617a      	str	r2, [r7, #20]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3b01      	subs	r3, #1
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f3      	bne.n	800427c <mem_set+0x10>
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80042a2:	b480      	push	{r7}
 80042a4:	b089      	sub	sp, #36	@ 0x24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	61fa      	str	r2, [r7, #28]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	61ba      	str	r2, [r7, #24]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	1acb      	subs	r3, r1, r3
 80042ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <mem_cmp+0x40>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0eb      	beq.n	80042ba <mem_cmp+0x18>

	return r;
 80042e2:	697b      	ldr	r3, [r7, #20]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3724      	adds	r7, #36	@ 0x24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80042fa:	e002      	b.n	8004302 <chk_chr+0x12>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <chk_chr+0x26>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4293      	cmp	r3, r2
 8004314:	d1f2      	bne.n	80042fc <chk_chr+0xc>
	return *str;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	781b      	ldrb	r3, [r3, #0]
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e029      	b.n	8004390 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800433c:	4a27      	ldr	r2, [pc, #156]	@ (80043dc <chk_lock+0xb4>)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4413      	add	r3, r2
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01d      	beq.n	8004386 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800434a:	4a24      	ldr	r2, [pc, #144]	@ (80043dc <chk_lock+0xb4>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	4413      	add	r3, r2
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d116      	bne.n	800438a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800435c:	4a1f      	ldr	r2, [pc, #124]	@ (80043dc <chk_lock+0xb4>)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4413      	add	r3, r2
 8004364:	3304      	adds	r3, #4
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800436c:	429a      	cmp	r2, r3
 800436e:	d10c      	bne.n	800438a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004370:	4a1a      	ldr	r2, [pc, #104]	@ (80043dc <chk_lock+0xb4>)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4413      	add	r3, r2
 8004378:	3308      	adds	r3, #8
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004380:	429a      	cmp	r2, r3
 8004382:	d102      	bne.n	800438a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004384:	e007      	b.n	8004396 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d9d2      	bls.n	800433c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d109      	bne.n	80043b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d102      	bne.n	80043a8 <chk_lock+0x80>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d101      	bne.n	80043ac <chk_lock+0x84>
 80043a8:	2300      	movs	r3, #0
 80043aa:	e010      	b.n	80043ce <chk_lock+0xa6>
 80043ac:	2312      	movs	r3, #18
 80043ae:	e00e      	b.n	80043ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d108      	bne.n	80043c8 <chk_lock+0xa0>
 80043b6:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <chk_lock+0xb4>)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4413      	add	r3, r2
 80043be:	330c      	adds	r3, #12
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c6:	d101      	bne.n	80043cc <chk_lock+0xa4>
 80043c8:	2310      	movs	r3, #16
 80043ca:	e000      	b.n	80043ce <chk_lock+0xa6>
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000254 	.word	0x20000254

080043e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	e002      	b.n	80043f2 <enq_lock+0x12>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3301      	adds	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d806      	bhi.n	8004406 <enq_lock+0x26>
 80043f8:	4a09      	ldr	r2, [pc, #36]	@ (8004420 <enq_lock+0x40>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4413      	add	r3, r2
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f2      	bne.n	80043ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b02      	cmp	r3, #2
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000254 	.word	0x20000254

08004424 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	e01f      	b.n	8004474 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004434:	4a41      	ldr	r2, [pc, #260]	@ (800453c <inc_lock+0x118>)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	4413      	add	r3, r2
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d113      	bne.n	800446e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004446:	4a3d      	ldr	r2, [pc, #244]	@ (800453c <inc_lock+0x118>)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	4413      	add	r3, r2
 800444e:	3304      	adds	r3, #4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004456:	429a      	cmp	r2, r3
 8004458:	d109      	bne.n	800446e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800445a:	4a38      	ldr	r2, [pc, #224]	@ (800453c <inc_lock+0x118>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	4413      	add	r3, r2
 8004462:	3308      	adds	r3, #8
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800446a:	429a      	cmp	r2, r3
 800446c:	d006      	beq.n	800447c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d9dc      	bls.n	8004434 <inc_lock+0x10>
 800447a:	e000      	b.n	800447e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800447c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d132      	bne.n	80044ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e002      	b.n	8004490 <inc_lock+0x6c>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d806      	bhi.n	80044a4 <inc_lock+0x80>
 8004496:	4a29      	ldr	r2, [pc, #164]	@ (800453c <inc_lock+0x118>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	4413      	add	r3, r2
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f2      	bne.n	800448a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d101      	bne.n	80044ae <inc_lock+0x8a>
 80044aa:	2300      	movs	r3, #0
 80044ac:	e040      	b.n	8004530 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4922      	ldr	r1, [pc, #136]	@ (800453c <inc_lock+0x118>)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	440b      	add	r3, r1
 80044ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	491e      	ldr	r1, [pc, #120]	@ (800453c <inc_lock+0x118>)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	440b      	add	r3, r1
 80044c8:	3304      	adds	r3, #4
 80044ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	491a      	ldr	r1, [pc, #104]	@ (800453c <inc_lock+0x118>)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	440b      	add	r3, r1
 80044d8:	3308      	adds	r3, #8
 80044da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80044dc:	4a17      	ldr	r2, [pc, #92]	@ (800453c <inc_lock+0x118>)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	4413      	add	r3, r2
 80044e4:	330c      	adds	r3, #12
 80044e6:	2200      	movs	r2, #0
 80044e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <inc_lock+0xe0>
 80044f0:	4a12      	ldr	r2, [pc, #72]	@ (800453c <inc_lock+0x118>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	4413      	add	r3, r2
 80044f8:	330c      	adds	r3, #12
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <inc_lock+0xe0>
 8004500:	2300      	movs	r3, #0
 8004502:	e015      	b.n	8004530 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <inc_lock+0xf8>
 800450a:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <inc_lock+0x118>)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	4413      	add	r3, r2
 8004512:	330c      	adds	r3, #12
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	3301      	adds	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	e001      	b.n	8004520 <inc_lock+0xfc>
 800451c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004520:	4906      	ldr	r1, [pc, #24]	@ (800453c <inc_lock+0x118>)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	440b      	add	r3, r1
 8004528:	330c      	adds	r3, #12
 800452a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	20000254 	.word	0x20000254

08004540 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3b01      	subs	r3, #1
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d825      	bhi.n	80045a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8004554:	4a17      	ldr	r2, [pc, #92]	@ (80045b4 <dec_lock+0x74>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	4413      	add	r3, r2
 800455c:	330c      	adds	r3, #12
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004562:	89fb      	ldrh	r3, [r7, #14]
 8004564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004568:	d101      	bne.n	800456e <dec_lock+0x2e>
 800456a:	2300      	movs	r3, #0
 800456c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800456e:	89fb      	ldrh	r3, [r7, #14]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <dec_lock+0x3a>
 8004574:	89fb      	ldrh	r3, [r7, #14]
 8004576:	3b01      	subs	r3, #1
 8004578:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800457a:	4a0e      	ldr	r2, [pc, #56]	@ (80045b4 <dec_lock+0x74>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	4413      	add	r3, r2
 8004582:	330c      	adds	r3, #12
 8004584:	89fa      	ldrh	r2, [r7, #14]
 8004586:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <dec_lock+0x5a>
 800458e:	4a09      	ldr	r2, [pc, #36]	@ (80045b4 <dec_lock+0x74>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	4413      	add	r3, r2
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	737b      	strb	r3, [r7, #13]
 800459e:	e001      	b.n	80045a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80045a0:	2302      	movs	r3, #2
 80045a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80045a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000254 	.word	0x20000254

080045b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e010      	b.n	80045e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045c6:	4a0d      	ldr	r2, [pc, #52]	@ (80045fc <clear_lock+0x44>)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	4413      	add	r3, r2
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d105      	bne.n	80045e2 <clear_lock+0x2a>
 80045d6:	4a09      	ldr	r2, [pc, #36]	@ (80045fc <clear_lock+0x44>)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	4413      	add	r3, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3301      	adds	r3, #1
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d9eb      	bls.n	80045c6 <clear_lock+0xe>
	}
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000254 	.word	0x20000254

08004600 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	78db      	ldrb	r3, [r3, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d034      	beq.n	800467e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004618:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	7858      	ldrb	r0, [r3, #1]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004624:	2301      	movs	r3, #1
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	f7ff fd3e 	bl	80040a8 <disk_write>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e022      	b.n	800467e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	1ad2      	subs	r2, r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	429a      	cmp	r2, r3
 800464c:	d217      	bcs.n	800467e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	789b      	ldrb	r3, [r3, #2]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	e010      	b.n	8004678 <sync_window+0x78>
					wsect += fs->fsize;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4413      	add	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	7858      	ldrb	r0, [r3, #1]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800466a:	2301      	movs	r3, #1
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	f7ff fd1b 	bl	80040a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3b01      	subs	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d8eb      	bhi.n	8004656 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d01b      	beq.n	80046d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff ffad 	bl	8004600 <sync_window>
 80046a6:	4603      	mov	r3, r0
 80046a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d113      	bne.n	80046d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	7858      	ldrb	r0, [r3, #1]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80046ba:	2301      	movs	r3, #1
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	f7ff fcd3 	bl	8004068 <disk_read>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff87 	bl	8004600 <sync_window>
 80046f2:	4603      	mov	r3, r0
 80046f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d159      	bne.n	80047b0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d149      	bne.n	8004798 <sync_fs+0xb4>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	791b      	ldrb	r3, [r3, #4]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d145      	bne.n	8004798 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	899b      	ldrh	r3, [r3, #12]
 8004716:	461a      	mov	r2, r3
 8004718:	2100      	movs	r1, #0
 800471a:	f7ff fda7 	bl	800426c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3338      	adds	r3, #56	@ 0x38
 8004722:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004726:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fd36 	bl	800419c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3338      	adds	r3, #56	@ 0x38
 8004734:	4921      	ldr	r1, [pc, #132]	@ (80047bc <sync_fs+0xd8>)
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fd4b 	bl	80041d2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3338      	adds	r3, #56	@ 0x38
 8004740:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004744:	491e      	ldr	r1, [pc, #120]	@ (80047c0 <sync_fs+0xdc>)
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fd43 	bl	80041d2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3338      	adds	r3, #56	@ 0x38
 8004750:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f7ff fd39 	bl	80041d2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3338      	adds	r3, #56	@ 0x38
 8004764:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7ff fd2f 	bl	80041d2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	7858      	ldrb	r0, [r3, #1]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800478c:	2301      	movs	r3, #1
 800478e:	f7ff fc8b 	bl	80040a8 <disk_write>
			fs->fsi_flag = 0;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2200      	movs	r2, #0
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fca1 	bl	80040e8 <disk_ioctl>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <sync_fs+0xcc>
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	41615252 	.word	0x41615252
 80047c0:	61417272 	.word	0x61417272

080047c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	3b02      	subs	r3, #2
 80047d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	3b02      	subs	r3, #2
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d301      	bcc.n	80047e4 <clust2sect+0x20>
 80047e0:	2300      	movs	r3, #0
 80047e2:	e008      	b.n	80047f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	895b      	ldrh	r3, [r3, #10]
 80047e8:	461a      	mov	r2, r3
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	fb03 f202 	mul.w	r2, r3, r2
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	4413      	add	r3, r2
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d904      	bls.n	8004822 <get_fat+0x20>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004822:	2301      	movs	r3, #1
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e0ba      	b.n	800499e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004828:	f04f 33ff 	mov.w	r3, #4294967295
 800482c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b03      	cmp	r3, #3
 8004834:	f000 8082 	beq.w	800493c <get_fat+0x13a>
 8004838:	2b03      	cmp	r3, #3
 800483a:	f300 80a6 	bgt.w	800498a <get_fat+0x188>
 800483e:	2b01      	cmp	r3, #1
 8004840:	d002      	beq.n	8004848 <get_fat+0x46>
 8004842:	2b02      	cmp	r3, #2
 8004844:	d055      	beq.n	80048f2 <get_fat+0xf0>
 8004846:	e0a0      	b.n	800498a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	899b      	ldrh	r3, [r3, #12]
 800485e:	4619      	mov	r1, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	fbb3 f3f1 	udiv	r3, r3, r1
 8004866:	4413      	add	r3, r2
 8004868:	4619      	mov	r1, r3
 800486a:	6938      	ldr	r0, [r7, #16]
 800486c:	f7ff ff0c 	bl	8004688 <move_window>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 808c 	bne.w	8004990 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	60fa      	str	r2, [r7, #12]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	8992      	ldrh	r2, [r2, #12]
 8004882:	fbb3 f1f2 	udiv	r1, r3, r2
 8004886:	fb01 f202 	mul.w	r2, r1, r2
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004894:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	899b      	ldrh	r3, [r3, #12]
 800489e:	4619      	mov	r1, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a6:	4413      	add	r3, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	6938      	ldr	r0, [r7, #16]
 80048ac:	f7ff feec 	bl	8004688 <move_window>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d16e      	bne.n	8004994 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	899b      	ldrh	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	fbb3 f1f2 	udiv	r1, r3, r2
 80048c2:	fb01 f202 	mul.w	r2, r1, r2
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <get_fat+0xe6>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	e002      	b.n	80048ee <get_fat+0xec>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ee:	617b      	str	r3, [r7, #20]
			break;
 80048f0:	e055      	b.n	800499e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	899b      	ldrh	r3, [r3, #12]
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4619      	mov	r1, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	fbb3 f3f1 	udiv	r3, r3, r1
 8004906:	4413      	add	r3, r2
 8004908:	4619      	mov	r1, r3
 800490a:	6938      	ldr	r0, [r7, #16]
 800490c:	f7ff febc 	bl	8004688 <move_window>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d140      	bne.n	8004998 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	8992      	ldrh	r2, [r2, #12]
 8004924:	fbb3 f0f2 	udiv	r0, r3, r2
 8004928:	fb00 f202 	mul.w	r2, r0, r2
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	440b      	add	r3, r1
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fbf7 	bl	8004124 <ld_word>
 8004936:	4603      	mov	r3, r0
 8004938:	617b      	str	r3, [r7, #20]
			break;
 800493a:	e030      	b.n	800499e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	899b      	ldrh	r3, [r3, #12]
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	b29b      	uxth	r3, r3
 8004948:	4619      	mov	r1, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004950:	4413      	add	r3, r2
 8004952:	4619      	mov	r1, r3
 8004954:	6938      	ldr	r0, [r7, #16]
 8004956:	f7ff fe97 	bl	8004688 <move_window>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11d      	bne.n	800499c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	8992      	ldrh	r2, [r2, #12]
 800496e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004972:	fb00 f202 	mul.w	r2, r0, r2
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	440b      	add	r3, r1
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fbeb 	bl	8004156 <ld_dword>
 8004980:	4603      	mov	r3, r0
 8004982:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004986:	617b      	str	r3, [r7, #20]
			break;
 8004988:	e009      	b.n	800499e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800498a:	2301      	movs	r3, #1
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	e006      	b.n	800499e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004990:	bf00      	nop
 8004992:	e004      	b.n	800499e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004994:	bf00      	nop
 8004996:	e002      	b.n	800499e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004998:	bf00      	nop
 800499a:	e000      	b.n	800499e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800499c:	bf00      	nop
		}
	}

	return val;
 800499e:	697b      	ldr	r3, [r7, #20]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b089      	sub	sp, #36	@ 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80049b4:	2302      	movs	r3, #2
 80049b6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	f240 8109 	bls.w	8004bd2 <put_fat+0x22a>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	f080 8103 	bcs.w	8004bd2 <put_fat+0x22a>
		switch (fs->fs_type) {
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	f000 80b6 	beq.w	8004b42 <put_fat+0x19a>
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	f300 80fb 	bgt.w	8004bd2 <put_fat+0x22a>
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d003      	beq.n	80049e8 <put_fat+0x40>
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	f000 8083 	beq.w	8004aec <put_fat+0x144>
 80049e6:	e0f4      	b.n	8004bd2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4413      	add	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	899b      	ldrh	r3, [r3, #12]
 80049fe:	4619      	mov	r1, r3
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a06:	4413      	add	r3, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff fe3c 	bl	8004688 <move_window>
 8004a10:	4603      	mov	r3, r0
 8004a12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a14:	7ffb      	ldrb	r3, [r7, #31]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 80d4 	bne.w	8004bc4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	61ba      	str	r2, [r7, #24]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	8992      	ldrh	r2, [r2, #12]
 8004a2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a30:	fb00 f202 	mul.w	r2, r0, r2
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	440b      	add	r3, r1
 8004a38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <put_fat+0xb8>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	b25b      	sxtb	r3, r3
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	b25a      	sxtb	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	b25b      	sxtb	r3, r3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	b25b      	sxtb	r3, r3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e001      	b.n	8004a64 <put_fat+0xbc>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	899b      	ldrh	r3, [r3, #12]
 8004a76:	4619      	mov	r1, r3
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a7e:	4413      	add	r3, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff fe00 	bl	8004688 <move_window>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a8c:	7ffb      	ldrb	r3, [r7, #31]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 809a 	bne.w	8004bc8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	899b      	ldrh	r3, [r3, #12]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004aa6:	fb00 f202 	mul.w	r2, r0, r2
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	440b      	add	r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <put_fat+0x11a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	e00e      	b.n	8004ae0 <put_fat+0x138>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	f023 030f 	bic.w	r3, r3, #15
 8004acc:	b25a      	sxtb	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	4313      	orrs	r3, r2
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	70da      	strb	r2, [r3, #3]
			break;
 8004aea:	e072      	b.n	8004bd2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	899b      	ldrh	r3, [r3, #12]
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	4619      	mov	r1, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b00:	4413      	add	r3, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff fdbf 	bl	8004688 <move_window>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b0e:	7ffb      	ldrb	r3, [r7, #31]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d15b      	bne.n	8004bcc <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	8992      	ldrh	r2, [r2, #12]
 8004b22:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b26:	fb00 f202 	mul.w	r2, r0, r2
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	b292      	uxth	r2, r2
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fb31 	bl	800419c <st_word>
			fs->wflag = 1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	70da      	strb	r2, [r3, #3]
			break;
 8004b40:	e047      	b.n	8004bd2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	899b      	ldrh	r3, [r3, #12]
 8004b4a:	089b      	lsrs	r3, r3, #2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b56:	4413      	add	r3, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fd94 	bl	8004688 <move_window>
 8004b60:	4603      	mov	r3, r0
 8004b62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b64:	7ffb      	ldrb	r3, [r7, #31]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d132      	bne.n	8004bd0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	8992      	ldrh	r2, [r2, #12]
 8004b7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b82:	fb00 f202 	mul.w	r2, r0, r2
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	440b      	add	r3, r1
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fae3 	bl	8004156 <ld_dword>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b96:	4323      	orrs	r3, r4
 8004b98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	8992      	ldrh	r2, [r2, #12]
 8004ba8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bac:	fb00 f202 	mul.w	r2, r0, r2
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fb0b 	bl	80041d2 <st_dword>
			fs->wflag = 1;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	70da      	strb	r2, [r3, #3]
			break;
 8004bc2:	e006      	b.n	8004bd2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004bc4:	bf00      	nop
 8004bc6:	e004      	b.n	8004bd2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004bc8:	bf00      	nop
 8004bca:	e002      	b.n	8004bd2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004bd0:	bf00      	nop
		}
	}
	return res;
 8004bd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3724      	adds	r7, #36	@ 0x24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}

08004bdc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d904      	bls.n	8004c02 <remove_chain+0x26>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d301      	bcc.n	8004c06 <remove_chain+0x2a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e04b      	b.n	8004c9e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	69b8      	ldr	r0, [r7, #24]
 8004c14:	f7ff fec8 	bl	80049a8 <put_fat>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c1c:	7ffb      	ldrb	r3, [r7, #31]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <remove_chain+0x4a>
 8004c22:	7ffb      	ldrb	r3, [r7, #31]
 8004c24:	e03b      	b.n	8004c9e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff fdea 	bl	8004802 <get_fat>
 8004c2e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d031      	beq.n	8004c9a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <remove_chain+0x64>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e02e      	b.n	8004c9e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d101      	bne.n	8004c4c <remove_chain+0x70>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e028      	b.n	8004c9e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	69b8      	ldr	r0, [r7, #24]
 8004c52:	f7ff fea9 	bl	80049a8 <put_fat>
 8004c56:	4603      	mov	r3, r0
 8004c58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c5a:	7ffb      	ldrb	r3, [r7, #31]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <remove_chain+0x88>
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
 8004c62:	e01c      	b.n	8004c9e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	699a      	ldr	r2, [r3, #24]
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	3b02      	subs	r3, #2
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d20b      	bcs.n	8004c8a <remove_chain+0xae>
			fs->free_clst++;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	791b      	ldrb	r3, [r3, #4]
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3c6      	bcc.n	8004c26 <remove_chain+0x4a>
 8004c98:	e000      	b.n	8004c9c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004c9a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b088      	sub	sp, #32
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10d      	bne.n	8004cd8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <create_chain+0x2c>
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d31b      	bcc.n	8004d0a <create_chain+0x64>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	e018      	b.n	8004d0a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fd91 	bl	8004802 <get_fat>
 8004ce0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d801      	bhi.n	8004cec <create_chain+0x46>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e070      	b.n	8004dce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d101      	bne.n	8004cf8 <create_chain+0x52>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	e06a      	b.n	8004dce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d201      	bcs.n	8004d06 <create_chain+0x60>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	e063      	b.n	8004dce <create_chain+0x128>
		scl = clst;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3301      	adds	r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d307      	bcc.n	8004d2e <create_chain+0x88>
				ncl = 2;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d901      	bls.n	8004d2e <create_chain+0x88>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e04f      	b.n	8004dce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d2e:	69f9      	ldr	r1, [r7, #28]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fd66 	bl	8004802 <get_fat>
 8004d36:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00e      	beq.n	8004d5c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d003      	beq.n	8004d4c <create_chain+0xa6>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d101      	bne.n	8004d50 <create_chain+0xaa>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	e03e      	b.n	8004dce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d1da      	bne.n	8004d0e <create_chain+0x68>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e038      	b.n	8004dce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d5c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d62:	69f9      	ldr	r1, [r7, #28]
 8004d64:	6938      	ldr	r0, [r7, #16]
 8004d66:	f7ff fe1f 	bl	80049a8 <put_fat>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <create_chain+0xe2>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d006      	beq.n	8004d88 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	6938      	ldr	r0, [r7, #16]
 8004d80:	f7ff fe12 	bl	80049a8 <put_fat>
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <create_chain+0x116>
		fs->last_clst = ncl;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	3b02      	subs	r3, #2
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d804      	bhi.n	8004dac <create_chain+0x106>
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	1e5a      	subs	r2, r3, #1
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	791b      	ldrb	r3, [r3, #4]
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	711a      	strb	r2, [r3, #4]
 8004dba:	e007      	b.n	8004dcc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d102      	bne.n	8004dc8 <create_chain+0x122>
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	e000      	b.n	8004dca <create_chain+0x124>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004dcc:	69fb      	ldr	r3, [r7, #28]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b087      	sub	sp, #28
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	3304      	adds	r3, #4
 8004dec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	899b      	ldrh	r3, [r3, #12]
 8004df2:	461a      	mov	r2, r3
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	8952      	ldrh	r2, [r2, #10]
 8004dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1d1a      	adds	r2, r3, #4
 8004e08:	613a      	str	r2, [r7, #16]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <clmt_clust+0x42>
 8004e14:	2300      	movs	r3, #0
 8004e16:	e010      	b.n	8004e3a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d307      	bcc.n	8004e30 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e2e:	e7e9      	b.n	8004e04 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004e30:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4413      	add	r3, r2
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e5c:	d204      	bcs.n	8004e68 <dir_sdi+0x22>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <dir_sdi+0x26>
		return FR_INT_ERR;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e071      	b.n	8004f50 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <dir_sdi+0x46>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d902      	bls.n	8004e8c <dir_sdi+0x46>
		clst = fs->dirbase;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10c      	bne.n	8004eac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	8912      	ldrh	r2, [r2, #8]
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d301      	bcc.n	8004ea2 <dir_sdi+0x5c>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e056      	b.n	8004f50 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	61da      	str	r2, [r3, #28]
 8004eaa:	e02d      	b.n	8004f08 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	895b      	ldrh	r3, [r3, #10]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	899b      	ldrh	r3, [r3, #12]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ebc:	e019      	b.n	8004ef2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6979      	ldr	r1, [r7, #20]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fc9d 	bl	8004802 <get_fat>
 8004ec8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d101      	bne.n	8004ed6 <dir_sdi+0x90>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e03c      	b.n	8004f50 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d904      	bls.n	8004ee6 <dir_sdi+0xa0>
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d301      	bcc.n	8004eea <dir_sdi+0xa4>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e032      	b.n	8004f50 <dir_sdi+0x10a>
			ofs -= csz;
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d2e1      	bcs.n	8004ebe <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	6938      	ldr	r0, [r7, #16]
 8004efe:	f7ff fc61 	bl	80047c4 <clust2sect>
 8004f02:	4602      	mov	r2, r0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <dir_sdi+0xd4>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e01a      	b.n	8004f50 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69da      	ldr	r2, [r3, #28]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	899b      	ldrh	r3, [r3, #12]
 8004f22:	4619      	mov	r1, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f2a:	441a      	add	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	899b      	ldrh	r3, [r3, #12]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f42:	fb00 f202 	mul.w	r2, r0, r2
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	18ca      	adds	r2, r1, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	3320      	adds	r3, #32
 8004f6e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <dir_next+0x28>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f7e:	d301      	bcc.n	8004f84 <dir_next+0x2c>
 8004f80:	2304      	movs	r3, #4
 8004f82:	e0bb      	b.n	80050fc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	899b      	ldrh	r3, [r3, #12]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f90:	fb01 f202 	mul.w	r2, r1, r2
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 809d 	bne.w	80050d6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	8912      	ldrh	r2, [r2, #8]
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f0c0 808d 	bcc.w	80050d6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	61da      	str	r2, [r3, #28]
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e09a      	b.n	80050fc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	899b      	ldrh	r3, [r3, #12]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	8952      	ldrh	r2, [r2, #10]
 8004fd6:	3a01      	subs	r2, #1
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d17b      	bne.n	80050d6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7ff fc0b 	bl	8004802 <get_fat>
 8004fec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d801      	bhi.n	8004ff8 <dir_next+0xa0>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e081      	b.n	80050fc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d101      	bne.n	8005004 <dir_next+0xac>
 8005000:	2301      	movs	r3, #1
 8005002:	e07b      	b.n	80050fc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	429a      	cmp	r2, r3
 800500c:	d359      	bcc.n	80050c2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	61da      	str	r2, [r3, #28]
 800501a:	2304      	movs	r3, #4
 800501c:	e06e      	b.n	80050fc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7ff fe3d 	bl	8004ca6 <create_chain>
 800502c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <dir_next+0xe0>
 8005034:	2307      	movs	r3, #7
 8005036:	e061      	b.n	80050fc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <dir_next+0xea>
 800503e:	2302      	movs	r3, #2
 8005040:	e05c      	b.n	80050fc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d101      	bne.n	800504e <dir_next+0xf6>
 800504a:	2301      	movs	r3, #1
 800504c:	e056      	b.n	80050fc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff fad6 	bl	8004600 <sync_window>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <dir_next+0x106>
 800505a:	2301      	movs	r3, #1
 800505c:	e04e      	b.n	80050fc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	899b      	ldrh	r3, [r3, #12]
 8005068:	461a      	mov	r2, r3
 800506a:	2100      	movs	r1, #0
 800506c:	f7ff f8fe 	bl	800426c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	6979      	ldr	r1, [r7, #20]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff fba4 	bl	80047c4 <clust2sect>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	635a      	str	r2, [r3, #52]	@ 0x34
 8005082:	e012      	b.n	80050aa <dir_next+0x152>
						fs->wflag = 1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fab8 	bl	8004600 <sync_window>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <dir_next+0x142>
 8005096:	2301      	movs	r3, #1
 8005098:	e030      	b.n	80050fc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	3301      	adds	r3, #1
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	895b      	ldrh	r3, [r3, #10]
 80050ae:	461a      	mov	r2, r3
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d3e6      	bcc.n	8005084 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad2      	subs	r2, r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff fb7a 	bl	80047c4 <clust2sect>
 80050d0:	4602      	mov	r2, r0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	899b      	ldrh	r3, [r3, #12]
 80050e6:	461a      	mov	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80050ee:	fb00 f202 	mul.w	r2, r0, r2
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	18ca      	adds	r2, r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005114:	2100      	movs	r1, #0
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff fe95 	bl	8004e46 <dir_sdi>
 800511c:	4603      	mov	r3, r0
 800511e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d12b      	bne.n	800517e <dir_alloc+0x7a>
		n = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	4619      	mov	r1, r3
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff faa9 	bl	8004688 <move_window>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d11d      	bne.n	800517c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2be5      	cmp	r3, #229	@ 0xe5
 8005148:	d004      	beq.n	8005154 <dir_alloc+0x50>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d107      	bne.n	8005164 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	3301      	adds	r3, #1
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d102      	bne.n	8005168 <dir_alloc+0x64>
 8005162:	e00c      	b.n	800517e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005168:	2101      	movs	r1, #1
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fef4 	bl	8004f58 <dir_next>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0d7      	beq.n	800512a <dir_alloc+0x26>
 800517a:	e000      	b.n	800517e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800517c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800517e:	7dfb      	ldrb	r3, [r7, #23]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d101      	bne.n	8005188 <dir_alloc+0x84>
 8005184:	2307      	movs	r3, #7
 8005186:	75fb      	strb	r3, [r7, #23]
	return res;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	331a      	adds	r3, #26
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fe ffbf 	bl	8004124 <ld_word>
 80051a6:	4603      	mov	r3, r0
 80051a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d109      	bne.n	80051c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	3314      	adds	r3, #20
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe ffb4 	bl	8004124 <ld_word>
 80051bc:	4603      	mov	r3, r0
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80051c6:	68fb      	ldr	r3, [r7, #12]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	331a      	adds	r3, #26
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	b292      	uxth	r2, r2
 80051e4:	4611      	mov	r1, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe ffd8 	bl	800419c <st_word>
	if (fs->fs_type == FS_FAT32) {
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b03      	cmp	r3, #3
 80051f2:	d109      	bne.n	8005208 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f103 0214 	add.w	r2, r3, #20
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f7fe ffca 	bl	800419c <st_word>
	}
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	331a      	adds	r3, #26
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe ff80 	bl	8004124 <ld_word>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <cmp_lfn+0x1e>
 800522a:	2300      	movs	r3, #0
 800522c:	e059      	b.n	80052e2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	4613      	mov	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005244:	2301      	movs	r3, #1
 8005246:	81fb      	strh	r3, [r7, #14]
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	e033      	b.n	80052b6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800524e:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <cmp_lfn+0xdc>)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	4413      	add	r3, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe ff61 	bl	8004124 <ld_word>
 8005262:	4603      	mov	r3, r0
 8005264:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005266:	89fb      	ldrh	r3, [r7, #14]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01a      	beq.n	80052a2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005270:	d812      	bhi.n	8005298 <cmp_lfn+0x88>
 8005272:	89bb      	ldrh	r3, [r7, #12]
 8005274:	4618      	mov	r0, r3
 8005276:	f002 fa83 	bl	8007780 <ff_wtoupper>
 800527a:	4603      	mov	r3, r0
 800527c:	461c      	mov	r4, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	617a      	str	r2, [r7, #20]
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f002 fa77 	bl	8007780 <ff_wtoupper>
 8005292:	4603      	mov	r3, r0
 8005294:	429c      	cmp	r4, r3
 8005296:	d001      	beq.n	800529c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005298:	2300      	movs	r3, #0
 800529a:	e022      	b.n	80052e2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800529c:	89bb      	ldrh	r3, [r7, #12]
 800529e:	81fb      	strh	r3, [r7, #14]
 80052a0:	e006      	b.n	80052b0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80052a2:	89bb      	ldrh	r3, [r7, #12]
 80052a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d001      	beq.n	80052b0 <cmp_lfn+0xa0>
 80052ac:	2300      	movs	r3, #0
 80052ae:	e018      	b.n	80052e2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	3301      	adds	r3, #1
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d9c8      	bls.n	800524e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <cmp_lfn+0xd0>
 80052c8:	89fb      	ldrh	r3, [r7, #14]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <cmp_lfn+0xd0>
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <cmp_lfn+0xd0>
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80052e0:	2301      	movs	r3, #1
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	08008634 	.word	0x08008634

080052f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	4611      	mov	r1, r2
 80052fc:	461a      	mov	r2, r3
 80052fe:	460b      	mov	r3, r1
 8005300:	71fb      	strb	r3, [r7, #7]
 8005302:	4613      	mov	r3, r2
 8005304:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	330d      	adds	r3, #13
 800530a:	79ba      	ldrb	r2, [r7, #6]
 800530c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	330b      	adds	r3, #11
 8005312:	220f      	movs	r2, #15
 8005314:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	330c      	adds	r3, #12
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	331a      	adds	r3, #26
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe ff39 	bl	800419c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	4613      	mov	r3, r2
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	82fb      	strh	r3, [r7, #22]
 800533e:	2300      	movs	r3, #0
 8005340:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005348:	4293      	cmp	r3, r2
 800534a:	d007      	beq.n	800535c <put_lfn+0x6c>
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	61fa      	str	r2, [r7, #28]
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800535c:	4a17      	ldr	r2, [pc, #92]	@ (80053bc <put_lfn+0xcc>)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	4413      	add	r3, r2
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4413      	add	r3, r2
 800536a:	8afa      	ldrh	r2, [r7, #22]
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe ff14 	bl	800419c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005374:	8afb      	ldrh	r3, [r7, #22]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <put_lfn+0x90>
 800537a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800537e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	3301      	adds	r3, #1
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b0c      	cmp	r3, #12
 800538a:	d9da      	bls.n	8005342 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800538c:	8afb      	ldrh	r3, [r7, #22]
 800538e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005392:	4293      	cmp	r3, r2
 8005394:	d006      	beq.n	80053a4 <put_lfn+0xb4>
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <put_lfn+0xbc>
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	79fa      	ldrb	r2, [r7, #7]
 80053b0:	701a      	strb	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	08008634 	.word	0x08008634

080053c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	@ 0x30
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80053ce:	220b      	movs	r2, #11
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7fe ff29 	bl	800422a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d92b      	bls.n	8005436 <gen_numname+0x76>
		sr = seq;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80053e2:	e022      	b.n	800542a <gen_numname+0x6a>
			wc = *lfn++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80053ee:	2300      	movs	r3, #0
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f2:	e017      	b.n	8005424 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	005a      	lsls	r2, r3, #1
 80053f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005402:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <gen_numname+0x5e>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005418:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800541c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	3301      	adds	r3, #1
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d9e4      	bls.n	80053f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1d8      	bne.n	80053e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005436:	2307      	movs	r3, #7
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	b2db      	uxtb	r3, r3
 8005444:	3330      	adds	r3, #48	@ 0x30
 8005446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800544a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800544e:	2b39      	cmp	r3, #57	@ 0x39
 8005450:	d904      	bls.n	800545c <gen_numname+0x9c>
 8005452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005456:	3307      	adds	r3, #7
 8005458:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800545c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005462:	3330      	adds	r3, #48	@ 0x30
 8005464:	443b      	add	r3, r7
 8005466:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800546a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1df      	bne.n	800543a <gen_numname+0x7a>
	ns[i] = '~';
 800547a:	f107 0214 	add.w	r2, r7, #20
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005480:	4413      	add	r3, r2
 8005482:	227e      	movs	r2, #126	@ 0x7e
 8005484:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
 800548a:	e002      	b.n	8005492 <gen_numname+0xd2>
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	3301      	adds	r3, #1
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
 8005492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005496:	429a      	cmp	r2, r3
 8005498:	d205      	bcs.n	80054a6 <gen_numname+0xe6>
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549e:	4413      	add	r3, r2
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d1f2      	bne.n	800548c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d807      	bhi.n	80054bc <gen_numname+0xfc>
 80054ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80054b2:	3330      	adds	r3, #48	@ 0x30
 80054b4:	443b      	add	r3, r7
 80054b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80054ba:	e000      	b.n	80054be <gen_numname+0xfe>
 80054bc:	2120      	movs	r1, #32
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	460a      	mov	r2, r1
 80054ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	2b07      	cmp	r3, #7
 80054d0:	d9e9      	bls.n	80054a6 <gen_numname+0xe6>
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	3730      	adds	r7, #48	@ 0x30
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80054e8:	230b      	movs	r3, #11
 80054ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	0852      	lsrs	r2, r2, #1
 80054f2:	01db      	lsls	r3, r3, #7
 80054f4:	4313      	orrs	r3, r2
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	6079      	str	r1, [r7, #4]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	4413      	add	r3, r2
 8005502:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	3b01      	subs	r3, #1
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ed      	bne.n	80054ec <sum_sfn+0x10>
	return sum;
 8005510:	7bfb      	ldrb	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800552c:	2100      	movs	r1, #0
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff fc89 	bl	8004e46 <dir_sdi>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <dir_find+0x24>
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	e0a9      	b.n	8005696 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005542:	23ff      	movs	r3, #255	@ 0xff
 8005544:	753b      	strb	r3, [r7, #20]
 8005546:	7d3b      	ldrb	r3, [r7, #20]
 8005548:	757b      	strb	r3, [r7, #21]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f04f 32ff 	mov.w	r2, #4294967295
 8005550:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	4619      	mov	r1, r3
 8005558:	6938      	ldr	r0, [r7, #16]
 800555a:	f7ff f895 	bl	8004688 <move_window>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 8090 	bne.w	800568a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005572:	7dbb      	ldrb	r3, [r7, #22]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <dir_find+0x60>
 8005578:	2304      	movs	r3, #4
 800557a:	75fb      	strb	r3, [r7, #23]
 800557c:	e08a      	b.n	8005694 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	330b      	adds	r3, #11
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800558a:	73fb      	strb	r3, [r7, #15]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	7bfa      	ldrb	r2, [r7, #15]
 8005590:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005592:	7dbb      	ldrb	r3, [r7, #22]
 8005594:	2be5      	cmp	r3, #229	@ 0xe5
 8005596:	d007      	beq.n	80055a8 <dir_find+0x8a>
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <dir_find+0x98>
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	d006      	beq.n	80055b6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055a8:	23ff      	movs	r3, #255	@ 0xff
 80055aa:	757b      	strb	r3, [r7, #21]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80055b4:	e05e      	b.n	8005674 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	2b0f      	cmp	r3, #15
 80055ba:	d136      	bne.n	800562a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80055c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d154      	bne.n	8005674 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80055ca:	7dbb      	ldrb	r3, [r7, #22]
 80055cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	7b5b      	ldrb	r3, [r3, #13]
 80055da:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80055dc:	7dbb      	ldrb	r3, [r7, #22]
 80055de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e2:	75bb      	strb	r3, [r7, #22]
 80055e4:	7dbb      	ldrb	r3, [r7, #22]
 80055e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80055f0:	7dba      	ldrb	r2, [r7, #22]
 80055f2:	7d7b      	ldrb	r3, [r7, #21]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d115      	bne.n	8005624 <dir_find+0x106>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	330d      	adds	r3, #13
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	7d3a      	ldrb	r2, [r7, #20]
 8005602:	429a      	cmp	r2, r3
 8005604:	d10e      	bne.n	8005624 <dir_find+0x106>
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7ff fdfd 	bl	8005210 <cmp_lfn>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <dir_find+0x106>
 800561c:	7d7b      	ldrb	r3, [r7, #21]
 800561e:	3b01      	subs	r3, #1
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e000      	b.n	8005626 <dir_find+0x108>
 8005624:	23ff      	movs	r3, #255	@ 0xff
 8005626:	757b      	strb	r3, [r7, #21]
 8005628:	e024      	b.n	8005674 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800562a:	7d7b      	ldrb	r3, [r7, #21]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d109      	bne.n	8005644 <dir_find+0x126>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff ff51 	bl	80054dc <sum_sfn>
 800563a:	4603      	mov	r3, r0
 800563c:	461a      	mov	r2, r3
 800563e:	7d3b      	ldrb	r3, [r7, #20]
 8005640:	4293      	cmp	r3, r2
 8005642:	d024      	beq.n	800568e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <dir_find+0x14a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a18      	ldr	r0, [r3, #32]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3324      	adds	r3, #36	@ 0x24
 800565a:	220b      	movs	r2, #11
 800565c:	4619      	mov	r1, r3
 800565e:	f7fe fe20 	bl	80042a2 <mem_cmp>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d014      	beq.n	8005692 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005668:	23ff      	movs	r3, #255	@ 0xff
 800566a:	757b      	strb	r3, [r7, #21]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f04f 32ff 	mov.w	r2, #4294967295
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005674:	2100      	movs	r1, #0
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fc6e 	bl	8004f58 <dir_next>
 800567c:	4603      	mov	r3, r0
 800567e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f43f af65 	beq.w	8005552 <dir_find+0x34>
 8005688:	e004      	b.n	8005694 <dir_find+0x176>
		if (res != FR_OK) break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005692:	bf00      	nop

	return res;
 8005694:	7dfb      	ldrb	r3, [r7, #23]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	@ 0x30
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80056b4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <dir_register+0x20>
 80056bc:	2306      	movs	r3, #6
 80056be:	e0e0      	b.n	8005882 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c4:	e002      	b.n	80056cc <dir_register+0x2c>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	3301      	adds	r3, #1
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f4      	bne.n	80056c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80056e2:	f107 030c 	add.w	r3, r7, #12
 80056e6:	220c      	movs	r2, #12
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe fd9e 	bl	800422a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d032      	beq.n	800575e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2240      	movs	r2, #64	@ 0x40
 80056fc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005700:	2301      	movs	r3, #1
 8005702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005704:	e016      	b.n	8005734 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	f107 010c 	add.w	r1, r7, #12
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	f7ff fe53 	bl	80053c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff feff 	bl	800551e <dir_find>
 8005720:	4603      	mov	r3, r0
 8005722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005726:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	3301      	adds	r3, #1
 8005732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	2b63      	cmp	r3, #99	@ 0x63
 8005738:	d9e5      	bls.n	8005706 <dir_register+0x66>
 800573a:	e000      	b.n	800573e <dir_register+0x9e>
			if (res != FR_OK) break;
 800573c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	2b64      	cmp	r3, #100	@ 0x64
 8005742:	d101      	bne.n	8005748 <dir_register+0xa8>
 8005744:	2307      	movs	r3, #7
 8005746:	e09c      	b.n	8005882 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800574c:	2b04      	cmp	r3, #4
 800574e:	d002      	beq.n	8005756 <dir_register+0xb6>
 8005750:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005754:	e095      	b.n	8005882 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005756:	7dfa      	ldrb	r2, [r7, #23]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <dir_register+0xd8>
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	330c      	adds	r3, #12
 800576c:	4a47      	ldr	r2, [pc, #284]	@ (800588c <dir_register+0x1ec>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	3301      	adds	r3, #1
 8005776:	e000      	b.n	800577a <dir_register+0xda>
 8005778:	2301      	movs	r3, #1
 800577a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800577c:	6a39      	ldr	r1, [r7, #32]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fcc0 	bl	8005104 <dir_alloc>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800578a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800578e:	2b00      	cmp	r3, #0
 8005790:	d148      	bne.n	8005824 <dir_register+0x184>
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	3b01      	subs	r3, #1
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d042      	beq.n	8005824 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	015b      	lsls	r3, r3, #5
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fb4b 	bl	8004e46 <dir_sdi>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80057b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d132      	bne.n	8005824 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3324      	adds	r3, #36	@ 0x24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fe8a 	bl	80054dc <sum_sfn>
 80057c8:	4603      	mov	r3, r0
 80057ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	4619      	mov	r1, r3
 80057d2:	69f8      	ldr	r0, [r7, #28]
 80057d4:	f7fe ff58 	bl	8004688 <move_window>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80057de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11d      	bne.n	8005822 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	6918      	ldr	r0, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a19      	ldr	r1, [r3, #32]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	7efb      	ldrb	r3, [r7, #27]
 80057f4:	f7ff fd7c 	bl	80052f0 <put_lfn>
				fs->wflag = 1;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2201      	movs	r2, #1
 80057fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80057fe:	2100      	movs	r1, #0
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fba9 	bl	8004f58 <dir_next>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800580c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <dir_register+0x184>
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	3b01      	subs	r3, #1
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1d5      	bne.n	80057cc <dir_register+0x12c>
 8005820:	e000      	b.n	8005824 <dir_register+0x184>
				if (res != FR_OK) break;
 8005822:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005824:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005828:	2b00      	cmp	r3, #0
 800582a:	d128      	bne.n	800587e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4619      	mov	r1, r3
 8005832:	69f8      	ldr	r0, [r7, #28]
 8005834:	f7fe ff28 	bl	8004688 <move_window>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800583e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005842:	2b00      	cmp	r3, #0
 8005844:	d11b      	bne.n	800587e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	2220      	movs	r2, #32
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fd0c 	bl	800426c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a18      	ldr	r0, [r3, #32]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3324      	adds	r3, #36	@ 0x24
 800585c:	220b      	movs	r2, #11
 800585e:	4619      	mov	r1, r3
 8005860:	f7fe fce3 	bl	800422a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	330c      	adds	r3, #12
 8005870:	f002 0218 	and.w	r2, r2, #24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2201      	movs	r2, #1
 800587c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800587e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005882:	4618      	mov	r0, r3
 8005884:	3730      	adds	r7, #48	@ 0x30
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	4ec4ec4f 	.word	0x4ec4ec4f

08005890 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	@ 0x28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	61ba      	str	r2, [r7, #24]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80058be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058c0:	2b1f      	cmp	r3, #31
 80058c2:	d940      	bls.n	8005946 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80058c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80058c8:	d006      	beq.n	80058d8 <create_name+0x48>
 80058ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80058ce:	d110      	bne.n	80058f2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80058d0:	e002      	b.n	80058d8 <create_name+0x48>
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	3301      	adds	r3, #1
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	4413      	add	r3, r2
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80058e2:	d0f6      	beq.n	80058d2 <create_name+0x42>
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	4413      	add	r3, r2
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80058ee:	d0f0      	beq.n	80058d2 <create_name+0x42>
			break;
 80058f0:	e02a      	b.n	8005948 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80058f6:	d901      	bls.n	80058fc <create_name+0x6c>
 80058f8:	2306      	movs	r3, #6
 80058fa:	e17d      	b.n	8005bf8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80058fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005904:	2101      	movs	r1, #1
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fefe 	bl	8007708 <ff_convert>
 800590c:	4603      	mov	r3, r0
 800590e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005910:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <create_name+0x8a>
 8005916:	2306      	movs	r3, #6
 8005918:	e16e      	b.n	8005bf8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800591a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800591c:	2b7f      	cmp	r3, #127	@ 0x7f
 800591e:	d809      	bhi.n	8005934 <create_name+0xa4>
 8005920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005922:	4619      	mov	r1, r3
 8005924:	488d      	ldr	r0, [pc, #564]	@ (8005b5c <create_name+0x2cc>)
 8005926:	f7fe fce3 	bl	80042f0 <chk_chr>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <create_name+0xa4>
 8005930:	2306      	movs	r3, #6
 8005932:	e161      	b.n	8005bf8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	617a      	str	r2, [r7, #20]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005942:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005944:	e7b4      	b.n	80058b0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005946:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	441a      	add	r2, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005952:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005954:	2b1f      	cmp	r3, #31
 8005956:	d801      	bhi.n	800595c <create_name+0xcc>
 8005958:	2304      	movs	r3, #4
 800595a:	e000      	b.n	800595e <create_name+0xce>
 800595c:	2300      	movs	r3, #0
 800595e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005962:	e011      	b.n	8005988 <create_name+0xf8>
		w = lfn[di - 1];
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800596a:	3b01      	subs	r3, #1
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005976:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005978:	2b20      	cmp	r3, #32
 800597a:	d002      	beq.n	8005982 <create_name+0xf2>
 800597c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800597e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005980:	d106      	bne.n	8005990 <create_name+0x100>
		di--;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3b01      	subs	r3, #1
 8005986:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ea      	bne.n	8005964 <create_name+0xd4>
 800598e:	e000      	b.n	8005992 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005990:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	2200      	movs	r2, #0
 800599c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <create_name+0x118>
 80059a4:	2306      	movs	r3, #6
 80059a6:	e127      	b.n	8005bf8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3324      	adds	r3, #36	@ 0x24
 80059ac:	220b      	movs	r2, #11
 80059ae:	2120      	movs	r1, #32
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe fc5b 	bl	800426c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e002      	b.n	80059c2 <create_name+0x132>
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3301      	adds	r3, #1
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d0f5      	beq.n	80059bc <create_name+0x12c>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	2b2e      	cmp	r3, #46	@ 0x2e
 80059dc:	d0ee      	beq.n	80059bc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <create_name+0x168>
 80059e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059e8:	f043 0303 	orr.w	r3, r3, #3
 80059ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80059f0:	e002      	b.n	80059f8 <create_name+0x168>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <create_name+0x182>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005a04:	3b01      	subs	r3, #1
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a10:	d1ef      	bne.n	80059f2 <create_name+0x162>

	i = b = 0; ni = 8;
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005a18:	2300      	movs	r3, #0
 8005a1a:	623b      	str	r3, [r7, #32]
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	61ba      	str	r2, [r7, #24]
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005a30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8090 	beq.w	8005b58 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005a38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d006      	beq.n	8005a4c <create_name+0x1bc>
 8005a3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a40:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a42:	d10a      	bne.n	8005a5a <create_name+0x1ca>
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d006      	beq.n	8005a5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a50:	f043 0303 	orr.w	r3, r3, #3
 8005a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a58:	e07d      	b.n	8005b56 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005a5a:	6a3a      	ldr	r2, [r7, #32]
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d203      	bcs.n	8005a6a <create_name+0x1da>
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d123      	bne.n	8005ab2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2b0b      	cmp	r3, #11
 8005a6e:	d106      	bne.n	8005a7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a74:	f043 0303 	orr.w	r3, r3, #3
 8005a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a7c:	e075      	b.n	8005b6a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d005      	beq.n	8005a92 <create_name+0x202>
 8005a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a8a:	f043 0303 	orr.w	r3, r3, #3
 8005a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d866      	bhi.n	8005b68 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	230b      	movs	r3, #11
 8005aa4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005aa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005ab0:	e051      	b.n	8005b56 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005ab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ab4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ab6:	d914      	bls.n	8005ae2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005ab8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fe23 	bl	8007708 <ff_convert>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005ac6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <create_name+0x246>
 8005acc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ace:	3b80      	subs	r3, #128	@ 0x80
 8005ad0:	4a23      	ldr	r2, [pc, #140]	@ (8005b60 <create_name+0x2d0>)
 8005ad2:	5cd3      	ldrb	r3, [r2, r3]
 8005ad4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ada:	f043 0302 	orr.w	r3, r3, #2
 8005ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005ae2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <create_name+0x268>
 8005ae8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aea:	4619      	mov	r1, r3
 8005aec:	481d      	ldr	r0, [pc, #116]	@ (8005b64 <create_name+0x2d4>)
 8005aee:	f7fe fbff 	bl	80042f0 <chk_chr>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005af8:	235f      	movs	r3, #95	@ 0x5f
 8005afa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b00:	f043 0303 	orr.w	r3, r3, #3
 8005b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005b08:	e01b      	b.n	8005b42 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005b0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d909      	bls.n	8005b24 <create_name+0x294>
 8005b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b12:	2b5a      	cmp	r3, #90	@ 0x5a
 8005b14:	d806      	bhi.n	8005b24 <create_name+0x294>
					b |= 2;
 8005b16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b1a:	f043 0302 	orr.w	r3, r3, #2
 8005b1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005b22:	e00e      	b.n	8005b42 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005b24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b26:	2b60      	cmp	r3, #96	@ 0x60
 8005b28:	d90b      	bls.n	8005b42 <create_name+0x2b2>
 8005b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b2c:	2b7a      	cmp	r3, #122	@ 0x7a
 8005b2e:	d808      	bhi.n	8005b42 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005b30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005b3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b3e:	3b20      	subs	r3, #32
 8005b40:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	623a      	str	r2, [r7, #32]
 8005b48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b4a:	b2d1      	uxtb	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	460a      	mov	r2, r1
 8005b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005b56:	e763      	b.n	8005a20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005b58:	bf00      	nop
 8005b5a:	e006      	b.n	8005b6a <create_name+0x2da>
 8005b5c:	08008554 	.word	0x08008554
 8005b60:	080085b4 	.word	0x080085b4
 8005b64:	08008560 	.word	0x08008560
			if (si > di) break;			/* No extension */
 8005b68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b70:	2be5      	cmp	r3, #229	@ 0xe5
 8005b72:	d103      	bne.n	8005b7c <create_name+0x2ec>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2205      	movs	r2, #5
 8005b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d104      	bne.n	8005b8c <create_name+0x2fc>
 8005b82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b90:	f003 030c 	and.w	r3, r3, #12
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	d005      	beq.n	8005ba4 <create_name+0x314>
 8005b98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d105      	bne.n	8005bb0 <create_name+0x320>
 8005ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d117      	bne.n	8005bec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d105      	bne.n	8005bd4 <create_name+0x344>
 8005bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bcc:	f043 0310 	orr.w	r3, r3, #16
 8005bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005bd8:	f003 030c 	and.w	r3, r3, #12
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d105      	bne.n	8005bec <create_name+0x35c>
 8005be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005be4:	f043 0308 	orr.w	r3, r3, #8
 8005be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005bf2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8005bf6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	@ 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c14:	e002      	b.n	8005c1c <follow_path+0x1c>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c22:	d0f8      	beq.n	8005c16 <follow_path+0x16>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c2a:	d0f4      	beq.n	8005c16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b1f      	cmp	r3, #31
 8005c38:	d80a      	bhi.n	8005c50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2280      	movs	r2, #128	@ 0x80
 8005c3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005c42:	2100      	movs	r1, #0
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff f8fe 	bl	8004e46 <dir_sdi>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]
 8005c4e:	e048      	b.n	8005ce2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c50:	463b      	mov	r3, r7
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fe1b 	bl	8005890 <create_name>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d139      	bne.n	8005cd8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fc5a 	bl	800551e <dir_find>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005c74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d12c      	bne.n	8005cdc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d127      	bne.n	8005cdc <follow_path+0xdc>
 8005c8c:	2305      	movs	r3, #5
 8005c8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005c90:	e024      	b.n	8005cdc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c92:	7afb      	ldrb	r3, [r7, #11]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d121      	bne.n	8005ce0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	799b      	ldrb	r3, [r3, #6]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005ca8:	2305      	movs	r3, #5
 8005caa:	75fb      	strb	r3, [r7, #23]
 8005cac:	e019      	b.n	8005ce2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	8992      	ldrh	r2, [r2, #12]
 8005cbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cc0:	fb00 f202 	mul.w	r2, r0, r2
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	4619      	mov	r1, r3
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff fa61 	bl	8005192 <ld_clust>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cd6:	e7bb      	b.n	8005c50 <follow_path+0x50>
			if (res != FR_OK) break;
 8005cd8:	bf00      	nop
 8005cda:	e002      	b.n	8005ce2 <follow_path+0xe2>
				break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ce0:	bf00      	nop
			}
		}
	}

	return res;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d031      	beq.n	8005d66 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	e002      	b.n	8005d10 <get_ldnumber+0x24>
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b1f      	cmp	r3, #31
 8005d16:	d903      	bls.n	8005d20 <get_ldnumber+0x34>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b3a      	cmp	r3, #58	@ 0x3a
 8005d1e:	d1f4      	bne.n	8005d0a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b3a      	cmp	r3, #58	@ 0x3a
 8005d26:	d11c      	bne.n	8005d62 <get_ldnumber+0x76>
			tp = *path;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	60fa      	str	r2, [r7, #12]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	3b30      	subs	r3, #48	@ 0x30
 8005d38:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b09      	cmp	r3, #9
 8005d3e:	d80e      	bhi.n	8005d5e <get_ldnumber+0x72>
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d10a      	bne.n	8005d5e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <get_ldnumber+0x72>
					vol = (int)i;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	3301      	adds	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	e002      	b.n	8005d68 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d66:	693b      	ldr	r3, [r7, #16]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	70da      	strb	r2, [r3, #3]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fe fc7a 	bl	8004688 <move_window>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <check_fs+0x2a>
 8005d9a:	2304      	movs	r3, #4
 8005d9c:	e038      	b.n	8005e10 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3338      	adds	r3, #56	@ 0x38
 8005da2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe f9bc 	bl	8004124 <ld_word>
 8005dac:	4603      	mov	r3, r0
 8005dae:	461a      	mov	r2, r3
 8005db0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <check_fs+0x48>
 8005db8:	2303      	movs	r3, #3
 8005dba:	e029      	b.n	8005e10 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dc2:	2be9      	cmp	r3, #233	@ 0xe9
 8005dc4:	d009      	beq.n	8005dda <check_fs+0x66>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dcc:	2beb      	cmp	r3, #235	@ 0xeb
 8005dce:	d11e      	bne.n	8005e0e <check_fs+0x9a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005dd6:	2b90      	cmp	r3, #144	@ 0x90
 8005dd8:	d119      	bne.n	8005e0e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3338      	adds	r3, #56	@ 0x38
 8005dde:	3336      	adds	r3, #54	@ 0x36
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe f9b8 	bl	8004156 <ld_dword>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005dec:	4a0a      	ldr	r2, [pc, #40]	@ (8005e18 <check_fs+0xa4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <check_fs+0x82>
 8005df2:	2300      	movs	r3, #0
 8005df4:	e00c      	b.n	8005e10 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3338      	adds	r3, #56	@ 0x38
 8005dfa:	3352      	adds	r3, #82	@ 0x52
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe f9aa 	bl	8004156 <ld_dword>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4a05      	ldr	r2, [pc, #20]	@ (8005e1c <check_fs+0xa8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d101      	bne.n	8005e0e <check_fs+0x9a>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e000      	b.n	8005e10 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e0e:	2302      	movs	r3, #2
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	00544146 	.word	0x00544146
 8005e1c:	33544146 	.word	0x33544146

08005e20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b096      	sub	sp, #88	@ 0x58
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ff59 	bl	8005cec <get_ldnumber>
 8005e3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da01      	bge.n	8005e46 <find_volume+0x26>
 8005e42:	230b      	movs	r3, #11
 8005e44:	e265      	b.n	8006312 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005e46:	4a9f      	ldr	r2, [pc, #636]	@ (80060c4 <find_volume+0x2a4>)
 8005e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <find_volume+0x3a>
 8005e56:	230c      	movs	r3, #12
 8005e58:	e25b      	b.n	8006312 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e5e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01a      	beq.n	8005ea6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe f8b5 	bl	8003fe4 <disk_status>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10c      	bne.n	8005ea6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <find_volume+0x82>
 8005e92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005e9e:	230a      	movs	r3, #10
 8005ea0:	e237      	b.n	8006312 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e235      	b.n	8006312 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe f8ad 	bl	8004018 <disk_initialize>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e21e      	b.n	8006312 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <find_volume+0xca>
 8005eda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	e213      	b.n	8006312 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eec:	7858      	ldrb	r0, [r3, #1]
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	f7fe f8f7 	bl	80040e8 <disk_ioctl>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <find_volume+0xe4>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e206      	b.n	8006312 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f06:	899b      	ldrh	r3, [r3, #12]
 8005f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0c:	d80d      	bhi.n	8005f2a <find_volume+0x10a>
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	899b      	ldrh	r3, [r3, #12]
 8005f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f16:	d308      	bcc.n	8005f2a <find_volume+0x10a>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	899b      	ldrh	r3, [r3, #12]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	899b      	ldrh	r3, [r3, #12]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4013      	ands	r3, r2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <find_volume+0x10e>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e1f1      	b.n	8006312 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f36:	f7ff ff1d 	bl	8005d74 <check_fs>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d149      	bne.n	8005fdc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f48:	2300      	movs	r3, #0
 8005f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4c:	e01e      	b.n	8005f8c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005f5c:	4413      	add	r3, r2
 8005f5e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	3304      	adds	r3, #4
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d006      	beq.n	8005f78 <find_volume+0x158>
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe f8f1 	bl	8004156 <ld_dword>
 8005f74:	4602      	mov	r2, r0
 8005f76:	e000      	b.n	8005f7a <find_volume+0x15a>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	3358      	adds	r3, #88	@ 0x58
 8005f80:	443b      	add	r3, r7
 8005f82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f88:	3301      	adds	r3, #1
 8005f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d9dd      	bls.n	8005f4e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f92:	2300      	movs	r3, #0
 8005f94:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <find_volume+0x182>
 8005f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	3358      	adds	r3, #88	@ 0x58
 8005fa8:	443b      	add	r3, r7
 8005faa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005fae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <find_volume+0x1a2>
 8005fb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005fba:	f7ff fedb 	bl	8005d74 <check_fs>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	e000      	b.n	8005fc4 <find_volume+0x1a4>
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d905      	bls.n	8005fdc <find_volume+0x1bc>
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d9e2      	bls.n	8005fa2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d101      	bne.n	8005fe8 <find_volume+0x1c8>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e194      	b.n	8006312 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d901      	bls.n	8005ff4 <find_volume+0x1d4>
 8005ff0:	230d      	movs	r3, #13
 8005ff2:	e18e      	b.n	8006312 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	3338      	adds	r3, #56	@ 0x38
 8005ff8:	330b      	adds	r3, #11
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe f892 	bl	8004124 <ld_word>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	899b      	ldrh	r3, [r3, #12]
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <find_volume+0x1f0>
 800600c:	230d      	movs	r3, #13
 800600e:	e180      	b.n	8006312 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006012:	3338      	adds	r3, #56	@ 0x38
 8006014:	3316      	adds	r3, #22
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe f884 	bl	8004124 <ld_word>
 800601c:	4603      	mov	r3, r0
 800601e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <find_volume+0x214>
 8006026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006028:	3338      	adds	r3, #56	@ 0x38
 800602a:	3324      	adds	r3, #36	@ 0x24
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe f892 	bl	8004156 <ld_dword>
 8006032:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006036:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006038:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800603a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006042:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006046:	789b      	ldrb	r3, [r3, #2]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d005      	beq.n	8006058 <find_volume+0x238>
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	789b      	ldrb	r3, [r3, #2]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d001      	beq.n	8006058 <find_volume+0x238>
 8006054:	230d      	movs	r3, #13
 8006056:	e15c      	b.n	8006312 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605a:	789b      	ldrb	r3, [r3, #2]
 800605c:	461a      	mov	r2, r3
 800605e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006060:	fb02 f303 	mul.w	r3, r2, r3
 8006064:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006068:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800606c:	461a      	mov	r2, r3
 800606e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006070:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006074:	895b      	ldrh	r3, [r3, #10]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <find_volume+0x26c>
 800607a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607c:	895b      	ldrh	r3, [r3, #10]
 800607e:	461a      	mov	r2, r3
 8006080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006082:	895b      	ldrh	r3, [r3, #10]
 8006084:	3b01      	subs	r3, #1
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <find_volume+0x270>
 800608c:	230d      	movs	r3, #13
 800608e:	e140      	b.n	8006312 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	3338      	adds	r3, #56	@ 0x38
 8006094:	3311      	adds	r3, #17
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe f844 	bl	8004124 <ld_word>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80060a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a6:	891b      	ldrh	r3, [r3, #8]
 80060a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060aa:	8992      	ldrh	r2, [r2, #12]
 80060ac:	0952      	lsrs	r2, r2, #5
 80060ae:	b292      	uxth	r2, r2
 80060b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80060b4:	fb01 f202 	mul.w	r2, r1, r2
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <find_volume+0x2a8>
 80060c0:	230d      	movs	r3, #13
 80060c2:	e126      	b.n	8006312 <find_volume+0x4f2>
 80060c4:	2000024c 	.word	0x2000024c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80060c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ca:	3338      	adds	r3, #56	@ 0x38
 80060cc:	3313      	adds	r3, #19
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe f828 	bl	8004124 <ld_word>
 80060d4:	4603      	mov	r3, r0
 80060d6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80060d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <find_volume+0x2cc>
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	3338      	adds	r3, #56	@ 0x38
 80060e2:	3320      	adds	r3, #32
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe f836 	bl	8004156 <ld_dword>
 80060ea:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	3338      	adds	r3, #56	@ 0x38
 80060f0:	330e      	adds	r3, #14
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe f816 	bl	8004124 <ld_word>
 80060f8:	4603      	mov	r3, r0
 80060fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <find_volume+0x2e6>
 8006102:	230d      	movs	r3, #13
 8006104:	e105      	b.n	8006312 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006106:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800610a:	4413      	add	r3, r2
 800610c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800610e:	8911      	ldrh	r1, [r2, #8]
 8006110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006112:	8992      	ldrh	r2, [r2, #12]
 8006114:	0952      	lsrs	r2, r2, #5
 8006116:	b292      	uxth	r2, r2
 8006118:	fbb1 f2f2 	udiv	r2, r1, r2
 800611c:	b292      	uxth	r2, r2
 800611e:	4413      	add	r3, r2
 8006120:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006126:	429a      	cmp	r2, r3
 8006128:	d201      	bcs.n	800612e <find_volume+0x30e>
 800612a:	230d      	movs	r3, #13
 800612c:	e0f1      	b.n	8006312 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800612e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006136:	8952      	ldrh	r2, [r2, #10]
 8006138:	fbb3 f3f2 	udiv	r3, r3, r2
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <find_volume+0x328>
 8006144:	230d      	movs	r3, #13
 8006146:	e0e4      	b.n	8006312 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006148:	2303      	movs	r3, #3
 800614a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006154:	4293      	cmp	r3, r2
 8006156:	d802      	bhi.n	800615e <find_volume+0x33e>
 8006158:	2302      	movs	r3, #2
 800615a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006164:	4293      	cmp	r3, r2
 8006166:	d802      	bhi.n	800616e <find_volume+0x34e>
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	1c9a      	adds	r2, r3, #2
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006174:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006178:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800617a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800617c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800617e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006180:	441a      	add	r2, r3
 8006182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006184:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006186:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	441a      	add	r2, r3
 800618c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006190:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006194:	2b03      	cmp	r3, #3
 8006196:	d11e      	bne.n	80061d6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619a:	3338      	adds	r3, #56	@ 0x38
 800619c:	332a      	adds	r3, #42	@ 0x2a
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fd ffc0 	bl	8004124 <ld_word>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <find_volume+0x38e>
 80061aa:	230d      	movs	r3, #13
 80061ac:	e0b1      	b.n	8006312 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	891b      	ldrh	r3, [r3, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <find_volume+0x39a>
 80061b6:	230d      	movs	r3, #13
 80061b8:	e0ab      	b.n	8006312 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80061ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061bc:	3338      	adds	r3, #56	@ 0x38
 80061be:	332c      	adds	r3, #44	@ 0x2c
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fd ffc8 	bl	8004156 <ld_dword>
 80061c6:	4602      	mov	r2, r0
 80061c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ca:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80061cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d4:	e01f      	b.n	8006216 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	891b      	ldrh	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <find_volume+0x3c2>
 80061de:	230d      	movs	r3, #13
 80061e0:	e097      	b.n	8006312 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e8:	441a      	add	r2, r3
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d103      	bne.n	80061fe <find_volume+0x3de>
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	e00a      	b.n	8006214 <find_volume+0x3f4>
 80061fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006200:	69da      	ldr	r2, [r3, #28]
 8006202:	4613      	mov	r3, r2
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	4413      	add	r3, r2
 8006208:	085a      	lsrs	r2, r3, #1
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006214:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621c:	899b      	ldrh	r3, [r3, #12]
 800621e:	4619      	mov	r1, r3
 8006220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006222:	440b      	add	r3, r1
 8006224:	3b01      	subs	r3, #1
 8006226:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006228:	8989      	ldrh	r1, [r1, #12]
 800622a:	fbb3 f3f1 	udiv	r3, r3, r1
 800622e:	429a      	cmp	r2, r3
 8006230:	d201      	bcs.n	8006236 <find_volume+0x416>
 8006232:	230d      	movs	r3, #13
 8006234:	e06d      	b.n	8006312 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	f04f 32ff 	mov.w	r2, #4294967295
 800623c:	619a      	str	r2, [r3, #24]
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006244:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006248:	2280      	movs	r2, #128	@ 0x80
 800624a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800624c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006250:	2b03      	cmp	r3, #3
 8006252:	d149      	bne.n	80062e8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006256:	3338      	adds	r3, #56	@ 0x38
 8006258:	3330      	adds	r3, #48	@ 0x30
 800625a:	4618      	mov	r0, r3
 800625c:	f7fd ff62 	bl	8004124 <ld_word>
 8006260:	4603      	mov	r3, r0
 8006262:	2b01      	cmp	r3, #1
 8006264:	d140      	bne.n	80062e8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006268:	3301      	adds	r3, #1
 800626a:	4619      	mov	r1, r3
 800626c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800626e:	f7fe fa0b 	bl	8004688 <move_window>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d137      	bne.n	80062e8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627a:	2200      	movs	r2, #0
 800627c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800627e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006280:	3338      	adds	r3, #56	@ 0x38
 8006282:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006286:	4618      	mov	r0, r3
 8006288:	f7fd ff4c 	bl	8004124 <ld_word>
 800628c:	4603      	mov	r3, r0
 800628e:	461a      	mov	r2, r3
 8006290:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006294:	429a      	cmp	r2, r3
 8006296:	d127      	bne.n	80062e8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629a:	3338      	adds	r3, #56	@ 0x38
 800629c:	4618      	mov	r0, r3
 800629e:	f7fd ff5a 	bl	8004156 <ld_dword>
 80062a2:	4603      	mov	r3, r0
 80062a4:	4a1d      	ldr	r2, [pc, #116]	@ (800631c <find_volume+0x4fc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d11e      	bne.n	80062e8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	3338      	adds	r3, #56	@ 0x38
 80062ae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fd ff4f 	bl	8004156 <ld_dword>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4a19      	ldr	r2, [pc, #100]	@ (8006320 <find_volume+0x500>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d113      	bne.n	80062e8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	3338      	adds	r3, #56	@ 0x38
 80062c4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fd ff44 	bl	8004156 <ld_dword>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	3338      	adds	r3, #56	@ 0x38
 80062d8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fd ff3a 	bl	8004156 <ld_dword>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80062ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80062f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006324 <find_volume+0x504>)
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <find_volume+0x504>)
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <find_volume+0x504>)
 80062fe:	881a      	ldrh	r2, [r3, #0]
 8006300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006302:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006306:	4a08      	ldr	r2, [pc, #32]	@ (8006328 <find_volume+0x508>)
 8006308:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800630a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800630c:	f7fe f954 	bl	80045b8 <clear_lock>
#endif
	return FR_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3758      	adds	r7, #88	@ 0x58
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	41615252 	.word	0x41615252
 8006320:	61417272 	.word	0x61417272
 8006324:	20000250 	.word	0x20000250
 8006328:	20000274 	.word	0x20000274

0800632c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006336:	2309      	movs	r3, #9
 8006338:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01c      	beq.n	800637a <validate+0x4e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d018      	beq.n	800637a <validate+0x4e>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d013      	beq.n	800637a <validate+0x4e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	889a      	ldrh	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	88db      	ldrh	r3, [r3, #6]
 800635c:	429a      	cmp	r2, r3
 800635e:	d10c      	bne.n	800637a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd fe3c 	bl	8003fe4 <disk_status>
 800636c:	4603      	mov	r3, r0
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <validate+0x4e>
			res = FR_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <validate+0x5a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	e000      	b.n	8006388 <validate+0x5c>
 8006386:	2300      	movs	r3, #0
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	6013      	str	r3, [r2, #0]
	return res;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80063aa:	f107 0310 	add.w	r3, r7, #16
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff fc9c 	bl	8005cec <get_ldnumber>
 80063b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	da01      	bge.n	80063c0 <f_mount+0x28>
 80063bc:	230b      	movs	r3, #11
 80063be:	e02b      	b.n	8006418 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80063c0:	4a17      	ldr	r2, [pc, #92]	@ (8006420 <f_mount+0x88>)
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80063d0:	69b8      	ldr	r0, [r7, #24]
 80063d2:	f7fe f8f1 	bl	80045b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	490d      	ldr	r1, [pc, #52]	@ (8006420 <f_mount+0x88>)
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <f_mount+0x66>
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d001      	beq.n	8006402 <f_mount+0x6a>
 80063fe:	2300      	movs	r3, #0
 8006400:	e00a      	b.n	8006418 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006402:	f107 010c 	add.w	r1, r7, #12
 8006406:	f107 0308 	add.w	r3, r7, #8
 800640a:	2200      	movs	r2, #0
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fd07 	bl	8005e20 <find_volume>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006416:	7dfb      	ldrb	r3, [r7, #23]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	2000024c 	.word	0x2000024c

08006424 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b09a      	sub	sp, #104	@ 0x68
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <f_open+0x18>
 8006438:	2309      	movs	r3, #9
 800643a:	e1b7      	b.n	80067ac <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006442:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006444:	79fa      	ldrb	r2, [r7, #7]
 8006446:	f107 0114 	add.w	r1, r7, #20
 800644a:	f107 0308 	add.w	r3, r7, #8
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fce6 	bl	8005e20 <find_volume>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800645a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 819b 	bne.w	800679a <f_open+0x376>
		dj.obj.fs = fs;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	f107 0318 	add.w	r3, r7, #24
 800646e:	4611      	mov	r1, r2
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fbc5 	bl	8005c00 <follow_path>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800647c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006480:	2b00      	cmp	r3, #0
 8006482:	d118      	bne.n	80064b6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006484:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006488:	b25b      	sxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	da03      	bge.n	8006496 <f_open+0x72>
				res = FR_INVALID_NAME;
 800648e:	2306      	movs	r3, #6
 8006490:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006494:	e00f      	b.n	80064b6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	2b01      	cmp	r3, #1
 800649a:	bf8c      	ite	hi
 800649c:	2301      	movhi	r3, #1
 800649e:	2300      	movls	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	f107 0318 	add.w	r3, r7, #24
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fd ff3c 	bl	8004328 <chk_lock>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	f003 031c 	and.w	r3, r3, #28
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d07f      	beq.n	80065c0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80064c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d017      	beq.n	80064f8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80064c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d10e      	bne.n	80064ee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80064d0:	f7fd ff86 	bl	80043e0 <enq_lock>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d006      	beq.n	80064e8 <f_open+0xc4>
 80064da:	f107 0318 	add.w	r3, r7, #24
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff f8de 	bl	80056a0 <dir_register>
 80064e4:	4603      	mov	r3, r0
 80064e6:	e000      	b.n	80064ea <f_open+0xc6>
 80064e8:	2312      	movs	r3, #18
 80064ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	f043 0308 	orr.w	r3, r3, #8
 80064f4:	71fb      	strb	r3, [r7, #7]
 80064f6:	e010      	b.n	800651a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80064f8:	7fbb      	ldrb	r3, [r7, #30]
 80064fa:	f003 0311 	and.w	r3, r3, #17
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <f_open+0xe6>
					res = FR_DENIED;
 8006502:	2307      	movs	r3, #7
 8006504:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006508:	e007      	b.n	800651a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <f_open+0xf6>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800651a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800651e:	2b00      	cmp	r3, #0
 8006520:	d168      	bne.n	80065f4 <f_open+0x1d0>
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d063      	beq.n	80065f4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800652c:	f7fd f838 	bl	80035a0 <get_fattime>
 8006530:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	330e      	adds	r3, #14
 8006536:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006538:	4618      	mov	r0, r3
 800653a:	f7fd fe4a 	bl	80041d2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	3316      	adds	r3, #22
 8006542:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006544:	4618      	mov	r0, r3
 8006546:	f7fd fe44 	bl	80041d2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800654a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654c:	330b      	adds	r3, #11
 800654e:	2220      	movs	r2, #32
 8006550:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fe1a 	bl	8005192 <ld_clust>
 800655e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006564:	2200      	movs	r2, #0
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fe32 	bl	80051d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800656c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656e:	331c      	adds	r3, #28
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f7fd fe2d 	bl	80041d2 <st_dword>
					fs->wflag = 1;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2201      	movs	r2, #1
 800657c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800657e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006580:	2b00      	cmp	r3, #0
 8006582:	d037      	beq.n	80065f4 <f_open+0x1d0>
						dw = fs->winsect;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006588:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800658a:	f107 0318 	add.w	r3, r7, #24
 800658e:	2200      	movs	r2, #0
 8006590:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe fb22 	bl	8004bdc <remove_chain>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800659e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d126      	bne.n	80065f4 <f_open+0x1d0>
							res = move_window(fs, dw);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe f86c 	bl	8004688 <move_window>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065ba:	3a01      	subs	r2, #1
 80065bc:	615a      	str	r2, [r3, #20]
 80065be:	e019      	b.n	80065f4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80065c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d115      	bne.n	80065f4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80065c8:	7fbb      	ldrb	r3, [r7, #30]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <f_open+0x1b6>
					res = FR_NO_FILE;
 80065d2:	2304      	movs	r3, #4
 80065d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80065d8:	e00c      	b.n	80065f4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <f_open+0x1d0>
 80065e4:	7fbb      	ldrb	r3, [r7, #30]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <f_open+0x1d0>
						res = FR_DENIED;
 80065ee:	2307      	movs	r3, #7
 80065f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80065f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d126      	bne.n	800664a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800660c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006616:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	2b01      	cmp	r3, #1
 8006620:	bf8c      	ite	hi
 8006622:	2301      	movhi	r3, #1
 8006624:	2300      	movls	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	f107 0318 	add.w	r3, r7, #24
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f7fd fef7 	bl	8004424 <inc_lock>
 8006636:	4602      	mov	r2, r0
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d102      	bne.n	800664a <f_open+0x226>
 8006644:	2302      	movs	r3, #2
 8006646:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800664a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 80a3 	bne.w	800679a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006658:	4611      	mov	r1, r2
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fd99 	bl	8005192 <ld_clust>
 8006660:	4602      	mov	r2, r0
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	331c      	adds	r3, #28
 800666a:	4618      	mov	r0, r3
 800666c:	f7fd fd73 	bl	8004156 <ld_dword>
 8006670:	4602      	mov	r2, r0
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	88da      	ldrh	r2, [r3, #6]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	79fa      	ldrb	r2, [r7, #7]
 800668e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3330      	adds	r3, #48	@ 0x30
 80066a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80066aa:	2100      	movs	r1, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fd fddd 	bl	800426c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d06e      	beq.n	800679a <f_open+0x376>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d06a      	beq.n	800679a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	895b      	ldrh	r3, [r3, #10]
 80066d0:	461a      	mov	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	899b      	ldrh	r3, [r3, #12]
 80066d6:	fb02 f303 	mul.w	r3, r2, r3
 80066da:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066e8:	e016      	b.n	8006718 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe f887 	bl	8004802 <get_fat>
 80066f4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80066f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d802      	bhi.n	8006702 <f_open+0x2de>
 80066fc:	2302      	movs	r3, #2
 80066fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d102      	bne.n	8006710 <f_open+0x2ec>
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006710:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006718:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <f_open+0x304>
 8006720:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006724:	429a      	cmp	r2, r3
 8006726:	d8e0      	bhi.n	80066ea <f_open+0x2c6>
				}
				fp->clust = clst;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800672c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800672e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006732:	2b00      	cmp	r3, #0
 8006734:	d131      	bne.n	800679a <f_open+0x376>
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	899b      	ldrh	r3, [r3, #12]
 800673a:	461a      	mov	r2, r3
 800673c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800673e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006742:	fb01 f202 	mul.w	r2, r1, r2
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d026      	beq.n	800679a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006750:	4618      	mov	r0, r3
 8006752:	f7fe f837 	bl	80047c4 <clust2sect>
 8006756:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <f_open+0x342>
						res = FR_INT_ERR;
 800675e:	2302      	movs	r3, #2
 8006760:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006764:	e019      	b.n	800679a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	899b      	ldrh	r3, [r3, #12]
 800676a:	461a      	mov	r2, r3
 800676c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800676e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006774:	441a      	add	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	7858      	ldrb	r0, [r3, #1]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1a      	ldr	r2, [r3, #32]
 8006788:	2301      	movs	r3, #1
 800678a:	f7fd fc6d 	bl	8004068 <disk_read>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <f_open+0x376>
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800679a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <f_open+0x384>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80067a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3768      	adds	r7, #104	@ 0x68
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08e      	sub	sp, #56	@ 0x38
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f107 0214 	add.w	r2, r7, #20
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fda9 	bl	800632c <validate>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80067e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d107      	bne.n	80067f8 <f_read+0x44>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	7d5b      	ldrb	r3, [r3, #21]
 80067ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80067f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <f_read+0x4a>
 80067f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067fc:	e135      	b.n	8006a6a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7d1b      	ldrb	r3, [r3, #20]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <f_read+0x5a>
 800680a:	2307      	movs	r3, #7
 800680c:	e12d      	b.n	8006a6a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	429a      	cmp	r2, r3
 8006820:	f240 811e 	bls.w	8006a60 <f_read+0x2ac>
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006828:	e11a      	b.n	8006a60 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	8992      	ldrh	r2, [r2, #12]
 8006832:	fbb3 f1f2 	udiv	r1, r3, r2
 8006836:	fb01 f202 	mul.w	r2, r1, r2
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	f040 80d5 	bne.w	80069ec <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	8992      	ldrh	r2, [r2, #12]
 800684a:	fbb3 f3f2 	udiv	r3, r3, r2
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	8952      	ldrh	r2, [r2, #10]
 8006852:	3a01      	subs	r2, #1
 8006854:	4013      	ands	r3, r2
 8006856:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12f      	bne.n	80068be <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	633b      	str	r3, [r7, #48]	@ 0x30
 800686c:	e013      	b.n	8006896 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	4619      	mov	r1, r3
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7fe faaa 	bl	8004dd6 <clmt_clust>
 8006882:	6338      	str	r0, [r7, #48]	@ 0x30
 8006884:	e007      	b.n	8006896 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f7fd ffb7 	bl	8004802 <get_fat>
 8006894:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	2b01      	cmp	r3, #1
 800689a:	d804      	bhi.n	80068a6 <f_read+0xf2>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2202      	movs	r2, #2
 80068a0:	755a      	strb	r2, [r3, #21]
 80068a2:	2302      	movs	r3, #2
 80068a4:	e0e1      	b.n	8006a6a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d104      	bne.n	80068b8 <f_read+0x104>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	755a      	strb	r2, [r3, #21]
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0d8      	b.n	8006a6a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7fd ff7c 	bl	80047c4 <clust2sect>
 80068cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d104      	bne.n	80068de <f_read+0x12a>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2202      	movs	r2, #2
 80068d8:	755a      	strb	r2, [r3, #21]
 80068da:	2302      	movs	r3, #2
 80068dc:	e0c5      	b.n	8006a6a <f_read+0x2b6>
			sect += csect;
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	899b      	ldrh	r3, [r3, #12]
 80068ea:	461a      	mov	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d041      	beq.n	800697e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	4413      	add	r3, r2
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	8952      	ldrh	r2, [r2, #10]
 8006904:	4293      	cmp	r3, r2
 8006906:	d905      	bls.n	8006914 <f_read+0x160>
					cc = fs->csize - csect;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	895b      	ldrh	r3, [r3, #10]
 800690c:	461a      	mov	r2, r3
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	7858      	ldrb	r0, [r3, #1]
 8006918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800691e:	f7fd fba3 	bl	8004068 <disk_read>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <f_read+0x17e>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	755a      	strb	r2, [r3, #21]
 800692e:	2301      	movs	r3, #1
 8006930:	e09b      	b.n	8006a6a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	7d1b      	ldrb	r3, [r3, #20]
 8006936:	b25b      	sxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	da18      	bge.n	800696e <f_read+0x1ba>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a1a      	ldr	r2, [r3, #32]
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006946:	429a      	cmp	r2, r3
 8006948:	d911      	bls.n	800696e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1a      	ldr	r2, [r3, #32]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	8992      	ldrh	r2, [r2, #12]
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800695c:	18d0      	adds	r0, r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	899b      	ldrh	r3, [r3, #12]
 8006968:	461a      	mov	r2, r3
 800696a:	f7fd fc5e 	bl	800422a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	899b      	ldrh	r3, [r3, #12]
 8006972:	461a      	mov	r2, r3
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	fb02 f303 	mul.w	r3, r2, r3
 800697a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800697c:	e05c      	b.n	8006a38 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	d02e      	beq.n	80069e6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	7d1b      	ldrb	r3, [r3, #20]
 800698c:	b25b      	sxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	da18      	bge.n	80069c4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	7858      	ldrb	r0, [r3, #1]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a1a      	ldr	r2, [r3, #32]
 80069a0:	2301      	movs	r3, #1
 80069a2:	f7fd fb81 	bl	80040a8 <disk_write>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <f_read+0x202>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	755a      	strb	r2, [r3, #21]
 80069b2:	2301      	movs	r3, #1
 80069b4:	e059      	b.n	8006a6a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	7d1b      	ldrb	r3, [r3, #20]
 80069ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	7858      	ldrb	r0, [r3, #1]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80069ce:	2301      	movs	r3, #1
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	f7fd fb49 	bl	8004068 <disk_read>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <f_read+0x232>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	755a      	strb	r2, [r3, #21]
 80069e2:	2301      	movs	r3, #1
 80069e4:	e041      	b.n	8006a6a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	899b      	ldrh	r3, [r3, #12]
 80069f0:	4618      	mov	r0, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	8992      	ldrh	r2, [r2, #12]
 80069fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80069fe:	fb01 f202 	mul.w	r2, r1, r2
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	1ac3      	subs	r3, r0, r3
 8006a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d901      	bls.n	8006a14 <f_read+0x260>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	8992      	ldrh	r2, [r2, #12]
 8006a22:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a26:	fb00 f202 	mul.w	r2, r0, r2
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a30:	4619      	mov	r1, r3
 8006a32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a34:	f7fd fbf9 	bl	800422a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	4413      	add	r3, r2
 8006a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a46:	441a      	add	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	619a      	str	r2, [r3, #24]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a52:	441a      	add	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f47f aee1 	bne.w	800682a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3738      	adds	r7, #56	@ 0x38
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b08c      	sub	sp, #48	@ 0x30
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f107 0210 	add.w	r2, r7, #16
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff fc4a 	bl	800632c <validate>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d107      	bne.n	8006ab6 <f_write+0x44>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	7d5b      	ldrb	r3, [r3, #21]
 8006aaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006aae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <f_write+0x4a>
 8006ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006aba:	e16a      	b.n	8006d92 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	7d1b      	ldrb	r3, [r3, #20]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <f_write+0x5a>
 8006ac8:	2307      	movs	r3, #7
 8006aca:	e162      	b.n	8006d92 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	441a      	add	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	f080 814c 	bcs.w	8006d76 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006ae6:	e146      	b.n	8006d76 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	8992      	ldrh	r2, [r2, #12]
 8006af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006af4:	fb01 f202 	mul.w	r2, r1, r2
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 80f1 	bne.w	8006ce2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	8992      	ldrh	r2, [r2, #12]
 8006b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	8952      	ldrh	r2, [r2, #10]
 8006b10:	3a01      	subs	r2, #1
 8006b12:	4013      	ands	r3, r2
 8006b14:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d143      	bne.n	8006ba4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10c      	bne.n	8006b3e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11a      	bne.n	8006b66 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe f8b6 	bl	8004ca6 <create_chain>
 8006b3a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006b3c:	e013      	b.n	8006b66 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7fe f942 	bl	8004dd6 <clmt_clust>
 8006b52:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006b54:	e007      	b.n	8006b66 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f7fe f8a1 	bl	8004ca6 <create_chain>
 8006b64:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 8109 	beq.w	8006d80 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d104      	bne.n	8006b7e <f_write+0x10c>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2202      	movs	r2, #2
 8006b78:	755a      	strb	r2, [r3, #21]
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e109      	b.n	8006d92 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b84:	d104      	bne.n	8006b90 <f_write+0x11e>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	755a      	strb	r2, [r3, #21]
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e100      	b.n	8006d92 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b94:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <f_write+0x132>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ba2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	7d1b      	ldrb	r3, [r3, #20]
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da18      	bge.n	8006be0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	7858      	ldrb	r0, [r3, #1]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1a      	ldr	r2, [r3, #32]
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f7fd fa73 	bl	80040a8 <disk_write>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <f_write+0x160>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	755a      	strb	r2, [r3, #21]
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e0df      	b.n	8006d92 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	7d1b      	ldrb	r3, [r3, #20]
 8006bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f7fd fdeb 	bl	80047c4 <clust2sect>
 8006bee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <f_write+0x18e>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	755a      	strb	r2, [r3, #21]
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e0c8      	b.n	8006d92 <f_write+0x320>
			sect += csect;
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	4413      	add	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	899b      	ldrh	r3, [r3, #12]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d043      	beq.n	8006ca4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	4413      	add	r3, r2
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	8952      	ldrh	r2, [r2, #10]
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d905      	bls.n	8006c36 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	895b      	ldrh	r3, [r3, #10]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	7858      	ldrb	r0, [r3, #1]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	69f9      	ldr	r1, [r7, #28]
 8006c40:	f7fd fa32 	bl	80040a8 <disk_write>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <f_write+0x1e2>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	755a      	strb	r2, [r3, #21]
 8006c50:	2301      	movs	r3, #1
 8006c52:	e09e      	b.n	8006d92 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1a      	ldr	r2, [r3, #32]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	6a3a      	ldr	r2, [r7, #32]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d918      	bls.n	8006c94 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1a      	ldr	r2, [r3, #32]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	8992      	ldrh	r2, [r2, #12]
 8006c74:	fb02 f303 	mul.w	r3, r2, r3
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	18d1      	adds	r1, r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	899b      	ldrh	r3, [r3, #12]
 8006c80:	461a      	mov	r2, r3
 8006c82:	f7fd fad2 	bl	800422a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	7d1b      	ldrb	r3, [r3, #20]
 8006c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	899b      	ldrh	r3, [r3, #12]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ca0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006ca2:	e04b      	b.n	8006d3c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d016      	beq.n	8006cdc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d210      	bcs.n	8006cdc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	7858      	ldrb	r0, [r3, #1]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	f7fd f9ce 	bl	8004068 <disk_read>
 8006ccc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	755a      	strb	r2, [r3, #21]
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e05a      	b.n	8006d92 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	899b      	ldrh	r3, [r3, #12]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	8992      	ldrh	r2, [r2, #12]
 8006cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cf4:	fb01 f202 	mul.w	r2, r1, r2
 8006cf8:	1a9b      	subs	r3, r3, r2
 8006cfa:	1ac3      	subs	r3, r0, r3
 8006cfc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d901      	bls.n	8006d0a <f_write+0x298>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	8992      	ldrh	r2, [r2, #12]
 8006d18:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d1c:	fb00 f202 	mul.w	r2, r0, r2
 8006d20:	1a9b      	subs	r3, r3, r2
 8006d22:	440b      	add	r3, r1
 8006d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d26:	69f9      	ldr	r1, [r7, #28]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fd fa7e 	bl	800422a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	7d1b      	ldrb	r3, [r3, #20]
 8006d32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	4413      	add	r3, r2
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	441a      	add	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	619a      	str	r2, [r3, #24]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	bf38      	it	cc
 8006d5c:	461a      	movcc	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	441a      	add	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f47f aeb5 	bne.w	8006ae8 <f_write+0x76>
 8006d7e:	e000      	b.n	8006d82 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	7d1b      	ldrb	r3, [r3, #20]
 8006d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3730      	adds	r7, #48	@ 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f107 0208 	add.w	r2, r7, #8
 8006da8:	4611      	mov	r1, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff fabe 	bl	800632c <validate>
 8006db0:	4603      	mov	r3, r0
 8006db2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d168      	bne.n	8006e8c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	7d1b      	ldrb	r3, [r3, #20]
 8006dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d062      	beq.n	8006e8c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7d1b      	ldrb	r3, [r3, #20]
 8006dca:	b25b      	sxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	da15      	bge.n	8006dfc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	7858      	ldrb	r0, [r3, #1]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1a      	ldr	r2, [r3, #32]
 8006dde:	2301      	movs	r3, #1
 8006de0:	f7fd f962 	bl	80040a8 <disk_write>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <f_sync+0x54>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e04f      	b.n	8006e8e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7d1b      	ldrb	r3, [r3, #20]
 8006df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006dfc:	f7fc fbd0 	bl	80035a0 <get_fattime>
 8006e00:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	f7fd fc3c 	bl	8004688 <move_window>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d138      	bne.n	8006e8c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	330b      	adds	r3, #11
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	330b      	adds	r3, #11
 8006e2a:	f042 0220 	orr.w	r2, r2, #32
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68f9      	ldr	r1, [r7, #12]
 8006e3e:	f7fe f9c7 	bl	80051d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f103 021c 	add.w	r2, r3, #28
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f7fd f9bf 	bl	80041d2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3316      	adds	r3, #22
 8006e58:	6939      	ldr	r1, [r7, #16]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd f9b9 	bl	80041d2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3312      	adds	r3, #18
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fd f998 	bl	800419c <st_word>
					fs->wflag = 1;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fd fc35 	bl	80046e4 <sync_fs>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	7d1b      	ldrb	r3, [r3, #20]
 8006e82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff ff7b 	bl	8006d9a <f_sync>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d118      	bne.n	8006ee0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f107 0208 	add.w	r2, r7, #8
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fa38 	bl	800632c <validate>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10c      	bne.n	8006ee0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fd fb38 	bl	8004540 <dec_lock>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b090      	sub	sp, #64	@ 0x40
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f107 0208 	add.w	r2, r7, #8
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fa15 	bl	800632c <validate>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006f08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <f_lseek+0x2e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	7d5b      	ldrb	r3, [r3, #21]
 8006f14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006f18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <f_lseek+0x3c>
 8006f20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006f24:	e201      	b.n	800732a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80d9 	beq.w	80070e2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d15a      	bne.n	8006fee <f_lseek+0x104>
			tbl = fp->cltbl;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	1d1a      	adds	r2, r3, #4
 8006f42:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	2302      	movs	r3, #2
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d03a      	beq.n	8006fce <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	3302      	adds	r3, #2
 8006f64:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fd fc44 	bl	8004802 <get_fat>
 8006f7a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d804      	bhi.n	8006f8c <f_lseek+0xa2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	755a      	strb	r2, [r3, #21]
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e1ce      	b.n	800732a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d104      	bne.n	8006f9e <f_lseek+0xb4>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	755a      	strb	r2, [r3, #21]
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e1c5      	b.n	800732a <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d0de      	beq.n	8006f66 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d809      	bhi.n	8006fc4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	1d1a      	adds	r2, r3, #4
 8006fb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d3c4      	bcc.n	8006f58 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fd4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d803      	bhi.n	8006fe6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e19f      	b.n	8007326 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006fe6:	2311      	movs	r3, #17
 8006fe8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006fec:	e19b      	b.n	8007326 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d902      	bls.n	8006ffe <f_lseek+0x114>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 818d 	beq.w	8007326 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	3b01      	subs	r3, #1
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fd fedf 	bl	8004dd6 <clmt_clust>
 8007018:	4602      	mov	r2, r0
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f7fd fbcc 	bl	80047c4 <clust2sect>
 800702c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <f_lseek+0x154>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	755a      	strb	r2, [r3, #21]
 800703a:	2302      	movs	r3, #2
 800703c:	e175      	b.n	800732a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	3b01      	subs	r3, #1
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	8992      	ldrh	r2, [r2, #12]
 8007046:	fbb3 f3f2 	udiv	r3, r3, r2
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	8952      	ldrh	r2, [r2, #10]
 800704e:	3a01      	subs	r2, #1
 8007050:	4013      	ands	r3, r2
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	4413      	add	r3, r2
 8007056:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	8992      	ldrh	r2, [r2, #12]
 8007060:	fbb3 f1f2 	udiv	r1, r3, r2
 8007064:	fb01 f202 	mul.w	r2, r1, r2
 8007068:	1a9b      	subs	r3, r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 815b 	beq.w	8007326 <f_lseek+0x43c>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	429a      	cmp	r2, r3
 8007078:	f000 8155 	beq.w	8007326 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7d1b      	ldrb	r3, [r3, #20]
 8007080:	b25b      	sxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	da18      	bge.n	80070b8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	7858      	ldrb	r0, [r3, #1]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1a      	ldr	r2, [r3, #32]
 8007094:	2301      	movs	r3, #1
 8007096:	f7fd f807 	bl	80040a8 <disk_write>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <f_lseek+0x1c0>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	755a      	strb	r2, [r3, #21]
 80070a6:	2301      	movs	r3, #1
 80070a8:	e13f      	b.n	800732a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7d1b      	ldrb	r3, [r3, #20]
 80070ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	7858      	ldrb	r0, [r3, #1]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070c2:	2301      	movs	r3, #1
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	f7fc ffcf 	bl	8004068 <disk_read>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <f_lseek+0x1f0>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	755a      	strb	r2, [r3, #21]
 80070d6:	2301      	movs	r3, #1
 80070d8:	e127      	b.n	800732a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	621a      	str	r2, [r3, #32]
 80070e0:	e121      	b.n	8007326 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d908      	bls.n	80070fe <f_lseek+0x214>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	7d1b      	ldrb	r3, [r3, #20]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	637b      	str	r3, [r7, #52]	@ 0x34
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800710c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80b5 	beq.w	8007280 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	895b      	ldrh	r3, [r3, #10]
 800711a:	461a      	mov	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	899b      	ldrh	r3, [r3, #12]
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01b      	beq.n	8007164 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	1e5a      	subs	r2, r3, #1
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	fbb2 f2f3 	udiv	r2, r2, r3
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	1e59      	subs	r1, r3, #1
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007140:	429a      	cmp	r2, r3
 8007142:	d30f      	bcc.n	8007164 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	1e5a      	subs	r2, r3, #1
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	425b      	negs	r3, r3
 800714c:	401a      	ands	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007162:	e022      	b.n	80071aa <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d119      	bne.n	80071a4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2100      	movs	r1, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f7fd fd96 	bl	8004ca6 <create_chain>
 800717a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800717c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717e:	2b01      	cmp	r3, #1
 8007180:	d104      	bne.n	800718c <f_lseek+0x2a2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	755a      	strb	r2, [r3, #21]
 8007188:	2302      	movs	r3, #2
 800718a:	e0ce      	b.n	800732a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d104      	bne.n	800719e <f_lseek+0x2b4>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	755a      	strb	r2, [r3, #21]
 800719a:	2301      	movs	r3, #1
 800719c:	e0c5      	b.n	800732a <f_lseek+0x440>
					fp->obj.sclust = clst;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071a2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071a8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d067      	beq.n	8007280 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80071b0:	e03a      	b.n	8007228 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	603b      	str	r3, [r7, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	441a      	add	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	7d1b      	ldrb	r3, [r3, #20]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fd fd65 	bl	8004ca6 <create_chain>
 80071dc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80071de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <f_lseek+0x30c>
							ofs = 0; break;
 80071e4:	2300      	movs	r3, #0
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	e022      	b.n	8007230 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fd fb07 	bl	8004802 <get_fat>
 80071f4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d104      	bne.n	8007208 <f_lseek+0x31e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	755a      	strb	r2, [r3, #21]
 8007204:	2301      	movs	r3, #1
 8007206:	e090      	b.n	800732a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	2b01      	cmp	r3, #1
 800720c:	d904      	bls.n	8007218 <f_lseek+0x32e>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007214:	429a      	cmp	r2, r3
 8007216:	d304      	bcc.n	8007222 <f_lseek+0x338>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	755a      	strb	r2, [r3, #21]
 800721e:	2302      	movs	r3, #2
 8007220:	e083      	b.n	800732a <f_lseek+0x440>
					fp->clust = clst;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007226:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	429a      	cmp	r2, r3
 800722e:	d8c0      	bhi.n	80071b2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	441a      	add	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	899b      	ldrh	r3, [r3, #12]
 8007240:	461a      	mov	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	fbb3 f1f2 	udiv	r1, r3, r2
 8007248:	fb01 f202 	mul.w	r2, r1, r2
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007256:	4618      	mov	r0, r3
 8007258:	f7fd fab4 	bl	80047c4 <clust2sect>
 800725c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800725e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <f_lseek+0x384>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	755a      	strb	r2, [r3, #21]
 800726a:	2302      	movs	r3, #2
 800726c:	e05d      	b.n	800732a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	899b      	ldrh	r3, [r3, #12]
 8007272:	461a      	mov	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	fbb3 f3f2 	udiv	r3, r3, r2
 800727a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800727c:	4413      	add	r3, r2
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	429a      	cmp	r2, r3
 800728a:	d90a      	bls.n	80072a2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	7d1b      	ldrb	r3, [r3, #20]
 8007298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800729c:	b2da      	uxtb	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	8992      	ldrh	r2, [r2, #12]
 80072aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80072ae:	fb01 f202 	mul.w	r2, r1, r2
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d036      	beq.n	8007326 <f_lseek+0x43c>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072be:	429a      	cmp	r2, r3
 80072c0:	d031      	beq.n	8007326 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7d1b      	ldrb	r3, [r3, #20]
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da18      	bge.n	80072fe <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	7858      	ldrb	r0, [r3, #1]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	2301      	movs	r3, #1
 80072dc:	f7fc fee4 	bl	80040a8 <disk_write>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <f_lseek+0x406>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	755a      	strb	r2, [r3, #21]
 80072ec:	2301      	movs	r3, #1
 80072ee:	e01c      	b.n	800732a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7d1b      	ldrb	r3, [r3, #20]
 80072f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	7858      	ldrb	r0, [r3, #1]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007308:	2301      	movs	r3, #1
 800730a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800730c:	f7fc feac 	bl	8004068 <disk_read>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <f_lseek+0x436>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	755a      	strb	r2, [r3, #21]
 800731c:	2301      	movs	r3, #1
 800731e:	e004      	b.n	800732a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007324:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007326:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800732a:	4618      	mov	r0, r3
 800732c:	3740      	adds	r7, #64	@ 0x40
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b092      	sub	sp, #72	@ 0x48
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800733e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007342:	f107 030c 	add.w	r3, r7, #12
 8007346:	2200      	movs	r2, #0
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fd69 	bl	8005e20 <find_volume>
 800734e:	4603      	mov	r3, r0
 8007350:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8007354:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007358:	2b00      	cmp	r3, #0
 800735a:	f040 8099 	bne.w	8007490 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800735e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	3b02      	subs	r3, #2
 800736e:	429a      	cmp	r2, r3
 8007370:	d804      	bhi.n	800737c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e089      	b.n	8007490 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d128      	bne.n	80073da <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007388:	2302      	movs	r3, #2
 800738a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800738c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007396:	4618      	mov	r0, r3
 8007398:	f7fd fa33 	bl	8004802 <get_fat>
 800739c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a4:	d103      	bne.n	80073ae <f_getfree+0x7c>
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80073ac:	e063      	b.n	8007476 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80073ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d103      	bne.n	80073bc <f_getfree+0x8a>
 80073b4:	2302      	movs	r3, #2
 80073b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80073ba:	e05c      	b.n	8007476 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <f_getfree+0x96>
 80073c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073c4:	3301      	adds	r3, #1
 80073c6:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80073c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ca:	3301      	adds	r3, #1
 80073cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d3db      	bcc.n	8007390 <f_getfree+0x5e>
 80073d8:	e04d      	b.n	8007476 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ea:	2300      	movs	r3, #0
 80073ec:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80073ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d113      	bne.n	800741c <f_getfree+0xea>
							res = move_window(fs, sect++);
 80073f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80073fc:	4619      	mov	r1, r3
 80073fe:	f7fd f943 	bl	8004688 <move_window>
 8007402:	4603      	mov	r3, r0
 8007404:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007408:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800740c:	2b00      	cmp	r3, #0
 800740e:	d131      	bne.n	8007474 <f_getfree+0x142>
							p = fs->win;
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	3338      	adds	r3, #56	@ 0x38
 8007414:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007418:	899b      	ldrh	r3, [r3, #12]
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800741c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d10f      	bne.n	8007444 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007426:	f7fc fe7d 	bl	8004124 <ld_word>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <f_getfree+0x104>
 8007430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007432:	3301      	adds	r3, #1
 8007434:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	3302      	adds	r3, #2
 800743a:	633b      	str	r3, [r7, #48]	@ 0x30
 800743c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743e:	3b02      	subs	r3, #2
 8007440:	637b      	str	r3, [r7, #52]	@ 0x34
 8007442:	e010      	b.n	8007466 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007446:	f7fc fe86 	bl	8004156 <ld_dword>
 800744a:	4603      	mov	r3, r0
 800744c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <f_getfree+0x128>
 8007454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007456:	3301      	adds	r3, #1
 8007458:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	3304      	adds	r3, #4
 800745e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007462:	3b04      	subs	r3, #4
 8007464:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007468:	3b01      	subs	r3, #1
 800746a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800746c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1bd      	bne.n	80073ee <f_getfree+0xbc>
 8007472:	e000      	b.n	8007476 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007474:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800747a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007480:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	791a      	ldrb	r2, [r3, #4]
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007490:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007494:	4618      	mov	r0, r3
 8007496:	3748      	adds	r7, #72	@ 0x48
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80074b0:	e01c      	b.n	80074ec <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80074b2:	f107 0310 	add.w	r3, r7, #16
 80074b6:	f107 0114 	add.w	r1, r7, #20
 80074ba:	2201      	movs	r2, #1
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff f979 	bl	80067b4 <f_read>
		if (rc != 1) break;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d117      	bne.n	80074f8 <f_gets+0x5c>
		c = s[0];
 80074c8:	7d3b      	ldrb	r3, [r7, #20]
 80074ca:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	2b0d      	cmp	r3, #13
 80074d0:	d00b      	beq.n	80074ea <f_gets+0x4e>
		*p++ = c;
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	61ba      	str	r2, [r7, #24]
 80074d8:	7dfa      	ldrb	r2, [r7, #23]
 80074da:	701a      	strb	r2, [r3, #0]
		n++;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	3301      	adds	r3, #1
 80074e0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	2b0a      	cmp	r3, #10
 80074e6:	d009      	beq.n	80074fc <f_gets+0x60>
 80074e8:	e000      	b.n	80074ec <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80074ea:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	dbdd      	blt.n	80074b2 <f_gets+0x16>
 80074f6:	e002      	b.n	80074fe <f_gets+0x62>
		if (rc != 1) break;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80074fc:	bf00      	nop
	}
	*p = 0;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <f_gets+0x72>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	e000      	b.n	8007510 <f_gets+0x74>
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3720      	adds	r7, #32
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	2b0a      	cmp	r3, #10
 8007528:	d103      	bne.n	8007532 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800752a:	210d      	movs	r1, #13
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff fff3 	bl	8007518 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	db25      	blt.n	800758a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	60fa      	str	r2, [r7, #12]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4413      	add	r3, r2
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b3c      	cmp	r3, #60	@ 0x3c
 8007550:	dd12      	ble.n	8007578 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f103 010c 	add.w	r1, r3, #12
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	f107 0308 	add.w	r3, r7, #8
 8007562:	f7ff fa86 	bl	8006a72 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	429a      	cmp	r2, r3
 800756c:	d101      	bne.n	8007572 <putc_bfd+0x5a>
 800756e:	2300      	movs	r3, #0
 8007570:	e001      	b.n	8007576 <putc_bfd+0x5e>
 8007572:	f04f 33ff 	mov.w	r3, #4294967295
 8007576:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	609a      	str	r2, [r3, #8]
 8007588:	e000      	b.n	800758c <putc_bfd+0x74>
	if (i < 0) return;
 800758a:	bf00      	nop
}
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	db16      	blt.n	80075d0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f103 010c 	add.w	r1, r3, #12
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	461a      	mov	r2, r3
 80075b2:	f107 030c 	add.w	r3, r7, #12
 80075b6:	f7ff fa5c 	bl	8006a72 <f_write>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d107      	bne.n	80075d0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d102      	bne.n	80075d0 <putc_flush+0x3e>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	e001      	b.n	80075d4 <putc_flush+0x42>
	return EOF;
 80075d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	609a      	str	r2, [r3, #8]
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b096      	sub	sp, #88	@ 0x58
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007610:	f107 030c 	add.w	r3, r7, #12
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff ffe0 	bl	80075dc <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800761c:	e009      	b.n	8007632 <f_puts+0x2c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	f107 030c 	add.w	r3, r7, #12
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff ff73 	bl	8007518 <putc_bfd>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f1      	bne.n	800761e <f_puts+0x18>
	return putc_flush(&pb);
 800763a:	f107 030c 	add.w	r3, r7, #12
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff ffa7 	bl	8007592 <putc_flush>
 8007644:	4603      	mov	r3, r0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3758      	adds	r7, #88	@ 0x58
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800765e:	2301      	movs	r3, #1
 8007660:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007666:	4b1f      	ldr	r3, [pc, #124]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 8007668:	7a5b      	ldrb	r3, [r3, #9]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d131      	bne.n	80076d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007670:	4b1c      	ldr	r3, [pc, #112]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 8007672:	7a5b      	ldrb	r3, [r3, #9]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	461a      	mov	r2, r3
 8007678:	4b1a      	ldr	r3, [pc, #104]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 800767a:	2100      	movs	r1, #0
 800767c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800767e:	4b19      	ldr	r3, [pc, #100]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 8007680:	7a5b      	ldrb	r3, [r3, #9]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	4a17      	ldr	r2, [pc, #92]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800768e:	4b15      	ldr	r3, [pc, #84]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 8007690:	7a5b      	ldrb	r3, [r3, #9]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	4b13      	ldr	r3, [pc, #76]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 8007698:	4413      	add	r3, r2
 800769a:	79fa      	ldrb	r2, [r7, #7]
 800769c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800769e:	4b11      	ldr	r3, [pc, #68]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 80076a0:	7a5b      	ldrb	r3, [r3, #9]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	b2d1      	uxtb	r1, r2
 80076a8:	4a0e      	ldr	r2, [pc, #56]	@ (80076e4 <FATFS_LinkDriverEx+0x94>)
 80076aa:	7251      	strb	r1, [r2, #9]
 80076ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80076ae:	7dbb      	ldrb	r3, [r7, #22]
 80076b0:	3330      	adds	r3, #48	@ 0x30
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	3301      	adds	r3, #1
 80076bc:	223a      	movs	r2, #58	@ 0x3a
 80076be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	3302      	adds	r3, #2
 80076c4:	222f      	movs	r2, #47	@ 0x2f
 80076c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	3303      	adds	r3, #3
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000474 	.word	0x20000474

080076e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80076f2:	2200      	movs	r2, #0
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff ffaa 	bl	8007650 <FATFS_LinkDriverEx>
 80076fc:	4603      	mov	r3, r0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	2b7f      	cmp	r3, #127	@ 0x7f
 8007718:	d802      	bhi.n	8007720 <ff_convert+0x18>
		c = chr;
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	81fb      	strh	r3, [r7, #14]
 800771e:	e025      	b.n	800776c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00b      	beq.n	800773e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	2bff      	cmp	r3, #255	@ 0xff
 800772a:	d805      	bhi.n	8007738 <ff_convert+0x30>
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	3b80      	subs	r3, #128	@ 0x80
 8007730:	4a12      	ldr	r2, [pc, #72]	@ (800777c <ff_convert+0x74>)
 8007732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007736:	e000      	b.n	800773a <ff_convert+0x32>
 8007738:	2300      	movs	r3, #0
 800773a:	81fb      	strh	r3, [r7, #14]
 800773c:	e016      	b.n	800776c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800773e:	2300      	movs	r3, #0
 8007740:	81fb      	strh	r3, [r7, #14]
 8007742:	e009      	b.n	8007758 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007744:	89fb      	ldrh	r3, [r7, #14]
 8007746:	4a0d      	ldr	r2, [pc, #52]	@ (800777c <ff_convert+0x74>)
 8007748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	429a      	cmp	r2, r3
 8007750:	d006      	beq.n	8007760 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007752:	89fb      	ldrh	r3, [r7, #14]
 8007754:	3301      	adds	r3, #1
 8007756:	81fb      	strh	r3, [r7, #14]
 8007758:	89fb      	ldrh	r3, [r7, #14]
 800775a:	2b7f      	cmp	r3, #127	@ 0x7f
 800775c:	d9f2      	bls.n	8007744 <ff_convert+0x3c>
 800775e:	e000      	b.n	8007762 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007760:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007762:	89fb      	ldrh	r3, [r7, #14]
 8007764:	3380      	adds	r3, #128	@ 0x80
 8007766:	b29b      	uxth	r3, r3
 8007768:	b2db      	uxtb	r3, r3
 800776a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800776c:	89fb      	ldrh	r3, [r7, #14]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	08008644 	.word	0x08008644

08007780 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007790:	d201      	bcs.n	8007796 <ff_wtoupper+0x16>
 8007792:	4b3e      	ldr	r3, [pc, #248]	@ (800788c <ff_wtoupper+0x10c>)
 8007794:	e000      	b.n	8007798 <ff_wtoupper+0x18>
 8007796:	4b3e      	ldr	r3, [pc, #248]	@ (8007890 <ff_wtoupper+0x110>)
 8007798:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	1c9a      	adds	r2, r3, #2
 800779e:	617a      	str	r2, [r7, #20]
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80077a4:	8a7b      	ldrh	r3, [r7, #18]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d068      	beq.n	800787c <ff_wtoupper+0xfc>
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	8a7b      	ldrh	r3, [r7, #18]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d364      	bcc.n	800787c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	617a      	str	r2, [r7, #20]
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	823b      	strh	r3, [r7, #16]
 80077bc:	8a3b      	ldrh	r3, [r7, #16]
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	81fb      	strh	r3, [r7, #14]
 80077c2:	8a3b      	ldrh	r3, [r7, #16]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80077c8:	88fa      	ldrh	r2, [r7, #6]
 80077ca:	8a79      	ldrh	r1, [r7, #18]
 80077cc:	8a3b      	ldrh	r3, [r7, #16]
 80077ce:	440b      	add	r3, r1
 80077d0:	429a      	cmp	r2, r3
 80077d2:	da49      	bge.n	8007868 <ff_wtoupper+0xe8>
			switch (cmd) {
 80077d4:	89fb      	ldrh	r3, [r7, #14]
 80077d6:	2b08      	cmp	r3, #8
 80077d8:	d84f      	bhi.n	800787a <ff_wtoupper+0xfa>
 80077da:	a201      	add	r2, pc, #4	@ (adr r2, 80077e0 <ff_wtoupper+0x60>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	08007805 	.word	0x08007805
 80077e4:	08007817 	.word	0x08007817
 80077e8:	0800782d 	.word	0x0800782d
 80077ec:	08007835 	.word	0x08007835
 80077f0:	0800783d 	.word	0x0800783d
 80077f4:	08007845 	.word	0x08007845
 80077f8:	0800784d 	.word	0x0800784d
 80077fc:	08007855 	.word	0x08007855
 8007800:	0800785d 	.word	0x0800785d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007804:	88fa      	ldrh	r2, [r7, #6]
 8007806:	8a7b      	ldrh	r3, [r7, #18]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4413      	add	r3, r2
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	80fb      	strh	r3, [r7, #6]
 8007814:	e027      	b.n	8007866 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007816:	88fa      	ldrh	r2, [r7, #6]
 8007818:	8a7b      	ldrh	r3, [r7, #18]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	b29b      	uxth	r3, r3
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	b29b      	uxth	r3, r3
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	80fb      	strh	r3, [r7, #6]
 800782a:	e01c      	b.n	8007866 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	3b10      	subs	r3, #16
 8007830:	80fb      	strh	r3, [r7, #6]
 8007832:	e018      	b.n	8007866 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	3b20      	subs	r3, #32
 8007838:	80fb      	strh	r3, [r7, #6]
 800783a:	e014      	b.n	8007866 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	3b30      	subs	r3, #48	@ 0x30
 8007840:	80fb      	strh	r3, [r7, #6]
 8007842:	e010      	b.n	8007866 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	3b1a      	subs	r3, #26
 8007848:	80fb      	strh	r3, [r7, #6]
 800784a:	e00c      	b.n	8007866 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800784c:	88fb      	ldrh	r3, [r7, #6]
 800784e:	3308      	adds	r3, #8
 8007850:	80fb      	strh	r3, [r7, #6]
 8007852:	e008      	b.n	8007866 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	3b50      	subs	r3, #80	@ 0x50
 8007858:	80fb      	strh	r3, [r7, #6]
 800785a:	e004      	b.n	8007866 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007862:	80fb      	strh	r3, [r7, #6]
 8007864:	bf00      	nop
			}
			break;
 8007866:	e008      	b.n	800787a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007868:	89fb      	ldrh	r3, [r7, #14]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d195      	bne.n	800779a <ff_wtoupper+0x1a>
 800786e:	8a3b      	ldrh	r3, [r7, #16]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4413      	add	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007878:	e78f      	b.n	800779a <ff_wtoupper+0x1a>
			break;
 800787a:	bf00      	nop
	}

	return chr;
 800787c:	88fb      	ldrh	r3, [r7, #6]
}
 800787e:	4618      	mov	r0, r3
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	08008744 	.word	0x08008744
 8007890:	08008938 	.word	0x08008938

08007894 <siprintf>:
 8007894:	b40e      	push	{r1, r2, r3}
 8007896:	b510      	push	{r4, lr}
 8007898:	b09d      	sub	sp, #116	@ 0x74
 800789a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	9006      	str	r0, [sp, #24]
 80078a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078a4:	480a      	ldr	r0, [pc, #40]	@ (80078d0 <siprintf+0x3c>)
 80078a6:	9107      	str	r1, [sp, #28]
 80078a8:	9104      	str	r1, [sp, #16]
 80078aa:	490a      	ldr	r1, [pc, #40]	@ (80078d4 <siprintf+0x40>)
 80078ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	2400      	movs	r4, #0
 80078b4:	a902      	add	r1, sp, #8
 80078b6:	6800      	ldr	r0, [r0, #0]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80078bc:	f000 f994 	bl	8007be8 <_svfiprintf_r>
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	701c      	strb	r4, [r3, #0]
 80078c4:	b01d      	add	sp, #116	@ 0x74
 80078c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ca:	b003      	add	sp, #12
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000028 	.word	0x20000028
 80078d4:	ffff0208 	.word	0xffff0208

080078d8 <memset>:
 80078d8:	4402      	add	r2, r0
 80078da:	4603      	mov	r3, r0
 80078dc:	4293      	cmp	r3, r2
 80078de:	d100      	bne.n	80078e2 <memset+0xa>
 80078e0:	4770      	bx	lr
 80078e2:	f803 1b01 	strb.w	r1, [r3], #1
 80078e6:	e7f9      	b.n	80078dc <memset+0x4>

080078e8 <__errno>:
 80078e8:	4b01      	ldr	r3, [pc, #4]	@ (80078f0 <__errno+0x8>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000028 	.word	0x20000028

080078f4 <__libc_init_array>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4d0d      	ldr	r5, [pc, #52]	@ (800792c <__libc_init_array+0x38>)
 80078f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007930 <__libc_init_array+0x3c>)
 80078fa:	1b64      	subs	r4, r4, r5
 80078fc:	10a4      	asrs	r4, r4, #2
 80078fe:	2600      	movs	r6, #0
 8007900:	42a6      	cmp	r6, r4
 8007902:	d109      	bne.n	8007918 <__libc_init_array+0x24>
 8007904:	4d0b      	ldr	r5, [pc, #44]	@ (8007934 <__libc_init_array+0x40>)
 8007906:	4c0c      	ldr	r4, [pc, #48]	@ (8007938 <__libc_init_array+0x44>)
 8007908:	f000 fc64 	bl	80081d4 <_init>
 800790c:	1b64      	subs	r4, r4, r5
 800790e:	10a4      	asrs	r4, r4, #2
 8007910:	2600      	movs	r6, #0
 8007912:	42a6      	cmp	r6, r4
 8007914:	d105      	bne.n	8007922 <__libc_init_array+0x2e>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	f855 3b04 	ldr.w	r3, [r5], #4
 800791c:	4798      	blx	r3
 800791e:	3601      	adds	r6, #1
 8007920:	e7ee      	b.n	8007900 <__libc_init_array+0xc>
 8007922:	f855 3b04 	ldr.w	r3, [r5], #4
 8007926:	4798      	blx	r3
 8007928:	3601      	adds	r6, #1
 800792a:	e7f2      	b.n	8007912 <__libc_init_array+0x1e>
 800792c:	08008a30 	.word	0x08008a30
 8007930:	08008a30 	.word	0x08008a30
 8007934:	08008a30 	.word	0x08008a30
 8007938:	08008a34 	.word	0x08008a34

0800793c <__retarget_lock_acquire_recursive>:
 800793c:	4770      	bx	lr

0800793e <__retarget_lock_release_recursive>:
 800793e:	4770      	bx	lr

08007940 <_free_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4605      	mov	r5, r0
 8007944:	2900      	cmp	r1, #0
 8007946:	d041      	beq.n	80079cc <_free_r+0x8c>
 8007948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800794c:	1f0c      	subs	r4, r1, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	bfb8      	it	lt
 8007952:	18e4      	addlt	r4, r4, r3
 8007954:	f000 f8e0 	bl	8007b18 <__malloc_lock>
 8007958:	4a1d      	ldr	r2, [pc, #116]	@ (80079d0 <_free_r+0x90>)
 800795a:	6813      	ldr	r3, [r2, #0]
 800795c:	b933      	cbnz	r3, 800796c <_free_r+0x2c>
 800795e:	6063      	str	r3, [r4, #4]
 8007960:	6014      	str	r4, [r2, #0]
 8007962:	4628      	mov	r0, r5
 8007964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007968:	f000 b8dc 	b.w	8007b24 <__malloc_unlock>
 800796c:	42a3      	cmp	r3, r4
 800796e:	d908      	bls.n	8007982 <_free_r+0x42>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	1821      	adds	r1, r4, r0
 8007974:	428b      	cmp	r3, r1
 8007976:	bf01      	itttt	eq
 8007978:	6819      	ldreq	r1, [r3, #0]
 800797a:	685b      	ldreq	r3, [r3, #4]
 800797c:	1809      	addeq	r1, r1, r0
 800797e:	6021      	streq	r1, [r4, #0]
 8007980:	e7ed      	b.n	800795e <_free_r+0x1e>
 8007982:	461a      	mov	r2, r3
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	b10b      	cbz	r3, 800798c <_free_r+0x4c>
 8007988:	42a3      	cmp	r3, r4
 800798a:	d9fa      	bls.n	8007982 <_free_r+0x42>
 800798c:	6811      	ldr	r1, [r2, #0]
 800798e:	1850      	adds	r0, r2, r1
 8007990:	42a0      	cmp	r0, r4
 8007992:	d10b      	bne.n	80079ac <_free_r+0x6c>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	4401      	add	r1, r0
 8007998:	1850      	adds	r0, r2, r1
 800799a:	4283      	cmp	r3, r0
 800799c:	6011      	str	r1, [r2, #0]
 800799e:	d1e0      	bne.n	8007962 <_free_r+0x22>
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	6053      	str	r3, [r2, #4]
 80079a6:	4408      	add	r0, r1
 80079a8:	6010      	str	r0, [r2, #0]
 80079aa:	e7da      	b.n	8007962 <_free_r+0x22>
 80079ac:	d902      	bls.n	80079b4 <_free_r+0x74>
 80079ae:	230c      	movs	r3, #12
 80079b0:	602b      	str	r3, [r5, #0]
 80079b2:	e7d6      	b.n	8007962 <_free_r+0x22>
 80079b4:	6820      	ldr	r0, [r4, #0]
 80079b6:	1821      	adds	r1, r4, r0
 80079b8:	428b      	cmp	r3, r1
 80079ba:	bf04      	itt	eq
 80079bc:	6819      	ldreq	r1, [r3, #0]
 80079be:	685b      	ldreq	r3, [r3, #4]
 80079c0:	6063      	str	r3, [r4, #4]
 80079c2:	bf04      	itt	eq
 80079c4:	1809      	addeq	r1, r1, r0
 80079c6:	6021      	streq	r1, [r4, #0]
 80079c8:	6054      	str	r4, [r2, #4]
 80079ca:	e7ca      	b.n	8007962 <_free_r+0x22>
 80079cc:	bd38      	pop	{r3, r4, r5, pc}
 80079ce:	bf00      	nop
 80079d0:	200005c4 	.word	0x200005c4

080079d4 <sbrk_aligned>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007a14 <sbrk_aligned+0x40>)
 80079d8:	460c      	mov	r4, r1
 80079da:	6831      	ldr	r1, [r6, #0]
 80079dc:	4605      	mov	r5, r0
 80079de:	b911      	cbnz	r1, 80079e6 <sbrk_aligned+0x12>
 80079e0:	f000 fba4 	bl	800812c <_sbrk_r>
 80079e4:	6030      	str	r0, [r6, #0]
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f000 fb9f 	bl	800812c <_sbrk_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	d103      	bne.n	80079fa <sbrk_aligned+0x26>
 80079f2:	f04f 34ff 	mov.w	r4, #4294967295
 80079f6:	4620      	mov	r0, r4
 80079f8:	bd70      	pop	{r4, r5, r6, pc}
 80079fa:	1cc4      	adds	r4, r0, #3
 80079fc:	f024 0403 	bic.w	r4, r4, #3
 8007a00:	42a0      	cmp	r0, r4
 8007a02:	d0f8      	beq.n	80079f6 <sbrk_aligned+0x22>
 8007a04:	1a21      	subs	r1, r4, r0
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fb90 	bl	800812c <_sbrk_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d1f2      	bne.n	80079f6 <sbrk_aligned+0x22>
 8007a10:	e7ef      	b.n	80079f2 <sbrk_aligned+0x1e>
 8007a12:	bf00      	nop
 8007a14:	200005c0 	.word	0x200005c0

08007a18 <_malloc_r>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	1ccd      	adds	r5, r1, #3
 8007a1e:	f025 0503 	bic.w	r5, r5, #3
 8007a22:	3508      	adds	r5, #8
 8007a24:	2d0c      	cmp	r5, #12
 8007a26:	bf38      	it	cc
 8007a28:	250c      	movcc	r5, #12
 8007a2a:	2d00      	cmp	r5, #0
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	db01      	blt.n	8007a34 <_malloc_r+0x1c>
 8007a30:	42a9      	cmp	r1, r5
 8007a32:	d904      	bls.n	8007a3e <_malloc_r+0x26>
 8007a34:	230c      	movs	r3, #12
 8007a36:	6033      	str	r3, [r6, #0]
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b14 <_malloc_r+0xfc>
 8007a42:	f000 f869 	bl	8007b18 <__malloc_lock>
 8007a46:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4a:	461c      	mov	r4, r3
 8007a4c:	bb44      	cbnz	r4, 8007aa0 <_malloc_r+0x88>
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7ff ffbf 	bl	80079d4 <sbrk_aligned>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	4604      	mov	r4, r0
 8007a5a:	d158      	bne.n	8007b0e <_malloc_r+0xf6>
 8007a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007a60:	4627      	mov	r7, r4
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	d143      	bne.n	8007aee <_malloc_r+0xd6>
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	d04b      	beq.n	8007b02 <_malloc_r+0xea>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	4630      	mov	r0, r6
 8007a70:	eb04 0903 	add.w	r9, r4, r3
 8007a74:	f000 fb5a 	bl	800812c <_sbrk_r>
 8007a78:	4581      	cmp	r9, r0
 8007a7a:	d142      	bne.n	8007b02 <_malloc_r+0xea>
 8007a7c:	6821      	ldr	r1, [r4, #0]
 8007a7e:	1a6d      	subs	r5, r5, r1
 8007a80:	4629      	mov	r1, r5
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ffa6 	bl	80079d4 <sbrk_aligned>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d03a      	beq.n	8007b02 <_malloc_r+0xea>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	442b      	add	r3, r5
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	f8d8 3000 	ldr.w	r3, [r8]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	bb62      	cbnz	r2, 8007af4 <_malloc_r+0xdc>
 8007a9a:	f8c8 7000 	str.w	r7, [r8]
 8007a9e:	e00f      	b.n	8007ac0 <_malloc_r+0xa8>
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	1b52      	subs	r2, r2, r5
 8007aa4:	d420      	bmi.n	8007ae8 <_malloc_r+0xd0>
 8007aa6:	2a0b      	cmp	r2, #11
 8007aa8:	d917      	bls.n	8007ada <_malloc_r+0xc2>
 8007aaa:	1961      	adds	r1, r4, r5
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	6025      	str	r5, [r4, #0]
 8007ab0:	bf18      	it	ne
 8007ab2:	6059      	strne	r1, [r3, #4]
 8007ab4:	6863      	ldr	r3, [r4, #4]
 8007ab6:	bf08      	it	eq
 8007ab8:	f8c8 1000 	streq.w	r1, [r8]
 8007abc:	5162      	str	r2, [r4, r5]
 8007abe:	604b      	str	r3, [r1, #4]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f000 f82f 	bl	8007b24 <__malloc_unlock>
 8007ac6:	f104 000b 	add.w	r0, r4, #11
 8007aca:	1d23      	adds	r3, r4, #4
 8007acc:	f020 0007 	bic.w	r0, r0, #7
 8007ad0:	1ac2      	subs	r2, r0, r3
 8007ad2:	bf1c      	itt	ne
 8007ad4:	1a1b      	subne	r3, r3, r0
 8007ad6:	50a3      	strne	r3, [r4, r2]
 8007ad8:	e7af      	b.n	8007a3a <_malloc_r+0x22>
 8007ada:	6862      	ldr	r2, [r4, #4]
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	bf0c      	ite	eq
 8007ae0:	f8c8 2000 	streq.w	r2, [r8]
 8007ae4:	605a      	strne	r2, [r3, #4]
 8007ae6:	e7eb      	b.n	8007ac0 <_malloc_r+0xa8>
 8007ae8:	4623      	mov	r3, r4
 8007aea:	6864      	ldr	r4, [r4, #4]
 8007aec:	e7ae      	b.n	8007a4c <_malloc_r+0x34>
 8007aee:	463c      	mov	r4, r7
 8007af0:	687f      	ldr	r7, [r7, #4]
 8007af2:	e7b6      	b.n	8007a62 <_malloc_r+0x4a>
 8007af4:	461a      	mov	r2, r3
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d1fb      	bne.n	8007af4 <_malloc_r+0xdc>
 8007afc:	2300      	movs	r3, #0
 8007afe:	6053      	str	r3, [r2, #4]
 8007b00:	e7de      	b.n	8007ac0 <_malloc_r+0xa8>
 8007b02:	230c      	movs	r3, #12
 8007b04:	6033      	str	r3, [r6, #0]
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 f80c 	bl	8007b24 <__malloc_unlock>
 8007b0c:	e794      	b.n	8007a38 <_malloc_r+0x20>
 8007b0e:	6005      	str	r5, [r0, #0]
 8007b10:	e7d6      	b.n	8007ac0 <_malloc_r+0xa8>
 8007b12:	bf00      	nop
 8007b14:	200005c4 	.word	0x200005c4

08007b18 <__malloc_lock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	@ (8007b20 <__malloc_lock+0x8>)
 8007b1a:	f7ff bf0f 	b.w	800793c <__retarget_lock_acquire_recursive>
 8007b1e:	bf00      	nop
 8007b20:	200005bc 	.word	0x200005bc

08007b24 <__malloc_unlock>:
 8007b24:	4801      	ldr	r0, [pc, #4]	@ (8007b2c <__malloc_unlock+0x8>)
 8007b26:	f7ff bf0a 	b.w	800793e <__retarget_lock_release_recursive>
 8007b2a:	bf00      	nop
 8007b2c:	200005bc 	.word	0x200005bc

08007b30 <__ssputs_r>:
 8007b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b34:	688e      	ldr	r6, [r1, #8]
 8007b36:	461f      	mov	r7, r3
 8007b38:	42be      	cmp	r6, r7
 8007b3a:	680b      	ldr	r3, [r1, #0]
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	4690      	mov	r8, r2
 8007b42:	d82d      	bhi.n	8007ba0 <__ssputs_r+0x70>
 8007b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b4c:	d026      	beq.n	8007b9c <__ssputs_r+0x6c>
 8007b4e:	6965      	ldr	r5, [r4, #20]
 8007b50:	6909      	ldr	r1, [r1, #16]
 8007b52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b56:	eba3 0901 	sub.w	r9, r3, r1
 8007b5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b5e:	1c7b      	adds	r3, r7, #1
 8007b60:	444b      	add	r3, r9
 8007b62:	106d      	asrs	r5, r5, #1
 8007b64:	429d      	cmp	r5, r3
 8007b66:	bf38      	it	cc
 8007b68:	461d      	movcc	r5, r3
 8007b6a:	0553      	lsls	r3, r2, #21
 8007b6c:	d527      	bpl.n	8007bbe <__ssputs_r+0x8e>
 8007b6e:	4629      	mov	r1, r5
 8007b70:	f7ff ff52 	bl	8007a18 <_malloc_r>
 8007b74:	4606      	mov	r6, r0
 8007b76:	b360      	cbz	r0, 8007bd2 <__ssputs_r+0xa2>
 8007b78:	6921      	ldr	r1, [r4, #16]
 8007b7a:	464a      	mov	r2, r9
 8007b7c:	f000 fae6 	bl	800814c <memcpy>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	6126      	str	r6, [r4, #16]
 8007b8e:	6165      	str	r5, [r4, #20]
 8007b90:	444e      	add	r6, r9
 8007b92:	eba5 0509 	sub.w	r5, r5, r9
 8007b96:	6026      	str	r6, [r4, #0]
 8007b98:	60a5      	str	r5, [r4, #8]
 8007b9a:	463e      	mov	r6, r7
 8007b9c:	42be      	cmp	r6, r7
 8007b9e:	d900      	bls.n	8007ba2 <__ssputs_r+0x72>
 8007ba0:	463e      	mov	r6, r7
 8007ba2:	6820      	ldr	r0, [r4, #0]
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	4641      	mov	r1, r8
 8007ba8:	f000 faa6 	bl	80080f8 <memmove>
 8007bac:	68a3      	ldr	r3, [r4, #8]
 8007bae:	1b9b      	subs	r3, r3, r6
 8007bb0:	60a3      	str	r3, [r4, #8]
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	4433      	add	r3, r6
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	f000 fad2 	bl	8008168 <_realloc_r>
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d1e0      	bne.n	8007b8c <__ssputs_r+0x5c>
 8007bca:	6921      	ldr	r1, [r4, #16]
 8007bcc:	4650      	mov	r0, sl
 8007bce:	f7ff feb7 	bl	8007940 <_free_r>
 8007bd2:	230c      	movs	r3, #12
 8007bd4:	f8ca 3000 	str.w	r3, [sl]
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bde:	81a3      	strh	r3, [r4, #12]
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	e7e9      	b.n	8007bba <__ssputs_r+0x8a>
	...

08007be8 <_svfiprintf_r>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	4698      	mov	r8, r3
 8007bee:	898b      	ldrh	r3, [r1, #12]
 8007bf0:	061b      	lsls	r3, r3, #24
 8007bf2:	b09d      	sub	sp, #116	@ 0x74
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	d510      	bpl.n	8007c1e <_svfiprintf_r+0x36>
 8007bfc:	690b      	ldr	r3, [r1, #16]
 8007bfe:	b973      	cbnz	r3, 8007c1e <_svfiprintf_r+0x36>
 8007c00:	2140      	movs	r1, #64	@ 0x40
 8007c02:	f7ff ff09 	bl	8007a18 <_malloc_r>
 8007c06:	6028      	str	r0, [r5, #0]
 8007c08:	6128      	str	r0, [r5, #16]
 8007c0a:	b930      	cbnz	r0, 8007c1a <_svfiprintf_r+0x32>
 8007c0c:	230c      	movs	r3, #12
 8007c0e:	603b      	str	r3, [r7, #0]
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	b01d      	add	sp, #116	@ 0x74
 8007c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1a:	2340      	movs	r3, #64	@ 0x40
 8007c1c:	616b      	str	r3, [r5, #20]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c22:	2320      	movs	r3, #32
 8007c24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c2c:	2330      	movs	r3, #48	@ 0x30
 8007c2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007dcc <_svfiprintf_r+0x1e4>
 8007c32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c36:	f04f 0901 	mov.w	r9, #1
 8007c3a:	4623      	mov	r3, r4
 8007c3c:	469a      	mov	sl, r3
 8007c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c42:	b10a      	cbz	r2, 8007c48 <_svfiprintf_r+0x60>
 8007c44:	2a25      	cmp	r2, #37	@ 0x25
 8007c46:	d1f9      	bne.n	8007c3c <_svfiprintf_r+0x54>
 8007c48:	ebba 0b04 	subs.w	fp, sl, r4
 8007c4c:	d00b      	beq.n	8007c66 <_svfiprintf_r+0x7e>
 8007c4e:	465b      	mov	r3, fp
 8007c50:	4622      	mov	r2, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff ff6b 	bl	8007b30 <__ssputs_r>
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	f000 80a7 	beq.w	8007dae <_svfiprintf_r+0x1c6>
 8007c60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c62:	445a      	add	r2, fp
 8007c64:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c66:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 809f 	beq.w	8007dae <_svfiprintf_r+0x1c6>
 8007c70:	2300      	movs	r3, #0
 8007c72:	f04f 32ff 	mov.w	r2, #4294967295
 8007c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c7a:	f10a 0a01 	add.w	sl, sl, #1
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	9307      	str	r3, [sp, #28]
 8007c82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c86:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c88:	4654      	mov	r4, sl
 8007c8a:	2205      	movs	r2, #5
 8007c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c90:	484e      	ldr	r0, [pc, #312]	@ (8007dcc <_svfiprintf_r+0x1e4>)
 8007c92:	f7f8 faad 	bl	80001f0 <memchr>
 8007c96:	9a04      	ldr	r2, [sp, #16]
 8007c98:	b9d8      	cbnz	r0, 8007cd2 <_svfiprintf_r+0xea>
 8007c9a:	06d0      	lsls	r0, r2, #27
 8007c9c:	bf44      	itt	mi
 8007c9e:	2320      	movmi	r3, #32
 8007ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca4:	0711      	lsls	r1, r2, #28
 8007ca6:	bf44      	itt	mi
 8007ca8:	232b      	movmi	r3, #43	@ 0x2b
 8007caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cae:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cb4:	d015      	beq.n	8007ce2 <_svfiprintf_r+0xfa>
 8007cb6:	9a07      	ldr	r2, [sp, #28]
 8007cb8:	4654      	mov	r4, sl
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f04f 0c0a 	mov.w	ip, #10
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc6:	3b30      	subs	r3, #48	@ 0x30
 8007cc8:	2b09      	cmp	r3, #9
 8007cca:	d94b      	bls.n	8007d64 <_svfiprintf_r+0x17c>
 8007ccc:	b1b0      	cbz	r0, 8007cfc <_svfiprintf_r+0x114>
 8007cce:	9207      	str	r2, [sp, #28]
 8007cd0:	e014      	b.n	8007cfc <_svfiprintf_r+0x114>
 8007cd2:	eba0 0308 	sub.w	r3, r0, r8
 8007cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	46a2      	mov	sl, r4
 8007ce0:	e7d2      	b.n	8007c88 <_svfiprintf_r+0xa0>
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	1d19      	adds	r1, r3, #4
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	9103      	str	r1, [sp, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	bfbb      	ittet	lt
 8007cee:	425b      	neglt	r3, r3
 8007cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8007cf4:	9307      	strge	r3, [sp, #28]
 8007cf6:	9307      	strlt	r3, [sp, #28]
 8007cf8:	bfb8      	it	lt
 8007cfa:	9204      	strlt	r2, [sp, #16]
 8007cfc:	7823      	ldrb	r3, [r4, #0]
 8007cfe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d00:	d10a      	bne.n	8007d18 <_svfiprintf_r+0x130>
 8007d02:	7863      	ldrb	r3, [r4, #1]
 8007d04:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d06:	d132      	bne.n	8007d6e <_svfiprintf_r+0x186>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	1d1a      	adds	r2, r3, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	9203      	str	r2, [sp, #12]
 8007d10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d14:	3402      	adds	r4, #2
 8007d16:	9305      	str	r3, [sp, #20]
 8007d18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ddc <_svfiprintf_r+0x1f4>
 8007d1c:	7821      	ldrb	r1, [r4, #0]
 8007d1e:	2203      	movs	r2, #3
 8007d20:	4650      	mov	r0, sl
 8007d22:	f7f8 fa65 	bl	80001f0 <memchr>
 8007d26:	b138      	cbz	r0, 8007d38 <_svfiprintf_r+0x150>
 8007d28:	9b04      	ldr	r3, [sp, #16]
 8007d2a:	eba0 000a 	sub.w	r0, r0, sl
 8007d2e:	2240      	movs	r2, #64	@ 0x40
 8007d30:	4082      	lsls	r2, r0
 8007d32:	4313      	orrs	r3, r2
 8007d34:	3401      	adds	r4, #1
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3c:	4824      	ldr	r0, [pc, #144]	@ (8007dd0 <_svfiprintf_r+0x1e8>)
 8007d3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d42:	2206      	movs	r2, #6
 8007d44:	f7f8 fa54 	bl	80001f0 <memchr>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d036      	beq.n	8007dba <_svfiprintf_r+0x1d2>
 8007d4c:	4b21      	ldr	r3, [pc, #132]	@ (8007dd4 <_svfiprintf_r+0x1ec>)
 8007d4e:	bb1b      	cbnz	r3, 8007d98 <_svfiprintf_r+0x1b0>
 8007d50:	9b03      	ldr	r3, [sp, #12]
 8007d52:	3307      	adds	r3, #7
 8007d54:	f023 0307 	bic.w	r3, r3, #7
 8007d58:	3308      	adds	r3, #8
 8007d5a:	9303      	str	r3, [sp, #12]
 8007d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5e:	4433      	add	r3, r6
 8007d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d62:	e76a      	b.n	8007c3a <_svfiprintf_r+0x52>
 8007d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d68:	460c      	mov	r4, r1
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	e7a8      	b.n	8007cc0 <_svfiprintf_r+0xd8>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	3401      	adds	r4, #1
 8007d72:	9305      	str	r3, [sp, #20]
 8007d74:	4619      	mov	r1, r3
 8007d76:	f04f 0c0a 	mov.w	ip, #10
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d80:	3a30      	subs	r2, #48	@ 0x30
 8007d82:	2a09      	cmp	r2, #9
 8007d84:	d903      	bls.n	8007d8e <_svfiprintf_r+0x1a6>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0c6      	beq.n	8007d18 <_svfiprintf_r+0x130>
 8007d8a:	9105      	str	r1, [sp, #20]
 8007d8c:	e7c4      	b.n	8007d18 <_svfiprintf_r+0x130>
 8007d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d92:	4604      	mov	r4, r0
 8007d94:	2301      	movs	r3, #1
 8007d96:	e7f0      	b.n	8007d7a <_svfiprintf_r+0x192>
 8007d98:	ab03      	add	r3, sp, #12
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd8 <_svfiprintf_r+0x1f0>)
 8007da0:	a904      	add	r1, sp, #16
 8007da2:	4638      	mov	r0, r7
 8007da4:	f3af 8000 	nop.w
 8007da8:	1c42      	adds	r2, r0, #1
 8007daa:	4606      	mov	r6, r0
 8007dac:	d1d6      	bne.n	8007d5c <_svfiprintf_r+0x174>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	065b      	lsls	r3, r3, #25
 8007db2:	f53f af2d 	bmi.w	8007c10 <_svfiprintf_r+0x28>
 8007db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007db8:	e72c      	b.n	8007c14 <_svfiprintf_r+0x2c>
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4b05      	ldr	r3, [pc, #20]	@ (8007dd8 <_svfiprintf_r+0x1f0>)
 8007dc2:	a904      	add	r1, sp, #16
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f000 f879 	bl	8007ebc <_printf_i>
 8007dca:	e7ed      	b.n	8007da8 <_svfiprintf_r+0x1c0>
 8007dcc:	080089f4 	.word	0x080089f4
 8007dd0:	080089fe 	.word	0x080089fe
 8007dd4:	00000000 	.word	0x00000000
 8007dd8:	08007b31 	.word	0x08007b31
 8007ddc:	080089fa 	.word	0x080089fa

08007de0 <_printf_common>:
 8007de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de4:	4616      	mov	r6, r2
 8007de6:	4698      	mov	r8, r3
 8007de8:	688a      	ldr	r2, [r1, #8]
 8007dea:	690b      	ldr	r3, [r1, #16]
 8007dec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bfb8      	it	lt
 8007df4:	4613      	movlt	r3, r2
 8007df6:	6033      	str	r3, [r6, #0]
 8007df8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	b10a      	cbz	r2, 8007e06 <_printf_common+0x26>
 8007e02:	3301      	adds	r3, #1
 8007e04:	6033      	str	r3, [r6, #0]
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	0699      	lsls	r1, r3, #26
 8007e0a:	bf42      	ittt	mi
 8007e0c:	6833      	ldrmi	r3, [r6, #0]
 8007e0e:	3302      	addmi	r3, #2
 8007e10:	6033      	strmi	r3, [r6, #0]
 8007e12:	6825      	ldr	r5, [r4, #0]
 8007e14:	f015 0506 	ands.w	r5, r5, #6
 8007e18:	d106      	bne.n	8007e28 <_printf_common+0x48>
 8007e1a:	f104 0a19 	add.w	sl, r4, #25
 8007e1e:	68e3      	ldr	r3, [r4, #12]
 8007e20:	6832      	ldr	r2, [r6, #0]
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	42ab      	cmp	r3, r5
 8007e26:	dc26      	bgt.n	8007e76 <_printf_common+0x96>
 8007e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e2c:	6822      	ldr	r2, [r4, #0]
 8007e2e:	3b00      	subs	r3, #0
 8007e30:	bf18      	it	ne
 8007e32:	2301      	movne	r3, #1
 8007e34:	0692      	lsls	r2, r2, #26
 8007e36:	d42b      	bmi.n	8007e90 <_printf_common+0xb0>
 8007e38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	4638      	mov	r0, r7
 8007e40:	47c8      	blx	r9
 8007e42:	3001      	adds	r0, #1
 8007e44:	d01e      	beq.n	8007e84 <_printf_common+0xa4>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	6922      	ldr	r2, [r4, #16]
 8007e4a:	f003 0306 	and.w	r3, r3, #6
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	bf02      	ittt	eq
 8007e52:	68e5      	ldreq	r5, [r4, #12]
 8007e54:	6833      	ldreq	r3, [r6, #0]
 8007e56:	1aed      	subeq	r5, r5, r3
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	bf0c      	ite	eq
 8007e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e60:	2500      	movne	r5, #0
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bfc4      	itt	gt
 8007e66:	1a9b      	subgt	r3, r3, r2
 8007e68:	18ed      	addgt	r5, r5, r3
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	341a      	adds	r4, #26
 8007e6e:	42b5      	cmp	r5, r6
 8007e70:	d11a      	bne.n	8007ea8 <_printf_common+0xc8>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e008      	b.n	8007e88 <_printf_common+0xa8>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4652      	mov	r2, sl
 8007e7a:	4641      	mov	r1, r8
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	47c8      	blx	r9
 8007e80:	3001      	adds	r0, #1
 8007e82:	d103      	bne.n	8007e8c <_printf_common+0xac>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	e7c6      	b.n	8007e1e <_printf_common+0x3e>
 8007e90:	18e1      	adds	r1, r4, r3
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	2030      	movs	r0, #48	@ 0x30
 8007e96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e9a:	4422      	add	r2, r4
 8007e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	e7c7      	b.n	8007e38 <_printf_common+0x58>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4641      	mov	r1, r8
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c8      	blx	r9
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d0e6      	beq.n	8007e84 <_printf_common+0xa4>
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7d9      	b.n	8007e6e <_printf_common+0x8e>
	...

08007ebc <_printf_i>:
 8007ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	7e0f      	ldrb	r7, [r1, #24]
 8007ec2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ec4:	2f78      	cmp	r7, #120	@ 0x78
 8007ec6:	4691      	mov	r9, r2
 8007ec8:	4680      	mov	r8, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	469a      	mov	sl, r3
 8007ece:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ed2:	d807      	bhi.n	8007ee4 <_printf_i+0x28>
 8007ed4:	2f62      	cmp	r7, #98	@ 0x62
 8007ed6:	d80a      	bhi.n	8007eee <_printf_i+0x32>
 8007ed8:	2f00      	cmp	r7, #0
 8007eda:	f000 80d1 	beq.w	8008080 <_printf_i+0x1c4>
 8007ede:	2f58      	cmp	r7, #88	@ 0x58
 8007ee0:	f000 80b8 	beq.w	8008054 <_printf_i+0x198>
 8007ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007eec:	e03a      	b.n	8007f64 <_printf_i+0xa8>
 8007eee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ef2:	2b15      	cmp	r3, #21
 8007ef4:	d8f6      	bhi.n	8007ee4 <_printf_i+0x28>
 8007ef6:	a101      	add	r1, pc, #4	@ (adr r1, 8007efc <_printf_i+0x40>)
 8007ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007efc:	08007f55 	.word	0x08007f55
 8007f00:	08007f69 	.word	0x08007f69
 8007f04:	08007ee5 	.word	0x08007ee5
 8007f08:	08007ee5 	.word	0x08007ee5
 8007f0c:	08007ee5 	.word	0x08007ee5
 8007f10:	08007ee5 	.word	0x08007ee5
 8007f14:	08007f69 	.word	0x08007f69
 8007f18:	08007ee5 	.word	0x08007ee5
 8007f1c:	08007ee5 	.word	0x08007ee5
 8007f20:	08007ee5 	.word	0x08007ee5
 8007f24:	08007ee5 	.word	0x08007ee5
 8007f28:	08008067 	.word	0x08008067
 8007f2c:	08007f93 	.word	0x08007f93
 8007f30:	08008021 	.word	0x08008021
 8007f34:	08007ee5 	.word	0x08007ee5
 8007f38:	08007ee5 	.word	0x08007ee5
 8007f3c:	08008089 	.word	0x08008089
 8007f40:	08007ee5 	.word	0x08007ee5
 8007f44:	08007f93 	.word	0x08007f93
 8007f48:	08007ee5 	.word	0x08007ee5
 8007f4c:	08007ee5 	.word	0x08007ee5
 8007f50:	08008029 	.word	0x08008029
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	1d1a      	adds	r2, r3, #4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6032      	str	r2, [r6, #0]
 8007f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f64:	2301      	movs	r3, #1
 8007f66:	e09c      	b.n	80080a2 <_printf_i+0x1e6>
 8007f68:	6833      	ldr	r3, [r6, #0]
 8007f6a:	6820      	ldr	r0, [r4, #0]
 8007f6c:	1d19      	adds	r1, r3, #4
 8007f6e:	6031      	str	r1, [r6, #0]
 8007f70:	0606      	lsls	r6, r0, #24
 8007f72:	d501      	bpl.n	8007f78 <_printf_i+0xbc>
 8007f74:	681d      	ldr	r5, [r3, #0]
 8007f76:	e003      	b.n	8007f80 <_printf_i+0xc4>
 8007f78:	0645      	lsls	r5, r0, #25
 8007f7a:	d5fb      	bpl.n	8007f74 <_printf_i+0xb8>
 8007f7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	da03      	bge.n	8007f8c <_printf_i+0xd0>
 8007f84:	232d      	movs	r3, #45	@ 0x2d
 8007f86:	426d      	negs	r5, r5
 8007f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f8c:	4858      	ldr	r0, [pc, #352]	@ (80080f0 <_printf_i+0x234>)
 8007f8e:	230a      	movs	r3, #10
 8007f90:	e011      	b.n	8007fb6 <_printf_i+0xfa>
 8007f92:	6821      	ldr	r1, [r4, #0]
 8007f94:	6833      	ldr	r3, [r6, #0]
 8007f96:	0608      	lsls	r0, r1, #24
 8007f98:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f9c:	d402      	bmi.n	8007fa4 <_printf_i+0xe8>
 8007f9e:	0649      	lsls	r1, r1, #25
 8007fa0:	bf48      	it	mi
 8007fa2:	b2ad      	uxthmi	r5, r5
 8007fa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fa6:	4852      	ldr	r0, [pc, #328]	@ (80080f0 <_printf_i+0x234>)
 8007fa8:	6033      	str	r3, [r6, #0]
 8007faa:	bf14      	ite	ne
 8007fac:	230a      	movne	r3, #10
 8007fae:	2308      	moveq	r3, #8
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fb6:	6866      	ldr	r6, [r4, #4]
 8007fb8:	60a6      	str	r6, [r4, #8]
 8007fba:	2e00      	cmp	r6, #0
 8007fbc:	db05      	blt.n	8007fca <_printf_i+0x10e>
 8007fbe:	6821      	ldr	r1, [r4, #0]
 8007fc0:	432e      	orrs	r6, r5
 8007fc2:	f021 0104 	bic.w	r1, r1, #4
 8007fc6:	6021      	str	r1, [r4, #0]
 8007fc8:	d04b      	beq.n	8008062 <_printf_i+0x1a6>
 8007fca:	4616      	mov	r6, r2
 8007fcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fd0:	fb03 5711 	mls	r7, r3, r1, r5
 8007fd4:	5dc7      	ldrb	r7, [r0, r7]
 8007fd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fda:	462f      	mov	r7, r5
 8007fdc:	42bb      	cmp	r3, r7
 8007fde:	460d      	mov	r5, r1
 8007fe0:	d9f4      	bls.n	8007fcc <_printf_i+0x110>
 8007fe2:	2b08      	cmp	r3, #8
 8007fe4:	d10b      	bne.n	8007ffe <_printf_i+0x142>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	07df      	lsls	r7, r3, #31
 8007fea:	d508      	bpl.n	8007ffe <_printf_i+0x142>
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	6861      	ldr	r1, [r4, #4]
 8007ff0:	4299      	cmp	r1, r3
 8007ff2:	bfde      	ittt	le
 8007ff4:	2330      	movle	r3, #48	@ 0x30
 8007ff6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ffa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ffe:	1b92      	subs	r2, r2, r6
 8008000:	6122      	str	r2, [r4, #16]
 8008002:	f8cd a000 	str.w	sl, [sp]
 8008006:	464b      	mov	r3, r9
 8008008:	aa03      	add	r2, sp, #12
 800800a:	4621      	mov	r1, r4
 800800c:	4640      	mov	r0, r8
 800800e:	f7ff fee7 	bl	8007de0 <_printf_common>
 8008012:	3001      	adds	r0, #1
 8008014:	d14a      	bne.n	80080ac <_printf_i+0x1f0>
 8008016:	f04f 30ff 	mov.w	r0, #4294967295
 800801a:	b004      	add	sp, #16
 800801c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	f043 0320 	orr.w	r3, r3, #32
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	4832      	ldr	r0, [pc, #200]	@ (80080f4 <_printf_i+0x238>)
 800802a:	2778      	movs	r7, #120	@ 0x78
 800802c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	6831      	ldr	r1, [r6, #0]
 8008034:	061f      	lsls	r7, r3, #24
 8008036:	f851 5b04 	ldr.w	r5, [r1], #4
 800803a:	d402      	bmi.n	8008042 <_printf_i+0x186>
 800803c:	065f      	lsls	r7, r3, #25
 800803e:	bf48      	it	mi
 8008040:	b2ad      	uxthmi	r5, r5
 8008042:	6031      	str	r1, [r6, #0]
 8008044:	07d9      	lsls	r1, r3, #31
 8008046:	bf44      	itt	mi
 8008048:	f043 0320 	orrmi.w	r3, r3, #32
 800804c:	6023      	strmi	r3, [r4, #0]
 800804e:	b11d      	cbz	r5, 8008058 <_printf_i+0x19c>
 8008050:	2310      	movs	r3, #16
 8008052:	e7ad      	b.n	8007fb0 <_printf_i+0xf4>
 8008054:	4826      	ldr	r0, [pc, #152]	@ (80080f0 <_printf_i+0x234>)
 8008056:	e7e9      	b.n	800802c <_printf_i+0x170>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	f023 0320 	bic.w	r3, r3, #32
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	e7f6      	b.n	8008050 <_printf_i+0x194>
 8008062:	4616      	mov	r6, r2
 8008064:	e7bd      	b.n	8007fe2 <_printf_i+0x126>
 8008066:	6833      	ldr	r3, [r6, #0]
 8008068:	6825      	ldr	r5, [r4, #0]
 800806a:	6961      	ldr	r1, [r4, #20]
 800806c:	1d18      	adds	r0, r3, #4
 800806e:	6030      	str	r0, [r6, #0]
 8008070:	062e      	lsls	r6, r5, #24
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	d501      	bpl.n	800807a <_printf_i+0x1be>
 8008076:	6019      	str	r1, [r3, #0]
 8008078:	e002      	b.n	8008080 <_printf_i+0x1c4>
 800807a:	0668      	lsls	r0, r5, #25
 800807c:	d5fb      	bpl.n	8008076 <_printf_i+0x1ba>
 800807e:	8019      	strh	r1, [r3, #0]
 8008080:	2300      	movs	r3, #0
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	4616      	mov	r6, r2
 8008086:	e7bc      	b.n	8008002 <_printf_i+0x146>
 8008088:	6833      	ldr	r3, [r6, #0]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	6032      	str	r2, [r6, #0]
 800808e:	681e      	ldr	r6, [r3, #0]
 8008090:	6862      	ldr	r2, [r4, #4]
 8008092:	2100      	movs	r1, #0
 8008094:	4630      	mov	r0, r6
 8008096:	f7f8 f8ab 	bl	80001f0 <memchr>
 800809a:	b108      	cbz	r0, 80080a0 <_printf_i+0x1e4>
 800809c:	1b80      	subs	r0, r0, r6
 800809e:	6060      	str	r0, [r4, #4]
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	6123      	str	r3, [r4, #16]
 80080a4:	2300      	movs	r3, #0
 80080a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080aa:	e7aa      	b.n	8008002 <_printf_i+0x146>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	4632      	mov	r2, r6
 80080b0:	4649      	mov	r1, r9
 80080b2:	4640      	mov	r0, r8
 80080b4:	47d0      	blx	sl
 80080b6:	3001      	adds	r0, #1
 80080b8:	d0ad      	beq.n	8008016 <_printf_i+0x15a>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	079b      	lsls	r3, r3, #30
 80080be:	d413      	bmi.n	80080e8 <_printf_i+0x22c>
 80080c0:	68e0      	ldr	r0, [r4, #12]
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	4298      	cmp	r0, r3
 80080c6:	bfb8      	it	lt
 80080c8:	4618      	movlt	r0, r3
 80080ca:	e7a6      	b.n	800801a <_printf_i+0x15e>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4632      	mov	r2, r6
 80080d0:	4649      	mov	r1, r9
 80080d2:	4640      	mov	r0, r8
 80080d4:	47d0      	blx	sl
 80080d6:	3001      	adds	r0, #1
 80080d8:	d09d      	beq.n	8008016 <_printf_i+0x15a>
 80080da:	3501      	adds	r5, #1
 80080dc:	68e3      	ldr	r3, [r4, #12]
 80080de:	9903      	ldr	r1, [sp, #12]
 80080e0:	1a5b      	subs	r3, r3, r1
 80080e2:	42ab      	cmp	r3, r5
 80080e4:	dcf2      	bgt.n	80080cc <_printf_i+0x210>
 80080e6:	e7eb      	b.n	80080c0 <_printf_i+0x204>
 80080e8:	2500      	movs	r5, #0
 80080ea:	f104 0619 	add.w	r6, r4, #25
 80080ee:	e7f5      	b.n	80080dc <_printf_i+0x220>
 80080f0:	08008a05 	.word	0x08008a05
 80080f4:	08008a16 	.word	0x08008a16

080080f8 <memmove>:
 80080f8:	4288      	cmp	r0, r1
 80080fa:	b510      	push	{r4, lr}
 80080fc:	eb01 0402 	add.w	r4, r1, r2
 8008100:	d902      	bls.n	8008108 <memmove+0x10>
 8008102:	4284      	cmp	r4, r0
 8008104:	4623      	mov	r3, r4
 8008106:	d807      	bhi.n	8008118 <memmove+0x20>
 8008108:	1e43      	subs	r3, r0, #1
 800810a:	42a1      	cmp	r1, r4
 800810c:	d008      	beq.n	8008120 <memmove+0x28>
 800810e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008116:	e7f8      	b.n	800810a <memmove+0x12>
 8008118:	4402      	add	r2, r0
 800811a:	4601      	mov	r1, r0
 800811c:	428a      	cmp	r2, r1
 800811e:	d100      	bne.n	8008122 <memmove+0x2a>
 8008120:	bd10      	pop	{r4, pc}
 8008122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800812a:	e7f7      	b.n	800811c <memmove+0x24>

0800812c <_sbrk_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d06      	ldr	r5, [pc, #24]	@ (8008148 <_sbrk_r+0x1c>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7f9 f9de 	bl	80014f8 <_sbrk>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_sbrk_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_sbrk_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	200005b8 	.word	0x200005b8

0800814c <memcpy>:
 800814c:	440a      	add	r2, r1
 800814e:	4291      	cmp	r1, r2
 8008150:	f100 33ff 	add.w	r3, r0, #4294967295
 8008154:	d100      	bne.n	8008158 <memcpy+0xc>
 8008156:	4770      	bx	lr
 8008158:	b510      	push	{r4, lr}
 800815a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008162:	4291      	cmp	r1, r2
 8008164:	d1f9      	bne.n	800815a <memcpy+0xe>
 8008166:	bd10      	pop	{r4, pc}

08008168 <_realloc_r>:
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	4607      	mov	r7, r0
 800816e:	4614      	mov	r4, r2
 8008170:	460d      	mov	r5, r1
 8008172:	b921      	cbnz	r1, 800817e <_realloc_r+0x16>
 8008174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	4611      	mov	r1, r2
 800817a:	f7ff bc4d 	b.w	8007a18 <_malloc_r>
 800817e:	b92a      	cbnz	r2, 800818c <_realloc_r+0x24>
 8008180:	f7ff fbde 	bl	8007940 <_free_r>
 8008184:	4625      	mov	r5, r4
 8008186:	4628      	mov	r0, r5
 8008188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800818c:	f000 f81a 	bl	80081c4 <_malloc_usable_size_r>
 8008190:	4284      	cmp	r4, r0
 8008192:	4606      	mov	r6, r0
 8008194:	d802      	bhi.n	800819c <_realloc_r+0x34>
 8008196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800819a:	d8f4      	bhi.n	8008186 <_realloc_r+0x1e>
 800819c:	4621      	mov	r1, r4
 800819e:	4638      	mov	r0, r7
 80081a0:	f7ff fc3a 	bl	8007a18 <_malloc_r>
 80081a4:	4680      	mov	r8, r0
 80081a6:	b908      	cbnz	r0, 80081ac <_realloc_r+0x44>
 80081a8:	4645      	mov	r5, r8
 80081aa:	e7ec      	b.n	8008186 <_realloc_r+0x1e>
 80081ac:	42b4      	cmp	r4, r6
 80081ae:	4622      	mov	r2, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	bf28      	it	cs
 80081b4:	4632      	movcs	r2, r6
 80081b6:	f7ff ffc9 	bl	800814c <memcpy>
 80081ba:	4629      	mov	r1, r5
 80081bc:	4638      	mov	r0, r7
 80081be:	f7ff fbbf 	bl	8007940 <_free_r>
 80081c2:	e7f1      	b.n	80081a8 <_realloc_r+0x40>

080081c4 <_malloc_usable_size_r>:
 80081c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c8:	1f18      	subs	r0, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bfbc      	itt	lt
 80081ce:	580b      	ldrlt	r3, [r1, r0]
 80081d0:	18c0      	addlt	r0, r0, r3
 80081d2:	4770      	bx	lr

080081d4 <_init>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr

080081e0 <_fini>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr
